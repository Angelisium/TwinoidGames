movie 'pod.swf' {
// flash 8, total frames: 1, frame rate: 40 fps, 80x120 px, compressed

  movieClip 2  {
  }

  movieClip 4  {
  }

  movieClip 6  {
  }

  movieClip 8  {
  }

  movieClip 10  {
  }

  movieClip 12  {
  }

  movieClip 14  {
  }

  movieClip 21 eyeAnim {

    frame 1 {
      stop();
    }
  }

  movieClip 22  {

    frame 1 {
      compt = 1;
      var nmax = 0;
    }

    frame 2 {
      nmin = 120;
      compt = random(50) + nmin;
      if (compt == nmin + 1) {
        eyeAnim.play();
      }
    }

    frame 3 {
      gotoAndPlay(2);
    }
  }

  movieClip 40  {

    frame 1 {
      stop();
    }
  }

  movieClip 41 bouche {

    frame 1 {
      this.compt = 1;
      this.nmax = 0;
      this.playAnim = false;
      this.loopCpt = 0;
      _parent.bouche = this;
    }

    frame 2 {
      this.nmin = 20;
      this.compt = random(10) + this.nmin;
      if (this.compt == nmin + 1 && this.playAnim == true) {
        if (this.loopCpt == 0) {
          this.loopCpt = random(30) + 30;
        } else {
          --this.loopCpt;
          if (this.loopCpt == 0) {
            this.playAnim = false;
          }
        }
        boucheAnim.play();
      }
    }

    frame 3 {
      gotoAndPlay(2);
    }
  }

  movieClip 44  {
  }

  movieClip 45  {
  }

  movieClip 46  {
  }

  movieClip 48  {
  }

  movieClip 50  {
  }

  movieClip 51  {

    frame 1 {
      compt = 1;
      var nmax = 0;
    }

    frame 2 {
      nmin = 120;
      compt = random(50) + nmin;
      if (compt == nmin + 1) {
        eyeAnim.play();
      }
    }

    frame 3 {
      gotoAndPlay(2);
    }
  }

  movieClip 63  {
  }

  movieClip 64 secretaire {

    frame 45 {
      this.nextAnim();
    }

    frame 90 {
      gotoAndPlay(2);
    }

    frame 140 {
      this.nextAnim();
    }

    frame 175 {
      this.nextAnim();
    }

    frame 220 {
      this.nextAnim();
    }

    frame 260 {
      this.nextAnim();
    }
  }

  movieClip 66  {
  }

  movieClip 68  {
  }

  movieClip 70  {
  }

  movieClip 72  {
  }

  movieClip 74  {
  }

  movieClip 76  {
  }

  movieClip 78  {
  }

  movieClip 106  {

    frame 1 {
      stop();
    }
  }

  movieClip 107  {

    frame 1 {
      this.compt = 1;
      this.nmax = 0;
      this.playAnim = false;
      this.loopCpt = 0;
    }

    frame 2 {
      this.nmin = 20;
      this.compt = random(10) + this.nmin;
      if (this.compt == nmin + 1 && this.playAnim == true) {
        if (this.loopCpt == 0) {
          this.loopCpt = random(30) + 30;
        } else {
          --this.loopCpt;
          if (this.loopCpt == 0) {
            this.playAnim = false;
          }
        }
        boucheAnim.play();
      }
    }

    frame 3 {
      gotoAndPlay(2);
    }
  }

  movieClip 109  {
  }

  movieClip 110 boss {

    frame 45 {
      this.nextAnim();
    }

    frame 94 {
      this.nextAnim();
    }

    frame 150 {
      this.nextAnim();
    }

    frame 193 {
      this.nextAnim();
    }

    frame 246 {
      this.nextAnim();
    }

    frame 280 {
      this.nextAnim();
    }
  }

  movieClip 111 screen {
  }

  movieClip 115  {
  }

  movieClip 116  {
  }

  movieClip 117  {

    frame 1 {
      this._x = -150;
    }

    frame 2 {
      this._x -= 1.3;
      if (this._x < -300) {
        this._x = -150;
      }
    }

    frame 3 {
      gotoAndPlay(2);
    }
  }

  movieClip 119  {
  }

  movieClip 120 earth {
  }

  movieClip 122 docHand {
  }

  movieClip 124 docArm {
  }

  movieClip 127 fakeArms {
  }

  movieClip 129  {
  }

  movieClip 131  {
  }

  movieClip 132 yeux_anim {

    frame 1 {
      stop();
    }
  }

  movieClip 134  {
  }

  movieClip 136  {
  }

  movieClip 138  {
  }

  movieClip 141  {
  }

  movieClip 166  {

    frame 1 {
      stop();
    }
  }

  movieClip 167  {

    frame 1 {
      compt = 1;
      var nmax = 0;
    }

    frame 2 {
      nmin = 80;
      compt = random(50) + nmin;
      if (compt == nmin + 1) {
        crane.play();
      }
    }

    frame 3 {
      gotoAndPlay(2);
    }
  }

  movieClip 168  {

    frame 1 {
      compt = 1;
      var nmax = 0;
    }

    frame 2 {
      nmin = 120;
      compt = random(50) + nmin;
      if (compt == nmin + 1) {
        yeux_anim.play();
      }
    }

    frame 3 {
      gotoAndPlay(2);
    }
  }

  movieClip 170  {
  }

  movieClip 171  {

    frame 1 {
      stop();
    }
  }

  movieClip 172  {

    frame 1 {
      this.compt = 1;
      this.nmax = 0;
      this.playAnim = false;
      this.loopCpt = 0;
    }

    frame 2 {
      this.nmin = 20;
      this.compt = random(10) + this.nmin;
      if (this.compt == nmin + 1 && this.playAnim == true) {
        if (this.loopCpt == 0) {
          this.loopCpt = random(30) + 30;
        } else {
          --this.loopCpt;
          if (this.loopCpt == 0) {
            this.playAnim = false;
          }
        }
        boucheAnim.play();
      }
    }

    frame 3 {
      gotoAndPlay(2);
    }
  }

  movieClip 173  {
  }

  movieClip 175  {
  }

  movieClip 177  {

    frame 1 {
      function init() {
        heightB = 80;
        widthB = 60;
        bitmap = new flash.display.BitmapData(widthB, heightB, true, 0);
        bitmapCont = this.createEmptyMovieClip('containerM', 20);
        bitmapCont._x = -(widthB / 2 + 2);
        bitmapCont._y = -(heightB / 2);
        bitmapCont.attachBitmap(bitmap, 20);
        decal = 0;
        angles = new Array();
        angles2 = new Array();
        pointX = new Array();
        pointY = new Array();
        theMc = this.createEmptyMovieClip('bras_mc', 2);
        theMc2 = this.createEmptyMovieClip('bras_mc2', 3);
        theMc.lineStyle(lineW, 5329233, 100);
        theMc.moveTo(0, 0);
        angles[0] = 0;
        pointX[0] = 0;
        pointY[0] = 0;
        var v2 = 1;
        while (v2 <= nbP) {
          angles[v2] = angles[v2 - 1] + (Math.random() * 2 - 1);
          pointX[v2] = getX(angles[v2]) + pointX[v2 - 1];
          pointY[v2] = getY(angles[v2]) + pointY[v2 - 1];
          ++v2;
        }
      }

      function main() {
        decal = (decal + 33) % 628;
        var v4 = decal;
        var v1 = 1;
        while (v1 <= nbP) {
          v4 += 55;
          var v3 = (Math.random() * 2 - 1) * 0.14;
          var v2 = v1;
          while (v2 <= nbP) {
            angles[v2] += v3 * (1 - 0.01 * v2);
            ++v2;
          }
          angles[v1] *= 0.98;
          angles2[v1] = angles[v1] + Math.cos(v4 * 0.01) * 0.9;
          pointX[v1] = getX(angles2[v1]) + pointX[v1 - 1];
          pointY[v1] = getY(angles2[v1]) + pointY[v1 - 1];
          ++v1;
        }
        drawBitmap();
      }

      function drawBitmap() {
        var v4 = this.attachMovie('docArm', 'docArm', 3);
        var v5 = this.attachMovie('docHand', 'docHand', 4);
        bitmap.fillRect(new flash.geom.Rectangle(0, 0, bitmap.width, bitmap.height), 0);
        bitmap = new flash.display.BitmapData(widthB, heightB, true, 0);
        bitmapCont = this.createEmptyMovieClip('containerM', 20);
        bitmapCont._x = -(widthB / 2 + 2);
        bitmapCont._y = -(heightB / 2);
        bitmapCont.attachBitmap(bitmap, 20);
        m.translate(tX, tY);
        var v2 = 1;
        while (v2 <= nbP) {
          m = new flash.geom.Matrix();
          var v3 = angles2[v2] / 0.0174;
          var tX = pointX[v2] + widthB / 2;
          var tY = pointY[v2] + heightB / 2;
          v3 = Math.atan2(pointY[v2] - pointY[v2 - 1], pointX[v2] - pointX[v2 - 1]);
          m.rotate(v3);
          m.translate(tX, tY);
          bitmap.draw(v4, m);
          ++v2;
        }
        m = new flash.geom.Matrix();
        var tX = pointX[nbP] + widthB / 2;
        var tY = pointY[nbP] + heightB / 2;
        v3 = Math.atan2(pointY[nbP] - pointY[nbP - 1], pointX[nbP] - pointX[nbP - 1]);
        m.rotate(v3);
        m.translate(tX, tY);
        bitmap.draw(v5, m);
        v5.removeMovieClip();
        v4.removeMovieClip();
      }

      function drawLine() {
        theMc.clear();
        theMc2.clear();
        theMc.lineStyle(lineW, 5329233, 100);
        theMc.moveTo(0, 0);
        theMc2.lineStyle(lineW / 2, 12569549, 100);
        theMc2.moveTo(0, 0);
        var v1 = 1;
        while (v1 <= nbP) {
          theMc.lineTo(pointX[v1], pointY[v1]);
          theMc2.lineTo(pointX[v1], pointY[v1]);
          ++v1;
        }
      }

      function getX(angle) {
        var v1 = Math.cos(angle) * lenghtP;
        return v1;
      }

      function getY(angle) {
        var v1 = Math.sin(angle) * lenghtP;
        return v1;
      }

      var theMc;
      var theMc2;
      var radTab;
      var lineW = 8;
      var lenghtP = 3;
      var nbP = 7;
      var angles;
      var angles2;
      var pointX;
      var pointY;
      var decal;
      var bitmap;
      var m;
      var heightB;
      var widthB;
      init();
    }

    frame 2 {
      main();
    }

    frame 3 {
      gotoAndPlay(2);
    }
  }

  movieClip 246  {

    frame 52 {
      stop();
    }
  }

  movieClip 247  {
  }

  movieClip 248  {
  }

  movieClip 249 doc {

    frame 40 {
      this.nextAnim();
    }

    frame 80 {
      this.nextAnim();
    }

    frame 132 {
      this.nextAnim();
    }

    frame 180 {
      this.nextAnim();
    }

    frame 285 {
      this.nextAnim();
    }

    frame 306 {
      this.nextAnim();
    }
  }

  frame 1 {
    @estr = function () {
      return flash.Boot.__string_rec(this, 'xx');
    };

    Hash = function () {
      this.h = new _global.Object();
    };

    Hash.__name__ = ['Hash'];
    var v1 = Hash.prototype;
    v1.__class__ = Hash;
    v1.exists = function (arg0) {
      return this.h.hasOwnProperty('$' + arg0);
    };

    v1.get = function (arg0) {
      return this.h['$' + arg0];
    };

    v1.h = null;
    v1.iterator = function () {
      var v2 = new Array();
      // Loop counter not found
for ($somevar in this.h) {
        v2.push(enumerate this.h);
      }
      return {'ref': this.h, 'it': v2.iterator(), 'hasNext': function () {
        return this.it.hasNext();
      }, 'next': function () {
        var v2 = this.it.next();
        return this.ref[v2];
      }};
    };

    v1.keys = function () {
      var v2 = new Array();
      // Loop counter not found
for ($somevar in this.h) {
        v2.push((enumerate this.h).substr(1));
      }
      return v2.iterator();
    };

    v1.remove = function (arg0) {
      arg0 = '$' + arg0;
      if (!this.h.hasOwnProperty(arg0)) {
        return false;
      }
      delete this.h[arg0];
      return true;
    };

    v1.set = function (arg0, arg1) {
      this.h['$' + arg0] = arg1;
    };

    v1.toString = function () {
      var v2 = new StringBuf();
      v2.b += '{';
      var v3 = this.keys();
      var v4 = v3;
      while (v4.hasNext()) {
        var v5 = v4.next();
        v2.b += v5;
        v2.b += ' => ';
        v2.b += Std.string(this.get(v5));
        if (v3.hasNext()) {
          v2.b += ', ';
        }
      }
      v2.b += '}';
      return v2.b;
    };

    IntHash = function () {
      this.h = new _global.Object();
    };

    IntHash.__name__ = ['IntHash'];
    v1 = IntHash.prototype;
    v1.__class__ = IntHash;
    v1.exists = function (arg0) {
      return this.h.hasOwnProperty(arg0);
    };

    v1.get = function (arg0) {
      return this.h[arg0];
    };

    v1.h = null;
    v1.iterator = function () {
      return {'ref': this.h, 'it': this.keys(), 'hasNext': function () {
        return this.it.hasNext();
      }, 'next': function () {
        var v2 = this.it.next();
        return this.ref[v2];
      }};
    };

    v1.keys = function () {
      var v3 = new Array();
      // Loop counter not found
for ($somevar in this.h) {
        v3.push(enumerate this.h);
      }
      var v2 = v3;
      v3 = 0;
      var v4 = v2.length;
      while (v3 < v4) {
        ++v3;
        var v5 = v3;
        v2[v5] = Std.int(v2[v5]);
      }
      return v2.iterator();
    };

    v1.remove = function (arg0) {
      if (!this.h.hasOwnProperty(arg0)) {
        return false;
      }
      delete this.h[arg0];
      return true;
    };

    v1.set = function (arg0, arg1) {
      this.h[arg0] = arg1;
    };

    v1.toString = function () {
      var v2 = new StringBuf();
      v2.b += '{';
      var v3 = this.keys();
      var v4 = v3;
      while (v4.hasNext()) {
        var v5 = v4.next();
        v2.b += v5;
        v2.b += ' => ';
        v2.b += Std.string(this.get(v5));
        if (v3.hasNext()) {
          v2.b += ', ';
        }
      }
      v2.b += '}';
      return v2.b;
    };

    IntIter = function (arg0, arg1) {
      this.min = arg0;
      this.max = arg1;
    };

    IntIter.__name__ = ['IntIter'];
    v1 = IntIter.prototype;
    v1.__class__ = IntIter;
    v1.hasNext = function () {
      return this.min < this.max;
    };

    v1.max = null;
    v1.min = null;
    v1.next = function () {
      ++this.min;
      return this.min;
    };

    List = function () {
      this.length = 0;
    };

    List.__name__ = ['List'];
    v1 = List.prototype;
    v1.__class__ = List;
    v1.add = function (arg0) {
      var v3 = [arg0];
      if (this.h != null) {
        this.q[1] = v3;
      } else {
        this.h = v3;
      }
      this.q = v3;
      ++this.length;
    };

    v1.clear = function () {
      this.h = null;
      this.q = null;
      this.length = 0;
    };

    v1.filter = function (arg0) {
      var v3 = new List();
      var v4 = this.h;
      while (v4 != null) {
        var v5 = v4[0];
        v4 = v4[1];
        if (arg0(v5)) {
          v3.add(v5);
        }
      }
      return v3;
    };

    v1.first = function () {
      return (this.h == null) ? null : this.h[0];
    };

    v1.h = null;
    v1.isEmpty = function () {
      return this.h == null;
    };

    v1.iterator = function () {
      return {'h': this.h, 'hasNext': function () {
        return this.h != null;
      }, 'next': function () {
        if (this.h == null) {
          return null;
        }
        var v2 = this.h[0];
        this.h = this.h[1];
        return v2;
      }};
    };

    v1.join = function (arg0) {
      var v3 = new StringBuf();
      var v4 = true;
      var v5 = this.h;
      while (v5 != null) {
        if (!v4) {
          v3.b += arg0;
        } else {
          v4 = false;
        }
        v3.b += v5[0];
        v5 = v5[1];
      }
      return v3.b;
    };

    v1.last = function () {
      return (this.q == null) ? null : this.q[0];
    };

    v1.length = null;
    v1.map = function (arg0) {
      var v3 = new List();
      var v4 = this.h;
      while (v4 != null) {
        var v5 = v4[0];
        v4 = v4[1];
        v3.add(arg0(v5));
      }
      return v3;
    };

    v1.pop = function () {
      if (this.h == null) {
        return null;
      }
      var v2 = this.h[0];
      this.h = this.h[1];
      if (this.h == null) {
        this.q = null;
      }
      --this.length;
      return v2;
    };

    v1.push = function (arg0) {
      var v3 = [arg0, this.h];
      this.h = v3;
      if (this.q == null) {
        this.q = v3;
      }
      ++this.length;
    };

    v1.q = null;
    v1.remove = function (arg0) {
      var v3 = null;
      var v4 = this.h;
      while (v4 != null) {
        if (v4[0] == arg0) {
          if (v3 != null) {
            v3[1] = v4[1];
          } else {
            this.h = v4[1];
          }
          if (this.q == v4) {
            this.q = v3;
          }
          --this.length;
          return true;
        }
        v3 = v4;
        v4 = v4[1];
      }
      return false;
    };

    v1.toString = function () {
      var v2 = new StringBuf();
      var v3 = true;
      var v4 = this.h;
      v2.b += '{';
      while (v4 != null) {
        if (!v3) {
          v2.b += ', ';
        } else {
          v3 = false;
        }
        v2.b += Std.string(v4[0]);
        v4 = v4[1];
      }
      v2.b += '}';
      return v2.b;
    };

    Pod = function () {
      if (haxe.Firebug.detect()) {
        haxe.Firebug.redirectTraces();
      }
      Pod.inst = this;
      this.init();
      flash.Lib._root.onEnterFrame = @closure('mainLoop', this);
    };

    Pod.__name__ = ['Pod'];
    v1 = Pod.prototype;
    v1.__class__ = Pod;
    v1.__class__.inst = null;
    v1.__class__.main = function () {
      flash.system.Security.allowDomain('dev.croquemonster.com');
      flash.system.Security.allowDomain('devdata.croquemonster.com');
      flash.system.Security.allowDomain('www.croquemonster.com');
      flash.system.Security.allowDomain('data.croquemonster.com');
      var v2 = new haxe.remoting.Context();
      v2.addObject('Pod', Pod);
      var v3 = haxe.remoting.ExternalConnection.jsConnect('cx_js_fl', v2);
      var v4 = new Pod();
    };

    v1.__class__.update = function (arg0, arg1, arg2) {
      Pod.inst.nextType = arg0;
      if (arg2 != true) {
        Pod.inst.emotion = arg1;
      } else {
        Pod.inst.emotion = '' + arg1 + 'talk';
      }
    };

    v1.__class__.updateType = function (arg0, arg1) {
      Pod.inst.nextType = arg0;
    };

    v1.__class__.updateEmo = function (arg0, arg1) {
      if (arg1 != true) {
        Pod.inst.emotion = arg0;
        Pod.inst.playEmo();
      } else {
        Pod.inst.emotion = '' + arg0 + 'talk';
      }
    };

    v1.addAnim = function () {
      var v2 = 0;
      while (v2 < 3) {
        ++v2;
        var v3 = v2;
        var v4 = new Array();
        v4[0] = 'stand' + (Std.random(3) + 1);
        v4[1] = '' + (Std.random(6) + 1);
        this.sequence.push(v4);
      }
    };

    v1.anim = null;
    v1.bitmap = null;
    v1.countD = null;
    v1.currentAnim = null;
    v1.depth = null;
    v1.emotion = null;
    v1.init = function () {
      this.willTalk = false;
      this.countD = 0;
      this.sequence = new List();
      this.depth = flash.Lib._root.getNextHighestDepth();
      if (flash.Lib._root.perso == null) {
        this.type = 0;
      } else {
        this.type = flash.Lib._root.perso;
      }
      if (flash.Lib._root.emotion == null) {
        this.emotion = '';
        this.nextEmotion = '';
      } else {
        this.emotion = flash.Lib._root.emotion;
        this.nextEmotion = this.emotion;
      }
      if (flash.Lib._root.anim == null) {
        this.anim = true;
      } else {
        if (flash.Lib._root.anim != 'true') {
          this.anim = false;
        } else {
          this.anim = true;
        }
      }
      this.nextType = this.type;
      this.loadMc(this.type);
    };

    v1.initAnim = function () {
      this.currentAnim = 'introducing';
      this.nbAnim = 1;
      this.pod.gotoAndPlay(this.currentAnim);
    };

    v1.loadMc = function (arg0) {
      if (this.anim) {
        var v3 = arg0;
        if (v3 != 1) {
        } else {
          if (v3 != 2) {
              this.pod = flash.Lib._root.attachMovie('earth', 'earth', this.depth);
              this.pod._x = 38;
              this.pod._y = 70;
          } else {
              this.pod = flash.Lib._root.attachMovie('boss', 'boss', this.depth);
            if (v3 != 3) {
              this.pod = flash.Lib._root.attachMovie('secretaire', 'secretaire', this.depth);
              this.pod._x = 3;
              this.pod._y = 40;
            } else {
              this.pod = flash.Lib._root.attachMovie('doc', 'doc', this.depth);
              this.pod._x = 7;
              this.pod._y = 4;
            }
          }
        }
        this.pod._quality = 'BEST';
        this.pod._visible = true;
        v3 = new flash.filters.GlowFilter();
        v3.color = 9944666;
        v3.blurX = 3;
        v3.blurY = 3;
        v3.strength = 3;
        this.pod.filters = [v3];
        if (this.type != 0) {
          this.pod.nextAnim = function (f) {
            return function () {
              return f();
            };
          }(@closure('nextAnim', this));
          this.initAnim();
        }
      } else {
        var v4 = new flash.geom.Matrix();
        this.bitmap = new flash.display.BitmapData(80, 120, true, 0);
        var v3 = flash.Lib._root.createEmptyMovieClip('containerM', 20);
        if (this.pod.rarm._visible) {
          this.pod.rarm._visible = false;
        }
        var v5 = arg0;
        if (v5 != 1) {
        } else {
          if (v5 != 2) {
              this.pod = flash.Lib._root.attachMovie('earth', 'earth', this.depth);
              this.pod.gotoAndStop(1);
              this.pod._x = 38;
              this.pod._y = 70;
              v4.scale(0.9, 0.9);
              v4.translate(35, 40);
              v3._x = 10;
              v3._y = 10;
          } else {
              this.pod = flash.Lib._root.attachMovie('boss', 'boss', this.depth);
              this.pod.gotoAndStop(1);
            if (v5 != 3) {
              this.pod = flash.Lib._root.attachMovie('secretaire', 'secretaire', this.depth);
              this.pod.gotoAndStop(1);
              v3._x = 3;
              v3._y = 40;
            } else {
              this.pod = flash.Lib._root.attachMovie('doc', 'doc', this.depth);
              this.pod.gotoAndStop(1);
              this.pod.lArm.removeMovieClip;
              this.pod.rarm = flash.Lib._root.attachMovie('fakeArms', 'fakeArms', this.depth + 8);
              this.pod.rarm._x = 42;
              this.pod.rarm._y = 91;
              v4.translate(0, 4);
              v3._x = 7;
              v3._y = 4;
            }
          }
        }
        this.bitmap.draw(this.pod, v4);
        v3.attachBitmap(this.bitmap, 20);
        this.pod._visible = false;
        v5 = new flash.filters.GlowFilter();
        v5.color = 9944666;
        v5.blurX = 3;
        v5.blurY = 3;
        v5.strength = 3;
        var v6 = new flash.geom.Point(0, 0);
        var v7 = this.bitmap.applyFilter(this.bitmap, this.bitmap.rectangle, v6, v5);
      }
    };

    v1.mainLoop = function () {
      if (this.nextType != this.type) {
        this.type = this.nextType;
        this.loadMc(this.type);
      }
      if (this.emotion != '') {
        Pod.inst.playEmo();
      }
      if (this.willTalk == true) {
        if (this.countD <= 50) {
          ++this.countD;
        } else {
          this.emotion = 'talk';
          this.countD = 0;
          this.willTalk = false;
        }
      }
    };

    v1.nbAnim = null;
    v1.nextAnim = function () {
      --this.nbAnim;
      if (this.nbAnim == 0) {
        if (this.sequence.length == 0) {
          this.addAnim();
        }
        var v2 = new Array();
        v2 = this.sequence.pop();
        this.currentAnim = v2[0];
        this.nbAnim = Std.parseInt(v2[1]);
      }
      this.pod.gotoAndPlay(this.currentAnim);
      this.pod.nextAnim = function (f) {
        return function () {
          return f();
        };
      }(@closure('nextAnim', this));
    };

    v1.nextEmotion = null;
    v1.nextType = null;
    v1.playEmo = function () {
      var v2 = this.emotion;
      if (v2 != 'talk') {
      } else {
        if (v2 != 'happy') {
        } else {
          if (v2 != 'happytalk') {
          } else {
                  this.emotion = 'stand';
            if (v2 != 'angry') {
                  if (Pod.inst.type == 1) {
                    Pod.inst.pod.bouche.playAnim = true;
                  }
                  if (Pod.inst.type == 2) {
                    Pod.inst.pod.bouche.playAnim = true;
                  }
                  if (Pod.inst.type == 3) {
                    Pod.inst.pod.head.bouche.playAnim = true;
                  }
            } else {
                  this.currentAnim = 'happy';
                  this.nbAnim = Std.random(6) + 5;
              if (v2 != 'angrytalk') {
                  this.currentAnim = 'happy';
                  this.nbAnim = Std.random(6) + 5;
                  this.willTalk = true;
              } else {
                  this.currentAnim = 'angry';
                  if (Pod.inst.type == 1) {
                    this.nbAnim = Std.random(6) + 8;
                  }
                  if (Pod.inst.type == 2) {
                    this.nbAnim = Std.random(6) + 8;
                  }
                  if (Pod.inst.type == 3) {
                    this.nbAnim = 2;
                  }
                if (v2 != 'standtalk') {
                  this.currentAnim = 'angry';
                  if (Pod.inst.type == 1) {
                    this.nbAnim = Std.random(6) + 8;
                  }
                  if (Pod.inst.type == 2) {
                    this.nbAnim = Std.random(6) + 8;
                  }
                  if (Pod.inst.type == 3) {
                    this.nbAnim = 2;
                  }
                } else {
                  this.currentAnim = 'stand';
                  this.emotion = 'stand';
                  this.nbAnim = Std.random(6) + 5;
                  this.willTalk = true;
                }
              }
            }
          }
        }
      }
      this.emotion = '';
    };

    v1.pod = null;
    v1.sequence = null;
    v1.type = null;
    v1.willTalk = null;
    Reflect = function () {};

    Reflect.__name__ = ['Reflect'];
    v1 = Reflect.prototype;
    v1.__class__ = Reflect;
    v1.__class__.hasField = function (arg0, arg1) {
      return this.hasOwnProperty.call(arg0, arg1);
    };

    v1.__class__.field = function (arg0, arg1) {
      return arg0[arg1];
    };

    v1.__class__.setField = function (arg0, arg1, arg2) {
      arg0[arg1] = arg2;
    };

    v1.__class__.getProperty = function (arg0, arg1) {
      return arg0[arg1];
    };

    v1.__class__.setProperty = function (arg0, arg1, arg2) {
      arg0[arg1] = arg2;
    };

    v1.__class__.callMethod = function (arg0, arg1, arg2) {
      return arg1.apply(arg0, arg2);
    };

    v1.__class__.fields = function (arg0) {
      if (arg0 == null) {
        return new Array();
      }
      var v4 = new Array();
      // Loop counter not found
for ($somevar in arg0) {
        v4.push(enumerate arg0);
      }
      var v3 = v4;
      v4 = 0;
      while (v4 < v3.length) {
        if (v3.hasOwnProperty.call(arg0, v3[v4])) {
          ++v4;
        } else {
          v3.splice(v4, 1);
        }
      }
      return v3;
    };

    v1.__class__.isFunction = function (arg0) {
      return typeof arg0 == 'function' && arg0.__name__ == null;
    };

    v1.__class__.compare = function (arg0, arg1) {
      return (arg0 == arg1) ? 0 : (arg0 > arg1 ? 1 : -1);
    };

    v1.__class__.compareMethods = function (arg0, arg1) {
      return arg0 == arg1 || arg0.f == arg1.f && arg0.o == arg1.o && arg0.f != null;
    };

    v1.__class__.isObject = function (arg0) {
      var v3 = typeof arg0;
      return v3 == 'string' || v3 == 'object' && !arg0.__enum__ || v3 == 'function' && arg0.__name__ != null;
    };

    v1.__class__.deleteField = function (arg0, arg1) {
      if (this.hasOwnProperty.call(arg0, arg1) != true) {
        return false;
      }
      delete arg0[arg1];
      return true;
    };

    v1.__class__.copy = function (arg0) {
      var v3 = {};
      var v4 = 0;
      var v5 = Reflect.fields(arg0);
      while (v4 < v5.length) {
        var v6 = v5[v4];
        ++v4;
        v3[v6] = arg0[v6];
      }
      return v3;
    };

    v1.__class__.makeVarArgs = function (f) {
      return function () {
        return f(arguments);
      };
    };

    Std = function () {};

    Std.__name__ = ['Std'];
    v1 = Std.prototype;
    v1.__class__ = Std;
    v1.__class__.is = function (arg0, arg1) {
      return flash.Boot.__instanceof(arg0, arg1);
    };

    v1.__class__.string = function (arg0) {
      return flash.Boot.__string_rec(arg0, '');
    };

    v1.__class__.int = function (arg0) {
      if (arg0 < 0) {
        return Math.ceil(arg0);
      }
      return Math.floor(arg0);
    };

    v1.__class__.parseInt = function (arg0) {
      if (arg0.charCodeAt(1) != 120) {
        var v3 = _global.parseInt(arg0, 10);
      } else {
        var v3 = _global.parseInt(arg0);
      }
      if (_global.isNaN(v3)) {
        return null;
      }
      return v3;
    };

    v1.__class__.parseFloat = function (arg0) {
      return _global.parseFloat(arg0);
    };

    v1.__class__.random = function (arg0) {
      return random(arg0);
    };

    StringBuf = function () {
      this.b = '';
    };

    StringBuf.__name__ = ['StringBuf'];
    v1 = StringBuf.prototype;
    v1.__class__ = StringBuf;
    v1.add = function (arg0) {
      this.b += arg0;
    };

    v1.addChar = function (arg0) {
      this.b += String.fromCharCode(arg0);
    };

    v1.addSub = function (arg0, arg1, arg2) {
      this.b += arg0.substr(arg1, arg2);
    };

    v1.b = null;
    v1.toString = function () {
      return this.b;
    };

    StringTools = function () {};

    StringTools.__name__ = ['StringTools'];
    v1 = StringTools.prototype;
    v1.__class__ = StringTools;
    v1.__class__.urlEncode = function (arg0) {
      return _global.escape(arg0);
    };

    v1.__class__.urlDecode = function (arg0) {
      return _global.unescape(arg0);
    };

    v1.__class__.htmlEscape = function (arg0) {
      return (((((arg0.split('&')).join('&amp;')).split('<')).join('&lt;')).split('>')).join('&gt;');
    };

    v1.__class__.htmlUnescape = function (arg0) {
      return (((((arg0.split('&gt;')).join('>')).split('&lt;')).join('<')).split('&amp;')).join('&');
    };

    v1.__class__.startsWith = function (arg0, arg1) {
      return arg0.length >= arg1.length && arg0.substr(0, arg1.length) == arg1;
    };

    v1.__class__.endsWith = function (arg0, arg1) {
      var v4 = arg1.length;
      var v5 = arg0.length;
      return v5 >= v4 && arg0.substr(v5 - v4, v4) == arg1;
    };

    v1.__class__.isSpace = function (arg0, arg1) {
      var v4 = arg0.charCodeAt(arg1);
      return v4 >= 9 && v4 <= 13 || v4 == 32;
    };

    v1.__class__.ltrim = function (arg0) {
      var v3 = arg0.length;
      var v4 = 0;
      for (;;) {
        if (!(v4 < v3 && StringTools.isSpace(arg0, v4))) break;
        ++v4;
      }
      if (v4 <= 0) {
        return arg0;
      } else {
        return arg0.substr(v4, v3 - v4);
      }
    };

    v1.__class__.rtrim = function (arg0) {
      var v3 = arg0.length;
      var v4 = 0;
      for (;;) {
        if (!(v4 < v3 && StringTools.isSpace(arg0, v3 - v4 - 1))) break;
        ++v4;
      }
      if (v4 <= 0) {
        return arg0;
      } else {
        return arg0.substr(0, v3 - v4);
      }
    };

    v1.__class__.trim = function (arg0) {
      return StringTools.ltrim(StringTools.rtrim(arg0));
    };

    v1.__class__.rpad = function (arg0, arg1, arg2) {
      var v5 = arg0.length;
      var v6 = arg1.length;
      while (v5 < arg2) {
        if (arg2 - v5 >= v6) {
          arg0 += arg1;
          v5 += v6;
        } else {
          arg0 += arg1.substr(0, arg2 - v5);
          v5 = arg2;
        }
      }
      return arg0;
    };

    v1.__class__.lpad = function (arg0, arg1, arg2) {
      var v5 = '';
      var v6 = arg0.length;
      if (v6 >= arg2) {
        return arg0;
      }
      var v7 = arg1.length;
      while (v6 < arg2) {
        if (arg2 - v6 >= v7) {
          v5 += arg1;
          v6 += v7;
        } else {
          v5 += arg1.substr(0, arg2 - v6);
          v6 = arg2;
        }
      }
      return v5 + arg0;
    };

    v1.__class__.replace = function (arg0, arg1, arg2) {
      return (arg0.split(arg1)).join(arg2);
    };

    v1.__class__.hex = function (arg0, arg1) {
      var v4 = '';
      var v5 = '0123456789ABCDEF';
      do {
        v4 = v5.charAt(arg0 & 15) + v4;
        arg0 >>>= 4;
      } while (arg0 > 0);
      if (arg1 != null) {
        while (v4.length < arg1) {
          v4 = '0' + v4;
        }
      }
      return v4;
    };

    v1.__class__.fastCodeAt = function (arg0, arg1) {
      return arg0.cca(arg1);
    };

    v1.__class__.isEOF = function (arg0) {
      return arg0 <= 0;
    };

    ValueType = new Object();
    ValueType.__ename__ = ['ValueType'];
    ValueType.__constructs__ = ['TNull', 'TInt', 'TFloat', 'TBool', 'TObject', 'TFunction', 'TClass', 'TEnum', 'TUnknown'];
    ['TBool', 3].__enum__ = ValueType;
    ['TBool', 3].toString = @estr;
    ValueType.TBool = ['TBool', 3];
    ['TBool', 3].__enum__.TClass = function (arg0) {
      ['TClass', 6, arg0].__enum__ = this;
      ['TClass', 6, arg0].toString = @estr;
      return ['TClass', 6, arg0];
    };

    ['TBool', 3].__enum__.TEnum = function (arg0) {
      ['TEnum', 7, arg0].__enum__ = this;
      ['TEnum', 7, arg0].toString = @estr;
      return ['TEnum', 7, arg0];
    };

    ['TFloat', 2].__enum__ = ['TBool', 3].__enum__;
    ['TFloat', 2].toString = @estr;
    ['TBool', 3].__enum__.TFloat = ['TFloat', 2];
    ['TFunction', 5].__enum__ = ['TBool', 3].__enum__;
    ['TFunction', 5].toString = @estr;
    ['TBool', 3].__enum__.TFunction = ['TFunction', 5];
    ['TInt', 1].__enum__ = ['TBool', 3].__enum__;
    ['TInt', 1].toString = @estr;
    ['TBool', 3].__enum__.TInt = ['TInt', 1];
    ['TNull', 0].__enum__ = ['TBool', 3].__enum__;
    ['TNull', 0].toString = @estr;
    ['TBool', 3].__enum__.TNull = ['TNull', 0];
    ['TObject', 4].__enum__ = ['TBool', 3].__enum__;
    ['TObject', 4].toString = @estr;
    ['TBool', 3].__enum__.TObject = ['TObject', 4];
    ['TUnknown', 8].__enum__ = ['TBool', 3].__enum__;
    ['TUnknown', 8].toString = @estr;
    ['TBool', 3].__enum__.TUnknown = ['TUnknown', 8];
    Type = function () {};

    Type.__name__ = ['Type'];
    v1 = Type.prototype;
    v1.__class__ = Type;
    v1.__class__.getClass = function (arg0) {
      if (arg0.__enum__ != null) {
        return null;
      }
      return arg0.__class__;
    };

    v1.__class__.getEnum = function (arg0) {
      return arg0.__enum__;
    };

    v1.__class__.getSuperClass = function (arg0) {
      return arg0.__super__;
    };

    v1.__class__.getClassName = function (arg0) {
      if (arg0 == null) {
        return null;
      }
      var v3 = arg0.__name__;
      return v3.join('.');
    };

    v1.__class__.getEnumName = function (arg0) {
      var v3 = arg0.__ename__;
      return v3.join('.');
    };

    v1.__class__.resolveClass = function (arg0) {
      var v3 = eval(arg0);
      if (v3 == null || v3.__name__ == null) {
        return null;
      }
      return v3;
    };

    v1.__class__.resolveEnum = function (arg0) {
      var v3 = eval(arg0);
      if (v3 == null || v3.__ename__ == null) {
        return null;
      }
      return v3;
    };

    v1.__class__.createInstance = function (arg0, arg1) {
      if (arg0 == Array) {
        return new Array();
      }
      var v4 = {'__constructor__': arg0, '__proto__': arg0.prototype};
      arg0.apply(v4, arg1);
      return v4;
    };

    v1.__class__.createEmptyInstance = function (arg0) {
      if (arg0 == Array) {
        return new Array();
      }
      var v3 = new _global.Object();
      v3.__proto__ = arg0.prototype;
      return v3;
    };

    v1.__class__.createEnum = function (arg0, arg1, arg2) {
      var v5 = arg0[arg1];
      if (v5 == null) {
        throw 'No such constructor ' + arg1;
      }
      if (Reflect.isFunction(v5)) {
        if (arg2 == null) {
          throw 'Constructor ' + arg1 + ' need parameters';
        }
        return v5.apply(arg0, arg2);
      }
      if (arg2 != null && arg2.length != 0) {
        throw 'Constructor ' + arg1 + ' does not need parameters';
      }
      return v5;
    };

    v1.__class__.createEnumIndex = function (arg0, arg1, arg2) {
      var v5 = arg0.__constructs__[arg1];
      if (v5 == null) {
        throw arg1 + ' is not a valid enum constructor index';
      }
      return Type.createEnum(arg0, v5, arg2);
    };

    v1.__class__.getInstanceFields = function (arg0) {
      var v3 = Reflect.fields(arg0.prototype);
      v3.remove('__class__');
      arg0 = arg0.__super__;
      while (arg0 != null) {
        var v4 = 0;
        var v5 = Reflect.fields(arg0.prototype);
        while (v4 < v5.length) {
          var v6 = v5[v4];
          ++v4;
          v3.remove(v6);
          v3.push(v6);
        }
        arg0 = arg0.__super__;
      }
      v3.remove('__class__');
      return v3;
    };

    v1.__class__.getClassFields = function (arg0) {
      var v3 = Reflect.fields(arg0);
      v3.remove('__name__');
      v3.remove('__interfaces__');
      v3.remove('__super__');
      return v3;
    };

    v1.__class__.getEnumConstructs = function (arg0) {
      var v3 = arg0.__constructs__;
      return v3.copy();
    };

    v1.__class__.typeof = function (arg0) {
      var v3 = typeof arg0;
      if (v3 != 'null') {
      } else {
        if (v3 != 'boolean') {
        } else {
          if (v3 != 'string') {
          } else {
            if (v3 != 'number') {
                    return ValueType.TUnknown;
            } else {
                    return ValueType.TNull;
              if (v3 != 'object') {
                    return ValueType.TBool;
              } else {
                    return ValueType.TClass(String);
                if (v3 != 'function') {
                    if (Math.ceil(arg0) == arg0 % 2147483648.0) {
                      return ValueType.TInt;
                    }
                    return ValueType.TFloat;
                } else {
                    var v4 = arg0.__enum__;
                    if (v4 != null) {
                      return ValueType.TEnum(v4);
                    }
                    var v5 = arg0.__class__;
                    if (v5 != null) {
                      return ValueType.TClass(v5);
                    }
                    return ValueType.TObject;
                  if (v3 != 'undefined') {
                    if (arg0.__name__ != null) {
                      return ValueType.TObject;
                    }
                    return ValueType.TFunction;
                  } else {
                    return ValueType.TNull;
                  }
                }
              }
            }
          }
        }
      }
    };

    v1.__class__.enumEq = function (arg0, arg1) {
      if (arg0 == arg1) {
        return true;
      }
      if (arg0[0] != arg1[0]) {
        return false;
      }
      var v4 = 2;
      var v5 = arg0.length;
      while (v4 < v5) {
        ++v4;
        var v6 = v4;
        if (!Type.enumEq(arg0[v6], arg1[v6])) {
          return false;
        }
      }
      v4 = arg0.__enum__;
      if (v4 != arg1.__enum__ || v4 == null) {
        return false;
      }
      return true;
    };

    v1.__class__.enumConstructor = function (arg0) {
      return arg0[0];
    };

    v1.__class__.enumParameters = function (arg0) {
      return arg0.slice(2);
    };

    v1.__class__.enumIndex = function (arg0) {
      return arg0[1];
    };

    v1.__class__.allEnums = function (arg0) {
      var v3 = [];
      var v4 = arg0.__constructs__;
      var v5 = 0;
      while (v5 < v4.length) {
        var v6 = v4[v5];
        ++v5;
        var v7 = arg0[v6];
        if (!Reflect.isFunction(v7)) {
          v3.push(v7);
        }
      }
      return v3;
    };

    v1 = new Object();
    flash = v1;
    var v2 = _global.flash;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    flash.Boot = function () {};

    flash.Boot.__name__ = ['flash', 'Boot'];
    v1 = flash.Boot.prototype;
    v1.__class__ = flash.Boot;
    flash.Boot.__string_rec = function (arg0, arg1) {
      if (arg1.length >= 20) {
        return '<...>';
      }
      var v4 = typeof arg0;
      if (v4 != 'movieclip') {
        if (v4 == 'function' && (arg0.__name__ != null || arg0.__ename__ != null)) {
          v4 = 'object';
        }
      } else {
        v4 = 'object';
      }
      var v5 = v4;
      if (v5 != 'object') {
      } else {
        if (v5 != 'function') {
            return String(arg0);
        } else {
            if (arg0 instanceof Array) {
              if (arg0.__enum__ != null) {
                if (arg0.length == 2) {
                  return arg0[0];
                }
                var v6 = arg0[0] + '(';
                arg1 += '    ';
                var v7 = 2;
                var v8 = arg0.length;
                while (v7 < v8) {
                  ++v7;
                  var v9 = v7;
                  if (v9 == 2) {
                    v6 += flash.Boot.__string_rec(arg0[v9], arg1);
                  } else {
                    v6 += ',' + flash.Boot.__string_rec(arg0[v9], arg1);
                  }
                }
                return v6 + ')';
              }
              v6 = arg0.length;
              v8 = '[';
              arg1 += '    ';
              v9 = 0;
              while (v9 < v6) {
                ++v9;
                var v10 = v9;
                v8 += (v10 > 0 ? ',' : '') + flash.Boot.__string_rec(arg0[v10], arg1);
              }
              v8 += ']';
              return v8;
            }
            v6 = arg0.toString();
            if ((typeof v6 == 'string' || v6 instanceof String) && v6 != '[object Object]' && v6 != '[type Function]') {
              return v6;
            }
            v8 = '{\n';
            if (typeof(arg0) == 'movieclip') {
              v8 = 'MC(' + arg0._name + ') ' + v8;
            }
            arg1 += '    ';
            v10 = new Array();
            // Loop counter not found
for ($somevar in arg0) {
              v10.push(enumerate arg0);
            }
            v9 = v10;
            v10 = v9.iterator();
            while (v10.hasNext()) {
              var v11 = v10.next();
              if (v11 == 'prototype' || v11 == '__class__' || v11 == '__super__' || v11 == '__interfaces__') {
                continue;
              }
              if (v8.length != 2) {
                v8 += ',\n';
              }
              v8 += arg1 + v11 + ' : ' + flash.Boot.__string_rec(arg0[v11], arg1);
            }
            arg1 = arg1.substring(4);
            if (v8.length != 2) {
              v8 += '\n';
            }
            v8 += arg1 + '}';
            return v8;
          if (v5 != 'string') {
            return '<function>';
          } else {
            return arg0;
          }
        }
      }
    };

    flash.Boot.__closure = function (arg0, arg1) {
      var v4 = arg1[super];
      if (v4 == null) {
        return null;
      }
      var v5 = function () {
        super = arguments.callee;
        return super.f.apply(super.o, arguments);
      };

      v5.f = v4;
      v5.o = arg1;
      return v5;
    };

    flash.Boot.__instanceof = function (arg0, arg1) {
      if (!arg1) {
        return false;
      }
      if (arg0 instanceof arg1) {
        if (arg1 == Array) {
          return arg0.__enum__ == null;
        }
        return true;
      }
      var v4 = arg1;
      if (v4 != Int) {
      } else {
        if (v4 != Float) {
        } else {
          if (v4 != Bool) {
                return arg0.__enum__ == arg1 || arg1 == Class && arg0.__name__ != null || arg1 == Enum && arg0.__ename__ != null;
          } else {
                return typeof arg0 == 'number' && Math.ceil(arg0) === arg0 % 2147483648.0 && !(arg0 === true || arg0 === false);
            if (v4 != String) {
                return typeof arg0 == 'number';
            } else {
                return arg0 === true || arg0 === false;
              if (v4 != Dynamic) {
                return typeof arg0 == 'string';
              } else {
                return true;
              }
            }
          }
        }
      }
    };

    flash.Boot.getTrace = function () {
      var v2 = flash.Lib.current;
      var v3 = v2.__trace_txt;
      if (v3 == null) {
        var v4 = flash.Stage.width;
        var v5 = flash.Stage.height;
        if (v4 == 0) {
          v4 = 800;
        }
        if (v5 == 0) {
          v5 = 600;
        }
        v2.createTextField('__trace_txt', 1048500, 0, 0, v4, v5 + 30);
        v3 = v2.__trace_txt;
        var v6 = v3.getTextFormat();
        v6.font = '_sans';
        v3.setNewTextFormat(v6);
        v3.selectable = false;
        v3.textColor = flash.Boot.def_color;
        v2.__trace_lines = new Array();
      }
      return v3;
    };

    flash.Boot.__set_trace_color = function (arg0) {
      (flash.Boot.getTrace()).textColor = arg0;
      flash.Boot.def_color = arg0;
    };

    flash.Boot.__trace = function (arg0, arg1) {
      var v4 = flash.Lib.current;
      var v5 = flash.Boot.getTrace();
      var v6 = arg1.fileName + ((arg1.lineNumber == null) ? '' : ':' + arg1.lineNumber) + ': ' + flash.Boot.__string_rec(arg0, '');
      var v7 = v4.__trace_lines.concat(v6.split('\n'));
      v5.text = v7.join('\n');
      for (;;) {
        if (!(v7.length > 1 && v5.textHeight > flash.Stage.height)) break;
        v7.shift();
        v5.text = v7.join('\n');
      }
      v4.__trace_lines = v7;
    };

    flash.Boot.__exc = function (arg0) {
      var v3 = '';
      if (flash.Lib.onerror == null) {
        flash.Boot.__trace(flash.Boot.__string_rec(arg0, '') + v3, {'fileName': '(uncaught exception)'});
      } else {
        flash.Lib.onerror(flash.Boot.__string_rec(arg0, ''), []);
      }
    };

    flash.Boot.__clear_trace = function () {
      var v2 = flash.Lib.current;
      v2.__trace_txt.removeTextField();
      v2.__trace_lines = null;
    };

    flash.Boot.__init = function (arg0) {
      var v3 = _global;
      if (!v3.haxeInitDone) {
        v3.haxeInitDone = true;
        Array.prototype.copy = Array.prototype.slice;
        Array.prototype.insert = function (arg0, arg1) {
          this.splice(arg0, 0, arg1);
        };

        Array.prototype.remove = function (arg0) {
          var v3 = 0;
          var v4 = this.length;
          while (v3 < v4) {
            if (this[v3] == arg0) {
              this.splice(v3, 1);
              return true;
            }
            ++v3;
          }
          return false;
        };

        Array.prototype.iterator = function () {
          return {'cur': 0, 'arr': this, 'hasNext': function () {
            return this.cur < this.arr.length;
          }, 'next': function () {
            ++this.cur;
            return this.arr[this.cur];
          }};
        };

        _global.ASSetPropFlags(Array.prototype, null, 7);
        var v4 = String.prototype.charCodeAt;
        String.prototype.cca = v4;
        String.prototype.charCodeAt = function (arg0) {
          var v3 = this.cca(arg0);
          if (v3 <= 0) {
            return null;
          }
          return v3;
        };

        if (_global.flash == null) {
          _global.flash = {};
        }
      }
      arg0.flash.Lib._global = _global;
      arg0.flash.Lib._root = _root;
      arg0.flash.Lib.current = arg0;
      arg0.@instanceof = flash.Boot.__instanceof;
      arg0.@closure = flash.Boot.__closure;
      if (_global.Stage.align == '') {
        _global.Stage.align = 'LT';
      }
      mt.flash.Init.check();
    };

    flash.Lib = function () {};

    flash.Lib.__name__ = ['flash', 'Lib'];
    v1 = flash.Lib.prototype;
    v1.__class__ = flash.Lib;
    flash.Lib._global = null;
    flash.Lib._root = null;
    flash.Lib.current = null;
    flash.Lib.onerror = null;
    flash.Lib.trace = function (arg0) {
      trace(arg0);
    };

    flash.Lib.eval = function (arg0) {
      return eval(arg0);
    };

    flash.Lib.getURL = function (arg0, arg1) {
      getURL(arg0, (arg1 == null) ? '_self' : arg1);
    };

    flash.Lib.fscommand = function (arg0, arg1) {
      fscommand('' + arg0, (arg1 == null) ? '' : arg1);
    };

    flash.Lib.print = function (arg0, arg1) {
      arg1 = (arg1 == 'bframe' || arg1 == 'bmax') ? 'print:#' + arg1 : 'print:';
      getURL(arg1, arg0);
    };

    flash.Lib.getTimer = function () {
      return getTimer();
    };

    flash.Lib.getVersion = function () {
      return flash.Lib._root.$version;
    };

    flash.Lib.registerClass = function (arg0, arg1) {
      flash.Lib._global.Object.registerClass(arg0, arg1);
    };

    flash.Lib.keys = function (arg0) {
      var v3 = new Array();
      // Loop counter not found
for ($somevar in arg0) {
        v3.push(enumerate arg0);
      }
      return v3;
    };

    flash.Lib.setErrorHandler = function (arg0) {
      flash.Lib.onerror = arg0;
    };

    v1 = new Object();
    flash._MovieClip = v1;
    v2 = _global.flash._MovieClip;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.display = v1;
    v2 = _global.flash.display;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.external = v1;
    v2 = _global.flash.external;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.filters = v1;
    v2 = _global.flash.filters;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.geom = v1;
    v2 = _global.flash.geom;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.system = v1;
    v2 = _global.flash.system;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.text = v1;
    v2 = _global.flash.text;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    haxe = v1;
    v2 = _global.haxe;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    haxe.Firebug = function () {};

    haxe.Firebug.__name__ = ['haxe', 'Firebug'];
    v1 = haxe.Firebug.prototype;
    v1.__class__ = haxe.Firebug;
    haxe.Firebug.detect = function () {
      if (!flash.external.ExternalInterface.available) {
        return false;
      }
      return flash.external.ExternalInterface.call('console.error.toString') != null;
    };

    haxe.Firebug.redirectTraces = function () {
      haxe.Log.trace = @closure('trace', haxe.Firebug);
      flash.Lib.setErrorHandler(@closure('onError', haxe.Firebug));
    };

    haxe.Firebug.onError = function (arg0, arg1) {
      var v4 = arg0 + '\n';
      var v5 = 0;
      while (v5 < arg1.length) {
        var v6 = arg1[v5];
        ++v5;
        v4 += 'Called from ' + v6 + '\n';
      }
      haxe.Firebug.trace(v4, null);
    };

    haxe.Firebug.trace = function (arg0, arg1) {
      var v4 = (arg1 != null && arg1.customParams != null) ? arg1.customParams[0] : null;
      if (v4 != 'warn' && v4 != 'info' && v4 != 'debug' && v4 != 'error') {
        v4 = (arg1 == null) ? 'error' : 'log';
      }
      var v5 = (arg1 == null) ? '' : arg1.fileName + ':' + arg1.lineNumber + ' : ';
      try {
        v5 += Std.string(arg0);
      }
      catch (v0) {
        var v6 = v0;
        v5 += '????';
      }
      v5 = (((((((v5.split('\\')).join('\\\\')).split('\'')).join('\\\'')).split('\n')).join('\\n')).split('\r')).join('\\r');
      v5 = StringTools.urlEncode(v5);
      v6 = 'javascript:console.' + v4 + '(\'' + v5 + '\');';
      flash.Lib.getURL(v6);
    };

    haxe.Log = function () {};

    haxe.Log.__name__ = ['haxe', 'Log'];
    v1 = haxe.Log.prototype;
    v1.__class__ = haxe.Log;
    haxe.Log.trace = function (arg0, arg1) {
      flash.Boot.__trace(arg0, arg1);
    };

    haxe.Log.clear = function () {
      flash.Boot.__clear_trace();
    };

    haxe.Log.setColor = function (arg0) {
      flash.Boot.__set_trace_color(arg0);
    };

    haxe.Serializer = function () {
      this.buf = new StringBuf();
      this.cache = new Array();
      this.useCache = haxe.Serializer.USE_CACHE;
      this.useEnumIndex = haxe.Serializer.USE_ENUM_INDEX;
      this.shash = new Hash();
      this.scount = 0;
    };

    haxe.Serializer.__name__ = ['haxe', 'Serializer'];
    v1 = haxe.Serializer.prototype;
    v1.__class__ = haxe.Serializer;
    haxe.Serializer.run = function (arg0) {
      var v3 = new haxe.Serializer();
      v3.serialize(arg0);
      return v3.toString();
    };

    v1.buf = null;
    v1.cache = null;
    v1.scount = null;
    v1.serialize = function (arg0) {
      var v3 = Type.typeof(arg0);
      var v4 = v3[1];
      switch (v4) {
          throw 'Cannot serialize ' + Std.string(arg0);
        case 0:
          this.buf.b += 'n';
          break;
        case 1:
          if (arg0 == 0) {
            this.buf.b += 'z';
            return undefined;
          }
          this.buf.b += 'i';
          this.buf.b += arg0;
          break;
        case 2:
          if (!Math.isNaN(arg0)) {
            if (Math.isFinite(arg0)) {
              this.buf.b += 'd';
              this.buf.b += arg0;
            } else {
              this.buf.b += arg0 < 0 ? 'm' : 'p';
            }
          } else {
            this.buf.b += 'k';
          }
          break;
        case 3:
          this.buf.b += arg0 ? 't' : 'f';
          break;
        case 6:
          v4 = v3[2];
          if (v4 == String) {
            this.serializeString(arg0);
            return undefined;
          }
          if (this.useCache && this.serializeRef(arg0)) {
            return undefined;
          }
          var v5 = v4;
          if (v5 != Array) {
          } else {
            if (v5 != List) {
            } else {
              if (v5 != Date) {
              } else {
                      this.cache.pop();
                      if (arg0.hxSerialize == null) {
                        this.buf.b += 'c';
                        this.serializeString(Type.getClassName(v4));
                        this.cache.push(arg0);
                        this.serializeFields(arg0);
                      } else {
                        this.buf.b += 'C';
                        this.serializeString(Type.getClassName(v4));
                        this.cache.push(arg0);
                        arg0.hxSerialize(this);
                        this.buf.b += 'g';
                      }
                if (v5 != Hash) {
                      var v6 = 0;
                      this.buf.b += 'a';
                      var v7 = arg0.length;
                      var v8 = 0;
                      while (v8 < v7) {
                        ++v8;
                        var v9 = v8;
                        if (arg0[v9] != null) {
                          if (v6 > 0) {
                            if (v6 != 1) {
                              this.buf.b += 'u';
                              this.buf.b += v6;
                            } else {
                              this.buf.b += 'n';
                            }
                            v6 = 0;
                          }
                          this.serialize(arg0[v9]);
                        } else {
                          ++v6;
                        }
                      }
                      if (v6 > 0) {
                        if (v6 != 1) {
                          this.buf.b += 'u';
                          this.buf.b += v6;
                        } else {
                          this.buf.b += 'n';
                        }
                      }
                      this.buf.b += 'h';
                } else {
                      this.buf.b += 'l';
                      var v6 = arg0;
                      var v7 = v6.iterator();
                      while (v7.hasNext()) {
                        var v8 = v7.next();
                        this.serialize(v8);
                      }
                      this.buf.b += 'h';
                  if (v5 != IntHash) {
                      v6 = arg0;
                      this.buf.b += 'v';
                      this.buf.b += v6.toString();
                  } else {
                      this.buf.b += 'b';
                      v6 = arg0;
                      v7 = v6.keys();
                      while (v7.hasNext()) {
                        v8 = v7.next();
                        this.serializeString(v8);
                        this.serialize(v6.get(v8));
                      }
                      this.buf.b += 'h';
                    if (v5 != haxe.io.Bytes) {
                      this.buf.b += 'q';
                      v6 = arg0;
                      v7 = v6.keys();
                      while (v7.hasNext()) {
                        v8 = v7.next();
                        this.buf.b += ':';
                        this.buf.b += v8;
                        this.serialize(v6.get(v8));
                      }
                      this.buf.b += 'h';
                    } else {
                      v6 = arg0;
                      v7 = 0;
                      v8 = v6.length - 2;
                      var v9 = '';
                      var v10 = haxe.Serializer.BASE64;
                      while (v7 < v8) {
                        ++v7;
                        var v11 = v6.b[v7];
                        ++v7;
                        var v12 = v6.b[v7];
                        ++v7;
                        var v13 = v6.b[v7];
                        v9 += v10.charAt(v11 >> 2) + v10.charAt((v11 << 4 | v12 >> 4) & 63) + v10.charAt((v12 << 2 | v13 >> 6) & 63) + v10.charAt(v13 & 63);
                      }
                      if (v7 != v8) {
                        if (v7 == v8 + 1) {
                          ++v7;
                          v11 = v6.b[v7];
                          v9 += v10.charAt(v11 >> 2) + v10.charAt(v11 << 4 & 63);
                        }
                      } else {
                        ++v7;
                        v11 = v6.b[v7];
                        ++v7;
                        v12 = v6.b[v7];
                        v9 += v10.charAt(v11 >> 2) + v10.charAt((v11 << 4 | v12 >> 4) & 63) + v10.charAt(v12 << 2 & 63);
                      }
                      this.buf.b += 's';
                      this.buf.b += v9.length;
                      this.buf.b += ':';
                      this.buf.b += v9;
                    }
                  }
                }
              }
            }
          }
          break;
        case 4:
          if (this.useCache && this.serializeRef(arg0)) {
            return undefined;
          }
          this.buf.b += 'o';
          this.serializeFields(arg0);
          break;
        case 7:
          v4 = v3[2];
          if (this.useCache && this.serializeRef(arg0)) {
            return undefined;
          }
          this.cache.pop();
          this.buf.b += this.useEnumIndex ? 'j' : 'w';
          this.serializeString(Type.getEnumName(v4));
          if (!this.useEnumIndex) {
            this.serializeString(arg0[0]);
          } else {
            this.buf.b += ':';
            this.buf.b += arg0[1];
          }
          this.buf.b += ':';
          var v5 = arg0.length;
          this.buf.b += v5 - 2;
          var v6 = 2;
          while (v6 < v5) {
            ++v6;
            var v7 = v6;
            this.serialize(arg0[v7]);
          }
          this.cache.push(arg0);
          break;
        case 5:
          throw 'Cannot serialize function';
      }
    };

    v1.serializeException = function (arg0) {
      this.buf.b += 'x';
      this.serialize(arg0);
    };

    v1.serializeFields = function (arg0) {
      var v3 = 0;
      var v4 = Reflect.fields(arg0);
      while (v3 < v4.length) {
        var v5 = v4[v3];
        ++v3;
        this.serializeString(v5);
        this.serialize(arg0[v5]);
      }
      this.buf.b += 'g';
    };

    v1.serializeRef = function (arg0) {
      var v3 = 0;
      var v4 = this.cache.length;
      while (v3 < v4) {
        ++v3;
        var v5 = v3;
        if (this.cache[v5] == arg0) {
          this.buf.b += 'r';
          this.buf.b += v5;
          return true;
        }
      }
      this.cache.push(arg0);
      return false;
    };

    v1.serializeString = function (arg0) {
      var v3 = this.shash.get(arg0);
      if (v3 != null) {
        this.buf.b += 'R';
        this.buf.b += v3;
        return undefined;
      }
      ++this.scount;
      this.shash.set(arg0, this.scount);
      this.buf.b += 'y';
      arg0 = StringTools.urlEncode(arg0);
      this.buf.b += arg0.length;
      this.buf.b += ':';
      this.buf.b += arg0;
    };

    v1.shash = null;
    v1.toString = function () {
      return this.buf.b;
    };

    v1.useCache = null;
    v1.useEnumIndex = null;
    haxe.Unserializer = function (arg0) {
      this.buf = arg0;
      this.length = arg0.length;
      this.pos = 0;
      this.scache = new Array();
      this.cache = new Array();
      var v3 = haxe.Unserializer.DEFAULT_RESOLVER;
      if (v3 == null) {
        v3 = Type;
        haxe.Unserializer.DEFAULT_RESOLVER = v3;
      }
      this.setResolver(v3);
    };

    haxe.Unserializer.__name__ = ['haxe', 'Unserializer'];
    v1 = haxe.Unserializer.prototype;
    v1.__class__ = haxe.Unserializer;
    haxe.Unserializer.initCodes = function () {
      var v2 = new Array();
      var v3 = 0;
      var v4 = haxe.Unserializer.BASE64.length;
      while (v3 < v4) {
        ++v3;
        var v5 = v3;
        v2[haxe.Unserializer.BASE64.cca(v5)] = v5;
      }
      return v2;
    };

    haxe.Unserializer.run = function (arg0) {
      return (new haxe.Unserializer(arg0)).unserialize();
    };

    v1.buf = null;
    v1.cache = null;
    v1.get = function (arg0) {
      return this.buf.cca(arg0);
    };

    v1.getResolver = function () {
      return this.resolver;
    };

    v1.length = null;
    v1.pos = null;
    v1.readDigits = function () {
      var v2 = 0;
      var v3 = false;
      var v4 = this.pos;
      while (true) {
        var v5 = this.buf.cca(this.pos);
        if (v5 <= 0) {
          break;
        }
        if (v5 == 45) {
          if (this.pos != v4) {
            break;
          }
          v3 = true;
          ++this.pos;
          continue;
        }
        if (v5 < 48 || v5 > 57) {
          break;
        }
        v2 = v2 * 10 + (v5 - 48);
        ++this.pos;
      }
      if (v3) {
        v2 *= -1;
      }
      return v2;
    };

    v1.resolver = null;
    v1.scache = null;
    v1.setResolver = function (arg0) {
      if (arg0 != null) {
        this.resolver = arg0;
      } else {
        this.resolver = {'resolveClass': function (arg0) {
          return null;
        }, 'resolveEnum': function (arg0) {
          return null;
        }};
      }
    };

    v1.unserialize = function () {
      ++this.pos;
      var v2 = this.buf.cca(this.pos);
      if (v2 != 110) {
      } else {
        if (v2 != 116) {
        } else {
          if (v2 != 102) {
          } else {
            if (v2 != 122) {
            } else {
              if (v2 != 105) {
              } else {
                if (v2 != 100) {
                } else {
                  if (v2 != 121) {
                  } else {
                    if (v2 != 107) {
                    } else {
                      if (v2 != 109) {
                      } else {
                        if (v2 != 112) {
                        } else {
                          if (v2 != 97) {
                          } else {
                            if (v2 != 111) {
                            } else {
                              if (v2 != 114) {
                                                      return null;
                              } else {
                                                      return true;
                                if (v2 != 82) {
                                                      return false;
                                } else {
                                                      return 0;
                                  if (v2 != 120) {
                                                      return this.readDigits();
                                  } else {
                                                      var v3 = this.pos;
                                                      while (true) {
                                                        var v4 = this.buf.cca(this.pos);
                                                        if (!(v4 >= 43 && v4 < 58 || v4 == 101 || v4 == 69)) {
                                                          break;
                                                        } else {
                                                          ++this.pos;
                                                        }
                                                      }
                                                      return Std.parseFloat(this.buf.substr(v3, this.pos - v3));
                                    if (v2 != 99) {
                                                      var v3 = this.readDigits();
                                                      ++this.pos;
                                                      if (this.buf.cca(this.pos) != 58 || this.length - this.pos < v3) {
                                                        throw 'Invalid string length';
                                                      }
                                                      var v4 = this.buf.substr(this.pos, v3);
                                                      this.pos += v3;
                                                      v4 = StringTools.urlDecode(v4);
                                                      this.scache.push(v4);
                                                      return v4;
                                    } else {
                                                      return Math.NaN;
                                      if (v2 != 119) {
                                                      return Math.NEGATIVE_INFINITY;
                                      } else {
                                                      return Math.POSITIVE_INFINITY;
                                        if (v2 != 106) {
                                                      v3 = this.buf;
                                                      v4 = new Array();
                                                      this.cache.push(v4);
                                                      while (true) {
                                                        var v5 = this.buf.cca(this.pos);
                                                        if (v5 == 104) {
                                                          ++this.pos;
                                                          break;
                                                        }
                                                        if (v5 != 117) {
                                                          v4.push(this.unserialize());
                                                        } else {
                                                          ++this.pos;
                                                          var v6 = this.readDigits();
                                                          v4[v4.length + v6 - 1] = null;
                                                        }
                                                      }
                                                      return v4;
                                        } else {
                                                      v3 = {};
                                                      this.cache.push(v3);
                                                      this.unserializeObject(v3);
                                                      return v3;
                                          if (v2 != 108) {
                                                      v3 = this.readDigits();
                                                      if (v3 < 0 || v3 >= this.cache.length) {
                                                        throw 'Invalid reference';
                                                      }
                                                      return this.cache[v3];
                                          } else {
                                                      v3 = this.readDigits();
                                                      if (v3 < 0 || v3 >= this.scache.length) {
                                                        throw 'Invalid string reference';
                                                      }
                                                      return this.scache[v3];
                                            if (v2 != 98) {
                                                      throw this.unserialize();
                                            } else {
                                                      v3 = this.unserialize();
                                                      v4 = this.resolver.resolveClass(v3);
                                                      if (v4 == null) {
                                                        throw 'Class not found ' + v3;
                                                      }
                                                      var v5 = Type.createEmptyInstance(v4);
                                                      this.cache.push(v5);
                                                      this.unserializeObject(v5);
                                                      return v5;
                                              if (v2 != 113) {
                                                      v3 = this.unserialize();
                                                      v4 = this.resolver.resolveEnum(v3);
                                                      if (v4 == null) {
                                                        throw 'Enum not found ' + v3;
                                                      }
                                                      v5 = this.unserializeEnum(v4, this.unserialize());
                                                      this.cache.push(v5);
                                                      return v5;
                                              } else {
                                                      v3 = this.unserialize();
                                                      v4 = this.resolver.resolveEnum(v3);
                                                      if (v4 == null) {
                                                        throw 'Enum not found ' + v3;
                                                      }
                                                      ++this.pos;
                                                      v5 = this.readDigits();
                                                      var v6 = (Type.getEnumConstructs(v4))[v5];
                                                      if (v6 == null) {
                                                        throw 'Unknown enum index ' + v3 + '@' + v5;
                                                      }
                                                      var v7 = this.unserializeEnum(v4, v6);
                                                      this.cache.push(v7);
                                                      return v7;
                                                if (v2 != 118) {
                                                      v3 = new List();
                                                      this.cache.push(v3);
                                                      v4 = this.buf;
                                                      while (this.buf.cca(this.pos) != 104) {
                                                        v3.add(this.unserialize());
                                                      }
                                                      ++this.pos;
                                                      return v3;
                                                } else {
                                                      v3 = new Hash();
                                                      this.cache.push(v3);
                                                      v4 = this.buf;
                                                      while (this.buf.cca(this.pos) != 104) {
                                                        v5 = this.unserialize();
                                                        v3.set(v5, this.unserialize());
                                                      }
                                                      ++this.pos;
                                                      return v3;
                                                  if (v2 != 115) {
                                                      v3 = new IntHash();
                                                      this.cache.push(v3);
                                                      v4 = this.buf;
                                                      ++this.pos;
                                                      v5 = this.buf.cca(this.pos);
                                                      while (v5 == 58) {
                                                        v6 = this.readDigits();
                                                        v3.set(v6, this.unserialize());
                                                        ++this.pos;
                                                        v5 = this.buf.cca(this.pos);
                                                      }
                                                      if (v5 != 104) {
                                                        throw 'Invalid IntHash format';
                                                      }
                                                      return v3;
                                                  } else {
                                                      v3 = Date.fromString(this.buf.substr(this.pos, 19));
                                                      this.cache.push(v3);
                                                      this.pos += 19;
                                                      return v3;
                                                    if (v2 != 67) {
                                                      v3 = this.readDigits();
                                                      v4 = this.buf;
                                                      ++this.pos;
                                                      if (this.buf.cca(this.pos) != 58 || this.length - this.pos < v3) {
                                                        throw 'Invalid bytes length';
                                                      }
                                                      v5 = haxe.Unserializer.CODES;
                                                      if (v5 == null) {
                                                        v5 = haxe.Unserializer.initCodes();
                                                        haxe.Unserializer.CODES = v5;
                                                      }
                                                      v6 = this.pos;
                                                      var v7 = v3 & 3;
                                                      var v8 = (v3 >> 2) * 3 + (v7 >= 2 ? v7 - 1 : 0);
                                                      var v9 = v6 + (v3 - v7);
                                                      var v10 = haxe.io.Bytes.alloc(v8);
                                                      var v11 = 0;
                                                      while (v6 < v9) {
                                                        ++v6;
                                                        var v12 = v5[v4.cca(v6)];
                                                        ++v6;
                                                        var v13 = v5[v4.cca(v6)];
                                                        ++v11;
                                                        v10.b[v11] = (v12 << 2 | v13 >> 4) & 255;
                                                        ++v6;
                                                        var v14 = v5[v4.cca(v6)];
                                                        ++v11;
                                                        v10.b[v11] = (v13 << 4 | v14 >> 2) & 255;
                                                        ++v6;
                                                        var v15 = v5[v4.cca(v6)];
                                                        ++v11;
                                                        v10.b[v11] = (v14 << 6 | v15) & 255;
                                                      }
                                                      if (v7 >= 2) {
                                                        ++v6;
                                                        v12 = v5[v4.cca(v6)];
                                                        ++v6;
                                                        v13 = v5[v4.cca(v6)];
                                                        ++v11;
                                                        v10.b[v11] = (v12 << 2 | v13 >> 4) & 255;
                                                        if (v7 == 3) {
                                                          ++v6;
                                                          v14 = v5[v4.cca(v6)];
                                                          ++v11;
                                                          v10.b[v11] = (v13 << 4 | v14 >> 2) & 255;
                                                        }
                                                      }
                                                      this.pos += v3;
                                                      this.cache.push(v10);
                                                      return v10;
                                                    } else {
                                                      v3 = this.unserialize();
                                                      v4 = this.resolver.resolveClass(v3);
                                                      if (v4 == null) {
                                                        throw 'Class not found ' + v3;
                                                      }
                                                      v5 = Type.createEmptyInstance(v4);
                                                      this.cache.push(v5);
                                                      v5.hxUnserialize(this);
                                                      ++this.pos;
                                                      if (this.buf.cca(this.pos) != 103) {
                                                        throw 'Invalid custom data';
                                                      }
                                                      return v5;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      --this.pos;
      throw 'Invalid char ' + this.buf.charAt(this.pos) + ' at position ' + this.pos;
    };

    v1.unserializeEnum = function (arg0, arg1) {
      ++this.pos;
      if (this.buf.cca(this.pos) != 58) {
        throw 'Invalid enum format';
      }
      var v4 = this.readDigits();
      if (v4 == 0) {
        return Type.createEnum(arg0, arg1);
      }
      var v5 = new Array();
      --v4;
      while (v4 > 0) {
        v5.push(this.unserialize());
      }
      return Type.createEnum(arg0, arg1, v5);
    };

    v1.unserializeObject = function (arg0) {
      while (true) {
        if (this.pos >= this.length) {
          throw 'Invalid object';
        }
        if (this.buf.cca(this.pos) == 103) {
          break;
        }
        var v3 = this.unserialize();
        if (!Std.is(v3, String)) {
          throw 'Invalid object key';
        }
        var v4 = this.unserialize();
        arg0[v3] = v4;
      }
      ++this.pos;
    };

    v1 = new Object();
    haxe.io = v1;
    v2 = _global.haxe.io;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    haxe.io.Bytes = function (arg0, arg1) {
      this.length = arg0;
      this.b = arg1;
    };

    haxe.io.Bytes.__name__ = ['haxe', 'io', 'Bytes'];
    v1 = haxe.io.Bytes.prototype;
    v1.__class__ = haxe.io.Bytes;
    haxe.io.Bytes.alloc = function (arg0) {
      var v3 = new Array();
      var v4 = 0;
      while (v4 < arg0) {
        ++v4;
        var v5 = v4;
        v3.push(0);
      }
      return new haxe.io.Bytes(arg0, v3);
    };

    haxe.io.Bytes.ofString = function (arg0) {
      var v3 = new Array();
      var v4 = 0;
      var v5 = arg0.length;
      while (v4 < v5) {
        ++v4;
        var v6 = v4;
        var v7 = arg0.cca(v6);
        if (v7 > 127) {
          if (v7 > 2047) {
            if (v7 > 65535) {
              v3.push(240 | v7 >> 18);
              v3.push(128 | v7 >> 12 & 63);
              v3.push(128 | v7 >> 6 & 63);
              v3.push(128 | v7 & 63);
            } else {
              v3.push(224 | v7 >> 12);
              v3.push(128 | v7 >> 6 & 63);
              v3.push(128 | v7 & 63);
            }
          } else {
            v3.push(192 | v7 >> 6);
            v3.push(128 | v7 & 63);
          }
        } else {
          v3.push(v7);
        }
      }
      return new haxe.io.Bytes(v3.length, v3);
    };

    haxe.io.Bytes.ofData = function (arg0) {
      return new haxe.io.Bytes(arg0.length, arg0);
    };

    v1.b = null;
    v1.blit = function (arg0, arg1, arg2, arg3) {
      if (arg0 < 0 || arg2 < 0 || arg3 < 0 || arg0 + arg3 > this.length || arg2 + arg3 > arg1.length) {
        throw haxe.io.Error.OutsideBounds;
      }
      var v6 = this.b;
      var v7 = arg1.b;
      if (v6 == v7 && arg0 > arg2) {
        var v8 = arg3;
        while (v8 > 0) {
          --v8;
          v6[v8 + arg0] = v7[v8 + arg2];
        }
        return undefined;
      }
      v8 = 0;
      while (v8 < arg3) {
        ++v8;
        var v9 = v8;
        v6[v9 + arg0] = v7[v9 + arg2];
      }
    };

    v1.compare = function (arg0) {
      var v3 = this.b;
      var v4 = arg0.b;
      var v5 = this.length < arg0.length ? this.length : arg0.length;
      var v6 = 0;
      while (v6 < v5) {
        ++v6;
        var v7 = v6;
        if (v3[v7] != v4[v7]) {
          return v3[v7] - v4[v7];
        }
      }
      return this.length - arg0.length;
    };

    v1.get = function (arg0) {
      return this.b[arg0];
    };

    v1.getData = function () {
      return this.b;
    };

    v1.length = null;
    v1.readString = function (arg0, arg1) {
      if (arg0 < 0 || arg1 < 0 || arg0 + arg1 > this.length) {
        throw haxe.io.Error.OutsideBounds;
      }
      var v4 = '';
      var v5 = this.b;
      var v6 = @closure('fromCharCode', String);
      var v7 = arg0;
      var v8 = arg0 + arg1;
      while (v7 < v8) {
        ++v7;
        var v9 = v5[v7];
        if (v9 >= 128) {
          if (v9 >= 224) {
            if (v9 >= 240) {
              ++v7;
              var v10 = v5[v7];
              ++v7;
              var v11 = v5[v7];
              ++v7;
              v4 += v6((v9 & 15) << 18 | (v10 & 127) << 12 | v11 << 6 & 127 | v5[v7] & 127);
            } else {
              ++v7;
              var v10 = v5[v7];
              ++v7;
              v4 += v6((v9 & 31) << 12 | (v10 & 127) << 6 | v5[v7] & 127);
            }
          } else {
            ++v7;
            v4 += v6((v9 & 63) << 6 | v5[v7] & 127);
          }
        } else {
          if (v9 == 0) {
            break;
          }
          v4 += v6(v9);
        }
      }
      return v4;
    };

    v1.set = function (arg0, arg1) {
      this.b[arg0] = arg1 & 255;
    };

    v1.sub = function (arg0, arg1) {
      if (arg0 < 0 || arg1 < 0 || arg0 + arg1 > this.length) {
        throw haxe.io.Error.OutsideBounds;
      }
      return new haxe.io.Bytes(arg1, this.b.slice(arg0, arg0 + arg1));
    };

    v1.toHex = function () {
      var v2 = new StringBuf();
      var v3 = [];
      var v4 = '0123456789abcdef';
      var v5 = 0;
      var v6 = v4.length;
      while (v5 < v6) {
        ++v5;
        var v7 = v5;
        v3.push(v4.charCodeAt(v7));
      }
      v5 = 0;
      v6 = this.length;
      while (v5 < v6) {
        ++v5;
        v7 = v5;
        var v8 = this.b[v7];
        v2.b += String.fromCharCode(v3[v8 >> 4]);
        v2.b += String.fromCharCode(v3[v8 & 15]);
      }
      return v2.b;
    };

    v1.toString = function () {
      return this.readString(0, this.length);
    };

    haxe.io.Error = new Object();
    haxe.io.Error.__ename__ = ['haxe', 'io', 'Error'];
    haxe.io.Error.__constructs__ = ['Blocked', 'Overflow', 'OutsideBounds', 'Custom'];
    ['Blocked', 0].__enum__ = haxe.io.Error;
    ['Blocked', 0].toString = @estr;
    haxe.io.Error.Blocked = ['Blocked', 0];
    haxe.io.Error.Custom = function (arg0) {
      ['Custom', 3, arg0].__enum__ = this;
      ['Custom', 3, arg0].toString = @estr;
      return ['Custom', 3, arg0];
    };

    ['OutsideBounds', 2].__enum__ = haxe.io.Error;
    ['OutsideBounds', 2].toString = @estr;
    haxe.io.Error.OutsideBounds = ['OutsideBounds', 2];
    ['Overflow', 1].__enum__ = haxe.io.Error;
    ['Overflow', 1].toString = @estr;
    haxe.io.Error.Overflow = ['Overflow', 1];
    v1 = new Object();
    haxe.remoting = v1;
    v2 = _global.haxe.remoting;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    haxe.remoting.Connection = function () {};

    haxe.remoting.Connection.__name__ = ['haxe', 'remoting', 'Connection'];
    v1 = haxe.remoting.Connection.prototype;
    v1.__class__ = haxe.remoting.Connection;
    v1.call = null;
    v1.resolve = null;
    haxe.remoting.Context = function () {
      this.objects = new Hash();
    };

    haxe.remoting.Context.__name__ = ['haxe', 'remoting', 'Context'];
    v1 = haxe.remoting.Context.prototype;
    v1.__class__ = haxe.remoting.Context;
    haxe.remoting.Context.share = function (arg0, arg1) {
      var v4 = new haxe.remoting.Context();
      v4.addObject(arg0, arg1);
      return v4;
    };

    v1.addObject = function (arg0, arg1, arg2) {
      this.objects.set(arg0, {'obj': arg1, 'rec': arg2});
    };

    v1.call = function (arg0, arg1) {
      if (arg0.length < 2) {
        throw 'Invalid path \'' + arg0.join('.') + '\'';
      }
      var v4 = this.objects.get(arg0[0]);
      if (v4 == null) {
        throw 'No such object ' + arg0[0];
      }
      var v5 = v4.obj;
      var v6 = v5[arg0[1]];
      if (arg0.length > 2) {
        if (!v4.rec) {
          throw 'Can\'t access ' + arg0.join('.');
        }
        var v7 = 2;
        var v8 = arg0.length;
        while (v7 < v8) {
          ++v7;
          var v9 = v7;
          v5 = v6;
          v6 = v5[arg0[v9]];
        }
      }
      if (!Reflect.isFunction(v6)) {
        throw 'No such method ' + arg0.join('.');
      }
      return v6.apply(v5, arg1);
    };

    v1.objects = null;
    haxe.remoting.ExternalConnection = function (arg0, arg1) {
      this.__data = arg0;
      this.__path = arg1;
    };

    haxe.remoting.ExternalConnection.__name__ = ['haxe', 'remoting', 'ExternalConnection'];
    haxe.remoting.ExternalConnection.__interfaces__ = [haxe.remoting.Connection];
    haxe.remoting.ExternalConnection implements haxe.remoting.Connection;
    v1 = haxe.remoting.ExternalConnection.prototype;
    v1.__class__ = haxe.remoting.ExternalConnection;
    haxe.remoting.ExternalConnection.escapeString = function (arg0) {
      return (((arg0.split('\\')).join('\\\\')).split('&')).join('&amp;');
    };

    haxe.remoting.ExternalConnection.doCall = function (arg0, arg1, arg2) {
      try {
        var v5 = haxe.remoting.ExternalConnection.connections.get(arg0);
        if (v5 == null) {
          throw 'Unknown connection : ' + arg0;
        }
        if (v5.__data.ctx == null) {
          throw 'No context shared for the connection ' + arg0;
        }
        var v6 = (new haxe.Unserializer(arg2)).unserialize();
        var v7 = v5.__data.ctx.call(arg1.split('.'), v6);
        var v8 = new haxe.Serializer();
        v8.serialize(v7);
        return haxe.remoting.ExternalConnection.escapeString(v8.toString());
      }
      catch (v0) {
        v5 = v0;
        v6 = new haxe.Serializer();
        v6.serializeException(v5);
        return v6.toString();
      }
    };

    haxe.remoting.ExternalConnection.jsConnect = function (arg0, arg1) {
      if (!flash.external.ExternalInterface.available) {
        throw 'External Interface not available';
      }
      flash.external.ExternalInterface.addCallback('externalRemotingCall', null, @closure('doCall', haxe.remoting.ExternalConnection));
      var v4 = new haxe.remoting.ExternalConnection({'name': arg0, 'ctx': arg1}, []);
      haxe.remoting.ExternalConnection.connections.set(arg0, v4);
      return v4;
    };

    v1.__data = null;
    v1.__path = null;
    v1.call = function (arg0) {
      var v3 = new haxe.Serializer();
      v3.serialize(arg0);
      var v4 = haxe.remoting.ExternalConnection.escapeString(v3.toString());
      var v5 = null;
      v5 = flash.external.ExternalInterface.call('haxe.remoting.ExternalConnection.doCall', this.__data.name, this.__path.join('.'), v4);
      if (v5 == null) {
        throw 'Call failure : ExternalConnection is not ' + 'compiled in JS';
      }
      return (new haxe.Unserializer(v5)).unserialize();
    };

    v1.close = function () {
      haxe.remoting.ExternalConnection.connections.remove(this.__data.name);
    };

    v1.resolve = function (arg0) {
      var v3 = new haxe.remoting.ExternalConnection(this.__data, this.__path.copy());
      v3.__path.push(arg0);
      return v3;
    };

    v1 = new Object();
    mt = v1;
    v2 = _global.mt;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    mt.flash = v1;
    v2 = _global.mt.flash;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    mt.flash.Init = function () {};

    mt.flash.Init.__name__ = ['mt', 'flash', 'Init'];
    v1 = mt.flash.Init.prototype;
    v1.__class__ = mt.flash.Init;
    mt.flash.Init.check = function () {
      var v2 = flash.Lib._root._url;
      var v3 = v2.split('?');
      v3.shift();
      v3 = (v3.join('?')).split('&');
      var v4 = 0;
      while (v4 < v3.length) {
        var v5 = v3[v4];
        ++v4;
        var v6 = (v5.split('='))[0];
        if (v6 != '' && v6 != 'v') {
          throw 'Vars not allowed';
        }
      }
    };

    flash.Boot.__init(this);
    var d = Date;
    d.now = function () {
      return new Date();
    };

    d.fromTime = function (arg0) {
      var v3 = new Date();
      v3.setTime(arg0);
      return v3;
    };

    d.fromString = function (arg0) {
      var v3 = arg0.length;
      if (v3 != 8) {
      } else {
        if (v3 != 10) {
            throw 'Invalid date format : ' + arg0;
        } else {
            var v4 = arg0.split(':');
            var v5 = new Date();
            v5.setTime(0);
            v5.setUTCHours(v4[0]);
            v5.setUTCMinutes(v4[1]);
            v5.setUTCSeconds(v4[2]);
            return v5;
          if (v3 != 19) {
            var v4 = arg0.split('-');
            return new Date(v4[0], v4[1] - 1, v4[2], 0, 0, 0);
          } else {
            v4 = arg0.split(' ');
            v5 = v4[0].split('-');
            var v6 = v4[1].split(':');
            return new Date(v5[0], v5[1] - 1, v5[2], v6[0], v6[1], v6[2]);
          }
        }
      }
    };

    d.prototype.toString = function () {
      var v2 = this;
      var v3 = v2.getMonth() + 1;
      var v4 = v2.getDate();
      var v5 = v2.getHours();
      var v6 = v2.getMinutes();
      var v7 = v2.getSeconds();
      return v2.getFullYear() + '-' + (v3 < 10 ? '0' + v3 : '' + v3) + '-' + (v4 < 10 ? '0' + v4 : '' + v4) + ' ' + (v5 < 10 ? '0' + v5 : '' + v5) + ':' + (v6 < 10 ? '0' + v6 : '' + v6) + ':' + (v7 < 10 ? '0' + v7 : '' + v7);
    };

    d.prototype.__class__ = d;
    d.__name__ = ['Date'];
    Math.__name__ = ['Math'];
    Math.NaN = Number.NaN;
    Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
    Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
    Math.isFinite = function (arg0) {
      return _global.isFinite(arg0);
    };

    Math.isNaN = function (arg0) {
      return _global.isNaN(arg0);
    };

    var g = _global;
    g.Int = {'__name__': ['Int']};
    g.Bool = {'__ename__': ['Bool']};
    g.Dynamic = {'__name__': ['Dynamic']};
    g.Class = {'__name__': ['Class']};
    g.Enum = {};
    g.Void = {'__ename__': ['Void']};
    g.Float = _global.Number;
    g.Float.__name__ = ['Float'];
    Array.prototype.__class__ = Array;
    Array.__name__ = ['Array'];
    String.prototype.__class__ = String;
    String.__name__ = ['String'];
    g.ASSetPropFlags(Array.prototype, null, 7);
    flash.MovieClip = _global.MovieClip;
    flash.Stage = _global.Stage;
    flash.TextField = _global.TextField;
    flash.TextFormat = _global.TextFormat;
    flash.TextSnapshot = _global.TextSnapshot;
    flash.system.Security = _global.System.security;
    flash.text.StyleSheet = _global.TextField.StyleSheet;
    try {
      flash.Boot.def_color = 0;
      flash.Boot.exception = null;
      haxe.Serializer.USE_CACHE = false;
      haxe.Serializer.USE_ENUM_INDEX = false;
      haxe.Serializer.BASE64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:';
      haxe.Unserializer.DEFAULT_RESOLVER = Type;
      haxe.Unserializer.BASE64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:';
      haxe.Unserializer.CODES = null;
      haxe.remoting.ExternalConnection.connections = new Hash();
      Pod.main();
    }
    catch (flash.Boot) {
      flash.Boot.__exc(flash.Boot);
    }
  }
}
