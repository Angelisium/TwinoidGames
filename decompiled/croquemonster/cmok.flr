movie 'cmok.swf' {
// flash 8, total frames: 1, frame rate: 30 fps, 400x300 px, compressed

  frame 1 {
    @estr = function () {
      return flash.Boot.__string_rec(this, 'xx');
    };

    GetMid = function () {};

    GetMid.__name__ = ['GetMid'];
    var v1 = GetMid.prototype;
    v1.__class__ = GetMid;
    v1.__class__.createMid = function () {
      var v2 = '';
      var v3 = 0;
      while (v3 < 32) {
        ++v3;
        var v4 = v3;
        var v5 = Std.random(62);
        if (v5 >= 10) {
          if (v5 >= 36) {
            v2 += String.fromCharCode(61 + v5);
          } else {
            v2 += String.fromCharCode(55 + v5);
          }
        } else {
          v2 += Std.string(v5);
        }
      }
      v3 = flash.SharedObject.getLocal('cdtk');
      if (!(v3 == null || v3.data._x == null || v3.data._x.length != 32)) {
        v2 = v3.data._x;
        v3.flush();
        return v2;
      }
      v3.data._x = v2;
      v3.flush();
      return v2;
    };

    v1.__class__.main = function () {
      var v2 = flash.Lib._root.cmok;
      if (v2 != null) {
        var v3 = GetMid.createMid();
        var v4 = new haxe.Http(v2);
        v4.setParameter('cmok', GetMid.createMid());
        v4.request(false);
        return undefined;
      }
    };

    Hash = function () {
      this.h = new _global.Object();
    };

    Hash.__name__ = ['Hash'];
    v1 = Hash.prototype;
    v1.__class__ = Hash;
    v1.exists = function (arg0) {
      return this.h.hasOwnProperty('$' + arg0);
    };

    v1.get = function (arg0) {
      return this.h['$' + arg0];
    };

    v1.h = null;
    v1.iterator = function () {
      var v2 = new Array();
      // Loop counter not found
for ($somevar in this.h) {
        v2.push(enumerate this.h);
      }
      return {'ref': this.h, 'it': v2.iterator(), 'hasNext': function () {
        return this.it.hasNext();
      }, 'next': function () {
        var v2 = this.it.next();
        return this.ref[v2];
      }};
    };

    v1.keys = function () {
      var v2 = new Array();
      // Loop counter not found
for ($somevar in this.h) {
        v2.push((enumerate this.h).substr(1));
      }
      return v2.iterator();
    };

    v1.remove = function (arg0) {
      arg0 = '$' + arg0;
      if (!this.h.hasOwnProperty(arg0)) {
        return false;
      }
      delete this.h[arg0];
      return true;
    };

    v1.set = function (arg0, arg1) {
      this.h['$' + arg0] = arg1;
    };

    v1.toString = function () {
      var v2 = new StringBuf();
      v2.b += '{';
      var v3 = this.keys();
      var v4 = v3;
      while (v4.hasNext()) {
        var v5 = v4.next();
        v2.b += v5;
        v2.b += ' => ';
        v2.b += Std.string(this.get(v5));
        if (v3.hasNext()) {
          v2.b += ', ';
        }
      }
      v2.b += '}';
      return v2.b;
    };

    IntIter = function (arg0, arg1) {
      this.min = arg0;
      this.max = arg1;
    };

    IntIter.__name__ = ['IntIter'];
    v1 = IntIter.prototype;
    v1.__class__ = IntIter;
    v1.hasNext = function () {
      return this.min < this.max;
    };

    v1.max = null;
    v1.min = null;
    v1.next = function () {
      ++this.min;
      return this.min;
    };

    Reflect = function () {};

    Reflect.__name__ = ['Reflect'];
    v1 = Reflect.prototype;
    v1.__class__ = Reflect;
    v1.__class__.hasField = function (arg0, arg1) {
      return this.hasOwnProperty.call(arg0, arg1);
    };

    v1.__class__.field = function (arg0, arg1) {
      return arg0[arg1];
    };

    v1.__class__.setField = function (arg0, arg1, arg2) {
      arg0[arg1] = arg2;
    };

    v1.__class__.getProperty = function (arg0, arg1) {
      return arg0[arg1];
    };

    v1.__class__.setProperty = function (arg0, arg1, arg2) {
      arg0[arg1] = arg2;
    };

    v1.__class__.callMethod = function (arg0, arg1, arg2) {
      return arg1.apply(arg0, arg2);
    };

    v1.__class__.fields = function (arg0) {
      if (arg0 == null) {
        return new Array();
      }
      var v4 = new Array();
      // Loop counter not found
for ($somevar in arg0) {
        v4.push(enumerate arg0);
      }
      var v3 = v4;
      v4 = 0;
      while (v4 < v3.length) {
        if (v3.hasOwnProperty.call(arg0, v3[v4])) {
          ++v4;
        } else {
          v3.splice(v4, 1);
        }
      }
      return v3;
    };

    v1.__class__.isFunction = function (arg0) {
      return typeof arg0 == 'function' && arg0.__name__ == null;
    };

    v1.__class__.compare = function (arg0, arg1) {
      return (arg0 == arg1) ? 0 : (arg0 > arg1 ? 1 : -1);
    };

    v1.__class__.compareMethods = function (arg0, arg1) {
      return arg0 == arg1 || arg0.f == arg1.f && arg0.o == arg1.o && arg0.f != null;
    };

    v1.__class__.isObject = function (arg0) {
      var v3 = typeof arg0;
      return v3 == 'string' || v3 == 'object' && !arg0.__enum__ || v3 == 'function' && arg0.__name__ != null;
    };

    v1.__class__.deleteField = function (arg0, arg1) {
      if (this.hasOwnProperty.call(arg0, arg1) != true) {
        return false;
      }
      delete arg0[arg1];
      return true;
    };

    v1.__class__.copy = function (arg0) {
      var v3 = {};
      var v4 = 0;
      var v5 = Reflect.fields(arg0);
      while (v4 < v5.length) {
        var v6 = v5[v4];
        ++v4;
        v3[v6] = arg0[v6];
      }
      return v3;
    };

    v1.__class__.makeVarArgs = function (f) {
      return function () {
        return f(arguments);
      };
    };

    Std = function () {};

    Std.__name__ = ['Std'];
    v1 = Std.prototype;
    v1.__class__ = Std;
    v1.__class__.is = function (arg0, arg1) {
      return flash.Boot.__instanceof(arg0, arg1);
    };

    v1.__class__.string = function (arg0) {
      return flash.Boot.__string_rec(arg0, '');
    };

    v1.__class__.int = function (arg0) {
      if (arg0 < 0) {
        return Math.ceil(arg0);
      }
      return Math.floor(arg0);
    };

    v1.__class__.parseInt = function (arg0) {
      if (arg0.charCodeAt(1) != 120) {
        var v3 = _global.parseInt(arg0, 10);
      } else {
        var v3 = _global.parseInt(arg0);
      }
      if (_global.isNaN(v3)) {
        return null;
      }
      return v3;
    };

    v1.__class__.parseFloat = function (arg0) {
      return _global.parseFloat(arg0);
    };

    v1.__class__.random = function (arg0) {
      return random(arg0);
    };

    StringBuf = function () {
      this.b = '';
    };

    StringBuf.__name__ = ['StringBuf'];
    v1 = StringBuf.prototype;
    v1.__class__ = StringBuf;
    v1.add = function (arg0) {
      this.b += arg0;
    };

    v1.addChar = function (arg0) {
      this.b += String.fromCharCode(arg0);
    };

    v1.addSub = function (arg0, arg1, arg2) {
      this.b += arg0.substr(arg1, arg2);
    };

    v1.b = null;
    v1.toString = function () {
      return this.b;
    };

    v1 = new Object();
    flash = v1;
    var v2 = _global.flash;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    flash.Boot = function () {};

    flash.Boot.__name__ = ['flash', 'Boot'];
    v1 = flash.Boot.prototype;
    v1.__class__ = flash.Boot;
    flash.Boot.__string_rec = function (arg0, arg1) {
      if (arg1.length >= 20) {
        return '<...>';
      }
      var v4 = typeof arg0;
      if (v4 != 'movieclip') {
        if (v4 == 'function' && (arg0.__name__ != null || arg0.__ename__ != null)) {
          v4 = 'object';
        }
      } else {
        v4 = 'object';
      }
      var v5 = v4;
      if (v5 != 'object') {
      } else {
        if (v5 != 'function') {
            return String(arg0);
        } else {
            if (arg0 instanceof Array) {
              if (arg0.__enum__ != null) {
                if (arg0.length == 2) {
                  return arg0[0];
                }
                var v6 = arg0[0] + '(';
                arg1 += '    ';
                var v7 = 2;
                var v8 = arg0.length;
                while (v7 < v8) {
                  ++v7;
                  var v9 = v7;
                  if (v9 == 2) {
                    v6 += flash.Boot.__string_rec(arg0[v9], arg1);
                  } else {
                    v6 += ',' + flash.Boot.__string_rec(arg0[v9], arg1);
                  }
                }
                return v6 + ')';
              }
              v6 = arg0.length;
              v8 = '[';
              arg1 += '    ';
              v9 = 0;
              while (v9 < v6) {
                ++v9;
                var v10 = v9;
                v8 += (v10 > 0 ? ',' : '') + flash.Boot.__string_rec(arg0[v10], arg1);
              }
              v8 += ']';
              return v8;
            }
            v6 = arg0.toString();
            if ((typeof v6 == 'string' || v6 instanceof String) && v6 != '[object Object]' && v6 != '[type Function]') {
              return v6;
            }
            v8 = '{\n';
            if (typeof(arg0) == 'movieclip') {
              v8 = 'MC(' + arg0._name + ') ' + v8;
            }
            arg1 += '    ';
            v10 = new Array();
            // Loop counter not found
for ($somevar in arg0) {
              v10.push(enumerate arg0);
            }
            v9 = v10;
            v10 = v9.iterator();
            while (v10.hasNext()) {
              var v11 = v10.next();
              if (v11 == 'prototype' || v11 == '__class__' || v11 == '__super__' || v11 == '__interfaces__') {
                continue;
              }
              if (v8.length != 2) {
                v8 += ',\n';
              }
              v8 += arg1 + v11 + ' : ' + flash.Boot.__string_rec(arg0[v11], arg1);
            }
            arg1 = arg1.substring(4);
            if (v8.length != 2) {
              v8 += '\n';
            }
            v8 += arg1 + '}';
            return v8;
          if (v5 != 'string') {
            return '<function>';
          } else {
            return arg0;
          }
        }
      }
    };

    flash.Boot.__closure = function (arg0, arg1) {
      var v4 = arg1[super];
      if (v4 == null) {
        return null;
      }
      var v5 = function () {
        super = arguments.callee;
        return super.f.apply(super.o, arguments);
      };

      v5.f = v4;
      v5.o = arg1;
      return v5;
    };

    flash.Boot.__instanceof = function (arg0, arg1) {
      if (!arg1) {
        return false;
      }
      if (arg0 instanceof arg1) {
        if (arg1 == Array) {
          return arg0.__enum__ == null;
        }
        return true;
      }
      var v4 = arg1;
      if (v4 != Int) {
      } else {
        if (v4 != Float) {
        } else {
          if (v4 != Bool) {
                return arg0.__enum__ == arg1 || arg1 == Class && arg0.__name__ != null || arg1 == Enum && arg0.__ename__ != null;
          } else {
                return typeof arg0 == 'number' && Math.ceil(arg0) === arg0 % 2147483648.0 && !(arg0 === true || arg0 === false);
            if (v4 != String) {
                return typeof arg0 == 'number';
            } else {
                return arg0 === true || arg0 === false;
              if (v4 != Dynamic) {
                return typeof arg0 == 'string';
              } else {
                return true;
              }
            }
          }
        }
      }
    };

    flash.Boot.getTrace = function () {
      var v2 = flash.Lib.current;
      var v3 = v2.__trace_txt;
      if (v3 == null) {
        var v4 = flash.Stage.width;
        var v5 = flash.Stage.height;
        if (v4 == 0) {
          v4 = 800;
        }
        if (v5 == 0) {
          v5 = 600;
        }
        v2.createTextField('__trace_txt', 1048500, 0, 0, v4, v5 + 30);
        v3 = v2.__trace_txt;
        var v6 = v3.getTextFormat();
        v6.font = '_sans';
        v3.setNewTextFormat(v6);
        v3.selectable = false;
        v3.textColor = flash.Boot.def_color;
        v2.__trace_lines = new Array();
      }
      return v3;
    };

    flash.Boot.__set_trace_color = function (arg0) {
      (flash.Boot.getTrace()).textColor = arg0;
      flash.Boot.def_color = arg0;
    };

    flash.Boot.__trace = function (arg0, arg1) {
      var v4 = flash.Lib.current;
      var v5 = flash.Boot.getTrace();
      var v6 = arg1.fileName + ((arg1.lineNumber == null) ? '' : ':' + arg1.lineNumber) + ': ' + flash.Boot.__string_rec(arg0, '');
      var v7 = v4.__trace_lines.concat(v6.split('\n'));
      v5.text = v7.join('\n');
      for (;;) {
        if (!(v7.length > 1 && v5.textHeight > flash.Stage.height)) break;
        v7.shift();
        v5.text = v7.join('\n');
      }
      v4.__trace_lines = v7;
    };

    flash.Boot.__exc = function (arg0) {
      var v3 = '';
      if (flash.Lib.onerror == null) {
        flash.Boot.__trace(flash.Boot.__string_rec(arg0, '') + v3, {'fileName': '(uncaught exception)'});
      } else {
        flash.Lib.onerror(flash.Boot.__string_rec(arg0, ''), []);
      }
    };

    flash.Boot.__clear_trace = function () {
      var v2 = flash.Lib.current;
      v2.__trace_txt.removeTextField();
      v2.__trace_lines = null;
    };

    flash.Boot.__init = function (arg0) {
      var v3 = _global;
      if (!v3.haxeInitDone) {
        v3.haxeInitDone = true;
        Array.prototype.copy = Array.prototype.slice;
        Array.prototype.insert = function (arg0, arg1) {
          this.splice(arg0, 0, arg1);
        };

        Array.prototype.remove = function (arg0) {
          var v3 = 0;
          var v4 = this.length;
          while (v3 < v4) {
            if (this[v3] == arg0) {
              this.splice(v3, 1);
              return true;
            }
            ++v3;
          }
          return false;
        };

        Array.prototype.iterator = function () {
          return {'cur': 0, 'arr': this, 'hasNext': function () {
            return this.cur < this.arr.length;
          }, 'next': function () {
            ++this.cur;
            return this.arr[this.cur];
          }};
        };

        _global.ASSetPropFlags(Array.prototype, null, 7);
        var v4 = String.prototype.charCodeAt;
        String.prototype.cca = v4;
        String.prototype.charCodeAt = function (arg0) {
          var v3 = this.cca(arg0);
          if (v3 <= 0) {
            return null;
          }
          return v3;
        };

        if (_global.flash == null) {
          _global.flash = {};
        }
      }
      arg0.flash.Lib._global = _global;
      arg0.flash.Lib._root = _root;
      arg0.flash.Lib.current = arg0;
      arg0.@instanceof = flash.Boot.__instanceof;
      arg0.@closure = flash.Boot.__closure;
      if (_global.Stage.align == '') {
        _global.Stage.align = 'LT';
      }
      mt.flash.Init.check();
    };

    flash.Lib = function () {};

    flash.Lib.__name__ = ['flash', 'Lib'];
    v1 = flash.Lib.prototype;
    v1.__class__ = flash.Lib;
    flash.Lib._global = null;
    flash.Lib._root = null;
    flash.Lib.current = null;
    flash.Lib.onerror = null;
    flash.Lib.trace = function (arg0) {
      trace(arg0);
    };

    flash.Lib.eval = function (arg0) {
      return eval(arg0);
    };

    flash.Lib.getURL = function (arg0, arg1) {
      getURL(arg0, (arg1 == null) ? '_self' : arg1);
    };

    flash.Lib.fscommand = function (arg0, arg1) {
      fscommand('' + arg0, (arg1 == null) ? '' : arg1);
    };

    flash.Lib.print = function (arg0, arg1) {
      arg1 = (arg1 == 'bframe' || arg1 == 'bmax') ? 'print:#' + arg1 : 'print:';
      getURL(arg1, arg0);
    };

    flash.Lib.getTimer = function () {
      return getTimer();
    };

    flash.Lib.getVersion = function () {
      return flash.Lib._root.$version;
    };

    flash.Lib.registerClass = function (arg0, arg1) {
      flash.Lib._global.Object.registerClass(arg0, arg1);
    };

    flash.Lib.keys = function (arg0) {
      var v3 = new Array();
      // Loop counter not found
for ($somevar in arg0) {
        v3.push(enumerate arg0);
      }
      return v3;
    };

    flash.Lib.setErrorHandler = function (arg0) {
      flash.Lib.onerror = arg0;
    };

    v1 = new Object();
    flash._MovieClip = v1;
    v2 = _global.flash._MovieClip;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.display = v1;
    v2 = _global.flash.display;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.filters = v1;
    v2 = _global.flash.filters;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.geom = v1;
    v2 = _global.flash.geom;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.text = v1;
    v2 = _global.flash.text;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    haxe = v1;
    v2 = _global.haxe;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    haxe.Http = function (arg0) {
      this.url = arg0;
      this.headers = new Hash();
      this.params = new Hash();
    };

    haxe.Http.__name__ = ['haxe', 'Http'];
    v1 = haxe.Http.prototype;
    v1.__class__ = haxe.Http;
    v1.headers = null;
    v1.onData = function (arg0) {};

    v1.onError = function (arg0) {};

    v1.onStatus = function (arg0) {};

    v1.params = null;
    v1.postData = null;
    v1.request = function (arg0) {
      var me = this;
      var v3 = new flash.LoadVars();
      v3.onData = function (arg0) {
        if (arg0 == null) {
          me.onError('Failed to retrieve url');
          return undefined;
        }
        me.onData(arg0);
      };

      v3.onHTTPStatus = function (arg0) {
        if (arg0 != 0) {
          me.onStatus(arg0);
        }
      };

      ASSetPropFlags(v3, 'onHTTPStatus', 7);
      ASSetPropFlags(v3, 'onData', 7);
      var v4 = this.headers.keys();
      while (v4.hasNext()) {
        var v5 = v4.next();
        v3.addRequestHeader(v5, this.headers.get(v5));
      }
      v4 = false;
      v5 = this.params.keys();
      while (v5.hasNext()) {
        var v6 = v5.next();
        v4 = true;
        v3[v6] = this.params.get(v6);
      }
      v5 = this.url;
      if (v4 && !arg0) {
        v6 = this.url.split('?');
        if (v6.length > 1) {
          v5 = v6.shift();
          v3.decode(v6.join('?'));
        }
      }
      if (!v3.sendAndLoad(v5, v3, v4 ? (arg0 ? 'POST' : 'GET') : null)) {
        this.onError('Failed to initialize Connection');
      }
    };

    v1.setHeader = function (arg0, arg1) {
      this.headers.set(arg0, arg1);
    };

    v1.setParameter = function (arg0, arg1) {
      this.params.set(arg0, arg1);
    };

    v1.setPostData = function (arg0) {
      throw 'Not available';
      this.postData = arg0;
    };

    v1.url = null;
    v1 = new Object();
    mt = v1;
    v2 = _global.mt;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    mt.flash = v1;
    v2 = _global.mt.flash;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    mt.flash.Init = function () {};

    mt.flash.Init.__name__ = ['mt', 'flash', 'Init'];
    v1 = mt.flash.Init.prototype;
    v1.__class__ = mt.flash.Init;
    mt.flash.Init.check = function () {
      var v2 = flash.Lib._root._url;
      var v3 = v2.split('?');
      v3.shift();
      v3 = (v3.join('?')).split('&');
      var v4 = 0;
      while (v4 < v3.length) {
        var v5 = v3[v4];
        ++v4;
        var v6 = (v5.split('='))[0];
        if (v6 != '' && v6 != 'v') {
          throw 'Vars not allowed';
        }
      }
    };

    flash.Boot.__init(this);
    Math.__name__ = ['Math'];
    Math.NaN = Number.NaN;
    Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
    Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
    Math.isFinite = function (arg0) {
      return _global.isFinite(arg0);
    };

    Math.isNaN = function (arg0) {
      return _global.isNaN(arg0);
    };

    var g = _global;
    g.Int = {'__name__': ['Int']};
    g.Bool = {'__ename__': ['Bool']};
    g.Dynamic = {'__name__': ['Dynamic']};
    g.Class = {'__name__': ['Class']};
    g.Enum = {};
    g.Void = {'__ename__': ['Void']};
    g.Float = _global.Number;
    g.Float.__name__ = ['Float'];
    Array.prototype.__class__ = Array;
    Array.__name__ = ['Array'];
    String.prototype.__class__ = String;
    String.__name__ = ['String'];
    g.ASSetPropFlags(Array.prototype, null, 7);
    flash.LoadVars = _global.LoadVars;
    flash.MovieClip = _global.MovieClip;
    flash.NetConnection = _global.NetConnection;
    flash.SharedObject = _global.SharedObject;
    flash.Stage = _global.Stage;
    flash.TextField = _global.TextField;
    flash.TextFormat = _global.TextFormat;
    flash.TextSnapshot = _global.TextSnapshot;
    flash.text.StyleSheet = _global.TextField.StyleSheet;
    try {
      flash.Boot.def_color = 0;
      flash.Boot.exception = null;
      GetMid.main();
    }
    catch (flash.Boot) {
      flash.Boot.__exc(flash.Boot);
    }
  }
}
