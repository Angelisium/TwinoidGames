movie 'fader.swf' {
// flash 8, total frames: 1, frame rate: 40 fps, 420x350 px, compressed

  movieClip 2 cercle {
  }

  movieClip 4 bar {
  }

  movieClip 6 progress_bar {
  }

  frame 1 {
    @estr = function () {
      return flash.Boot.__string_rec(this, 'xx');
    };

    var v1 = new Object();
    flash = v1;
    var v2 = _global.flash;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.display = v1;
    v2 = _global.flash.display;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    flash.Boot = function () {};

    flash.Boot.__name__ = ['flash', 'Boot'];
    v1 = flash.Boot.prototype;
    v1.__class__ = flash.Boot;
    flash.Boot.__string_rec = function (arg0, arg1) {
      if (arg1.length >= 20) {
        return '<...>';
      }
      var v4 = typeof arg0;
      if (v4 != 'movieclip') {
        if (v4 == 'function' && (arg0.__name__ != null || arg0.__ename__ != null)) {
          v4 = 'object';
        }
      } else {
        v4 = 'object';
      }
      var v5 = v4;
      if (v5 != 'object') {
      } else {
        if (v5 != 'function') {
            return String(arg0);
        } else {
            if (arg0 instanceof Array) {
              if (arg0.__enum__ != null) {
                if (arg0.length == 2) {
                  return arg0[0];
                }
                var v6 = arg0[0] + '(';
                arg1 += '    ';
                var v7 = 2;
                var v8 = arg0.length;
                while (v7 < v8) {
                  ++v7;
                  var v9 = v7;
                  if (v9 == 2) {
                    v6 += flash.Boot.__string_rec(arg0[v9], arg1);
                  } else {
                    v6 += ',' + flash.Boot.__string_rec(arg0[v9], arg1);
                  }
                }
                return v6 + ')';
              }
              v6 = arg0.length;
              v8 = '[';
              arg1 += '    ';
              v9 = 0;
              while (v9 < v6) {
                ++v9;
                var v10 = v9;
                v8 += (v10 > 0 ? ',' : '') + flash.Boot.__string_rec(arg0[v10], arg1);
              }
              v8 += ']';
              return v8;
            }
            v6 = arg0.toString();
            if ((typeof v6 == 'string' || v6 instanceof String) && (v6 != '[object Object]' && v6 != '[type Function]')) {
              return v6;
            }
            v8 = '{\n';
            if (typeof(arg0) == 'movieclip') {
              v8 = 'MC(' + arg0._name + ') ' + v8;
            }
            arg1 += '    ';
            v10 = new Array();
            // Loop counter not found
for ($somevar in arg0) {
              v10.push(enumerate arg0);
            }
            v9 = v10;
            v10 = v9.iterator();
            while (v10.hasNext()) {
              var v11 = v10.next();
              if (v11 == 'prototype' || (v11 == '__class__' || (v11 == '__super__' || v11 == '__interfaces__'))) {
                continue;
              }
              if (v8.length != 2) {
                v8 += ',\n';
              }
              v8 += arg1 + v11 + ' : ' + flash.Boot.__string_rec(arg0[v11], arg1);
            }
            arg1 = arg1.substring(4);
            if (v8.length != 2) {
              v8 += '\n';
            }
            v8 += arg1 + '}';
            return v8;
          if (v5 != 'string') {
            return '<function>';
          } else {
            return arg0;
          }
        }
      }
    };

    flash.Boot.__closure = function (arg0, arg1) {
      var v4 = arg1[arg0];
      if (v4 == null) {
        return null;
      }
      var v5 = function () {
        super = arguments.callee;
        return super.f.apply(super.o, arguments);
      };

      v5.f = v4;
      v5.o = arg1;
      return v5;
    };

    flash.Boot.__instanceof = function (arg0, arg1) {
      if (!arg1) {
        return false;
      }
      if (arg0 instanceof arg1) {
        if (arg1 == Array) {
          return arg0.__enum__ == null;
        }
        return true;
      }
      var v4 = arg1;
      if (v4 != Int) {
      } else {
        if (v4 != Float) {
        } else {
          if (v4 != Bool) {
                return arg0.__enum__ == arg1 || (arg1 == Class && arg0.__name__ != null || arg1 == Enum && arg0.__ename__ != null);
          } else {
                return Math.ceil(arg0) === arg0 % 2147483648.0 && !(arg0 === true || arg0 === false);
            if (v4 != String) {
                return typeof arg0 == 'number';
            } else {
                return arg0 === true || arg0 === false;
              if (v4 != Dynamic) {
                return typeof arg0 == 'string';
              } else {
                return true;
              }
            }
          }
        }
      }
    };

    flash.Boot.getTrace = function () {
      var v2 = flash.Lib.current;
      var v3 = v2.__trace_txt;
      if (v3 == null) {
        v2.createTextField('__trace_txt', 1048500, 0, 0, flash.Stage.width, flash.Stage.height + 30);
        v3 = v2.__trace_txt;
        var v4 = v3.getTextFormat();
        v4.font = '_sans';
        v3.setNewTextFormat(v4);
        v3.selectable = false;
        v3.textColor = flash.Boot.def_color;
        v2.__trace_lines = new Array();
      }
      return v3;
    };

    flash.Boot.__set_trace_color = function (arg0) {
      (flash.Boot.getTrace()).textColor = arg0;
      flash.Boot.def_color = arg0;
    };

    flash.Boot.__trace = function (arg0, arg1) {
      var v4 = flash.Lib.current;
      var v5 = flash.Boot.getTrace();
      var v6 = arg1.fileName + ((arg1.lineNumber == null) ? '' : ':' + arg1.lineNumber) + ': ' + flash.Boot.__string_rec(arg0, '');
      var v7 = v4.__trace_lines.concat(v6.split('\n'));
      v5.text = v7.join('\n');
      for (;;) {
        if (!(v7.length > 1 && v5.textHeight > flash.Stage.height)) break;
        v7.shift();
        v5.text = v7.join('\n');
      }
      v4.__trace_lines = v7;
    };

    flash.Boot.__exc = function (arg0) {
      var v3 = '';
      if (@closure('onerror', flash.Lib) == null) {
        flash.Boot.__trace(flash.Boot.__string_rec(arg0, '') + v3, {'fileName': '(uncaught exception)'});
      } else {
        flash.Lib.onerror(flash.Boot.__string_rec(arg0, ''), []);
      }
    };

    flash.Boot.__clear_trace = function () {
      var v2 = flash.Lib.current;
      v2.__trace_txt.removeTextField();
      v2.__trace_lines = null;
    };

    flash.Boot.__init = function (arg0) {
      var v3 = _global;
      if (!v3.haxeInitDone) {
        v3.haxeInitDone = true;
        Array.prototype.copy = Array.prototype.slice;
        Array.prototype.insert = function (arg0, arg1) {
          this.splice(arg0, 0, arg1);
        };

        Array.prototype.remove = function (arg0) {
          var v3 = 0;
          var v4 = this.length;
          while (v3 < v4) {
            if (this[v3] == arg0) {
              this.splice(v3, 1);
              return true;
            }
            ++v3;
          }
          return false;
        };

        Array.prototype.iterator = function () {
          return {'cur': 0, 'arr': this, 'hasNext': function () {
            return this.cur < this.arr.length;
          }, 'next': function () {
            ++this.cur;
            return this.arr[this.cur];
          }};
        };

        _global.ASSetPropFlags(Array.prototype, null, 7);
        var cca = String.prototype.charCodeAt;
        String.prototype.cca = cca;
        String.prototype.charCodeAt = function (arg0) {
          var v3 = cca.call(this, arg0);
          if (v3 <= 0) {
            return null;
          }
          return v3;
        };

        if (_global.flash == null) {
          _global.flash = {};
        }
      }
      arg0.flash.Lib._global = _global;
      arg0.flash.Lib._root = _root;
      arg0.flash.Lib.current = arg0;
      arg0.@instanceof = flash.Boot.__instanceof;
      arg0.@closure = flash.Boot.__closure;
      if (_global.Stage.align != '') {
        null;
      } else {
        _global.Stage.align = 'LT';
      }
    };

    v1 = new Object();
    flash._MovieClip = v1;
    v2 = _global.flash._MovieClip;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    StringTools = function () {};

    StringTools.__name__ = ['StringTools'];
    v1 = StringTools.prototype;
    v1.__class__ = StringTools;
    v1.__class__.urlEncode = function (arg0) {
      return _global.escape(arg0);
    };

    v1.__class__.urlDecode = function (arg0) {
      return _global.unescape(arg0);
    };

    v1.__class__.htmlEscape = function (arg0) {
      return (((((arg0.split('&')).join('&amp;')).split('<')).join('&lt;')).split('>')).join('&gt;');
    };

    v1.__class__.htmlUnescape = function (arg0) {
      return (((((arg0.split('&gt;')).join('>')).split('&lt;')).join('<')).split('&amp;')).join('&');
    };

    v1.__class__.startsWith = function (arg0, arg1) {
      return arg0.length >= arg1.length && arg0.substr(0, arg1.length) == arg1;
    };

    v1.__class__.endsWith = function (arg0, arg1) {
      var v4 = arg1.length;
      var v5 = arg0.length;
      return v5 >= v4 && arg0.substr(v5 - v4, v4) == arg1;
    };

    v1.__class__.isSpace = function (arg0, arg1) {
      var v4 = arg0.charCodeAt(arg1);
      return v4 >= 9 && v4 <= 13 || v4 == 32;
    };

    v1.__class__.ltrim = function (arg0) {
      var v3 = arg0.length;
      var v4 = 0;
      for (;;) {
        if (!(v4 < v3 && StringTools.isSpace(arg0, v4))) break;
        ++v4;
      }
      if (v4 <= 0) {
        return arg0;
      } else {
        return arg0.substr(v4, v3 - v4);
      }
    };

    v1.__class__.rtrim = function (arg0) {
      var v3 = arg0.length;
      var v4 = 0;
      for (;;) {
        if (!(v4 < v3 && StringTools.isSpace(arg0, v3 - v4 - 1))) break;
        ++v4;
      }
      if (v4 <= 0) {
        return arg0;
      } else {
        return arg0.substr(0, v3 - v4);
      }
    };

    v1.__class__.trim = function (arg0) {
      return StringTools.ltrim(StringTools.rtrim(arg0));
    };

    v1.__class__.rpad = function (arg0, arg1, arg2) {
      var v5 = arg0.length;
      var v6 = arg1.length;
      while (v5 < arg2) {
        if (arg2 - v5 >= v6) {
          arg0 += arg1;
          v5 += v6;
        } else {
          arg0 += arg1.substr(0, arg2 - v5);
          v5 = arg2;
        }
      }
      return arg0;
    };

    v1.__class__.lpad = function (arg0, arg1, arg2) {
      var v5 = '';
      var v6 = arg0.length;
      if (v6 >= arg2) {
        return arg0;
      }
      var v7 = arg1.length;
      while (v6 < arg2) {
        if (arg2 - v6 >= v7) {
          v5 += arg1;
          v6 += v7;
        } else {
          v5 += arg1.substr(0, arg2 - v6);
          v6 = arg2;
        }
      }
      return v5 + arg0;
    };

    v1.__class__.replace = function (arg0, arg1, arg2) {
      return (arg0.split(arg1)).join(arg2);
    };

    v1.__class__.hex = function (arg0, arg1) {
      var v4 = false;
      if (arg0 < 0) {
        v4 = true;
        arg0 = -arg0;
      }
      var v5 = arg0.toString(16);
      v5 = v5.toUpperCase();
      if (arg1 != null) {
        while (v5.length < arg1) {
          v5 = '0' + v5;
        }
      }
      if (v4) {
        v5 = '-' + v5;
      }
      return v5;
    };

    Reflect = function () {};

    Reflect.__name__ = ['Reflect'];
    v1 = Reflect.prototype;
    v1.__class__ = Reflect;
    v1.__class__.hasField = function (arg0, arg1) {
      return this.hasOwnProperty.call(arg0, arg1);
    };

    v1.__class__.field = function (arg0, arg1) {
      return arg0[arg1];
    };

    v1.__class__.setField = function (arg0, arg1, arg2) {
      arg0[arg1] = arg2;
    };

    v1.__class__.callMethod = function (arg0, arg1, arg2) {
      return arg1.apply(arg0, arg2);
    };

    v1.__class__.fields = function (arg0) {
      if (arg0 == null) {
        return new Array();
      }
      var v4 = new Array();
      // Loop counter not found
for ($somevar in arg0) {
        v4.push(enumerate arg0);
      }
      var v3 = v4;
      v4 = 0;
      while (v4 < v3.length) {
        if (v3.hasOwnProperty.call(arg0, v3[v4])) {
          ++v4;
        } else {
          v3.splice(v4, 1);
        }
      }
      return v3;
    };

    v1.__class__.isFunction = function (arg0) {
      return typeof arg0 == 'function' && arg0.__name__ == null;
    };

    v1.__class__.compare = function (arg0, arg1) {
      return (arg0 == arg1) ? 0 : (arg0 > arg1 ? 1 : -1);
    };

    v1.__class__.compareMethods = function (arg0, arg1) {
      if (arg0 == arg1) {
        return true;
      }
      if (!Reflect.isFunction(arg0) || !Reflect.isFunction(arg1)) {
        return false;
      }
      return arg0.f == arg1.f && (arg0.o == arg1.o && arg0.f != null);
    };

    v1.__class__.isObject = function (arg0) {
      var v3 = typeof arg0;
      return v3 == 'string' || (v3 == 'object' && !arg0.__enum__ || v3 == 'function' && arg0.__name__ != null);
    };

    v1.__class__.deleteField = function (arg0, arg1) {
      if (this.hasOwnProperty.call(arg0, arg1) != true) {
        return false;
      }
      delete arg0[arg1];
      return true;
    };

    v1.__class__.copy = function (arg0) {
      var v3 = {};
      var v4 = 0;
      var v5 = Reflect.fields(arg0);
      while (v4 < v5.length) {
        var v6 = v5[v4];
        ++v4;
        v3[v6] = arg0[v6];
      }
      return v3;
    };

    v1.__class__.makeVarArgs = function (f) {
      return function () {
        return f(arguments);
      };
    };

    v1 = new Object();
    mt = v1;
    v2 = _global.mt;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    mt.DepthManager = function (arg0) {
      this.root_mc = arg0;
      this.plans = new Array();
    };

    mt.DepthManager.__name__ = ['mt', 'DepthManager'];
    v1 = mt.DepthManager.prototype;
    v1.__class__ = mt.DepthManager;
    v1.attach = function (arg0, arg1) {
      var v4 = this.getPlan(arg1);
      var v5 = v4.tbl;
      var v6 = v4.cur;
      if (v6 == 1000) {
        this.compact(arg1);
        return this.attach(arg0, arg1);
      }
      ++mt.DepthManager.INST_COUNTER;
      var v7 = arg0 + '@' + mt.DepthManager.INST_COUNTER;
      var v8 = this.root_mc.attachMovie(arg0, v7, v6 + arg1 * 1000, null);
      v5[v6] = v8;
      v4.cur = v6 + 1;
      return v8;
    };

    v1.attachBitmap = function (arg0, arg1) {
      var v4 = this.getPlan(arg1);
      var v5 = v4.tbl;
      var v6 = v4.cur;
      if (v6 == 1000) {
        this.compact(arg1);
        this.attachBitmap(arg0, arg1);
        return undefined;
      }
      this.root_mc.attachBitmap(arg0, v6 + arg1 * 1000);
      v5[v6] = null;
      v4.cur = v6 + 1;
    };

    v1.clear = function (arg0) {
      var v3 = this.getPlan(arg0);
      var v4 = v3.tbl;
      var v5 = 0;
      var v6 = v3.cur;
      while (v5 < v6) {
        ++v5;
        var v7 = v5;
        v4[v7].removeMovieClip();
      }
      v3.cur = 0;
    };

    v1.compact = function (arg0) {
      var v3 = this.plans[arg0];
      var v4 = v3.tbl;
      var v5 = 0;
      var v6 = arg0 * 1000;
      var v7 = 0;
      var v8 = v3.cur;
      while (v7 < v8) {
        ++v7;
        var v9 = v7;
        if (v4[v9]._name != null) {
          v4[v9].swapDepths(v6 + v5);
          v4[v5] = v4[v9];
          ++v5;
        }
      }
      v3.cur = v5;
    };

    v1.destroy = function () {
      var v2 = 0;
      var v3 = this.plans.length;
      while (v2 < v3) {
        ++v2;
        var v4 = v2;
        this.clear(v4);
      }
    };

    v1.empty = function (arg0) {
      var v3 = this.getPlan(arg0);
      var v4 = v3.tbl;
      var v5 = v3.cur;
      if (v5 == 1000) {
        this.compact(arg0);
        return this.empty(arg0);
      }
      ++mt.DepthManager.INST_COUNTER;
      var v6 = 'empty@' + mt.DepthManager.INST_COUNTER;
      var v7 = this.root_mc.createEmptyMovieClip(v6, v5 + arg0 * 1000);
      v4[v5] = v7;
      v3.cur = v5 + 1;
      return v7;
    };

    v1.getMC = function () {
      return this.root_mc;
    };

    v1.getPlan = function (arg0) {
      var v3 = this.plans[arg0];
      if (v3 == null) {
        v3 = {'tbl': new Array(), 'cur': 0};
        this.plans[arg0] = v3;
      }
      return v3;
    };

    v1.over = function (arg0) {
      var v3 = arg0.getDepth();
      var v4 = Math.floor(v3 / 1000);
      var v5 = this.getPlan(v4);
      var v6 = v5.tbl;
      var v7 = v3 % 1000;
      if (v6[v7] == arg0) {
        v6[v7] = null;
        if (v5.cur == 1000) {
          this.compact(v4);
        }
        v3 = v5.cur;
        ++v5.cur;
        arg0.swapDepths(v3 + v4 * 1000);
        v6[v3] = arg0;
      }
    };

    v1.plans = null;
    v1.reserve = function (arg0, arg1) {
      var v4 = this.getPlan(arg1);
      var v5 = v4.tbl;
      var v6 = v4.cur;
      if (v6 == 1000) {
        this.compact(arg1);
        return this.reserve(arg0, arg1);
      }
      v5[v6] = arg0;
      v4.cur = v6 + 1;
      return v6 + arg1 * 1000;
    };

    v1.root_mc = null;
    v1.swap = function (arg0, arg1) {
      var v4 = Math.floor(arg0.getDepth() / 1000);
      if (v4 == arg1) {
        return undefined;
      }
      var v5 = this.getPlan(v4);
      var v6 = v5.tbl;
      var v7 = 0;
      var v8 = v5.cur;
      while (v7 < v8) {
        ++v7;
        var v9 = v7;
        if (v6[v9] == arg0) {
          v6[v9] = null;
          break;
        }
      }
      arg0.swapDepths(this.reserve(arg0, arg1));
    };

    v1.under = function (arg0) {
      var v3 = arg0.getDepth();
      var v4 = Math.floor(v3 / 1000);
      var v5 = this.getPlan(v4);
      var v6 = v5.tbl;
      var v7 = v3 % 1000;
      if (v6[v7] == arg0) {
        v6[v7] = null;
        v6.unshift(arg0);
        ++v5.cur;
        this.compact(v4);
      }
    };

    v1.ysort = function (arg0) {
      var v3 = this.getPlan(arg0);
      var v4 = v3.tbl;
      var v5 = v3.cur;
      var v6 = -99999999;
      var v7 = 0;
      while (v7 < v5) {
        ++v7;
        var v8 = v7;
        var v9 = v4[v8];
        var v10 = v9._y;
        if (v10 < v6) {
          var v11 = v8;
          while (v11 > 0) {
            var v12 = v4[v11 - 1];
            if (v12._y <= v10) {
              v4[v11] = v9;
              break;
            } else {
              v4[v11] = v12;
              v9.swapDepths(v12);
            }
            --v11;
          }
          if (v11 == 0) {
            v4[0] = v9;
          }
        } else {
          v6 = v10;
        }
      }
    };

    v1 = new Object();
    flash.filters = v1;
    v2 = _global.flash.filters;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.text = v1;
    v2 = _global.flash.text;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    haxe = v1;
    v2 = _global.haxe;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    haxe.Log = function () {};

    haxe.Log.__name__ = ['haxe', 'Log'];
    v1 = haxe.Log.prototype;
    v1.__class__ = haxe.Log;
    haxe.Log.trace = function (arg0, arg1) {
      flash.Boot.__trace(arg0, arg1);
    };

    haxe.Log.clear = function () {
      flash.Boot.__clear_trace();
    };

    haxe.Log.setColor = function (arg0) {
      flash.Boot.__set_trace_color(arg0);
    };

    v1 = new Object();
    flash.geom = v1;
    v2 = _global.flash.geom;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    haxe.Firebug = function () {};

    haxe.Firebug.__name__ = ['haxe', 'Firebug'];
    v1 = haxe.Firebug.prototype;
    v1.__class__ = haxe.Firebug;
    haxe.Firebug.detect = function () {
      if (!flash.external.ExternalInterface.available) {
        return false;
      }
      return flash.external.ExternalInterface.call('console.error.toString') != null;
    };

    haxe.Firebug.redirectTraces = function () {
      haxe.Log.trace = @closure('trace', haxe.Firebug);
      flash.Lib.setErrorHandler(@closure('onError', haxe.Firebug));
    };

    haxe.Firebug.onError = function (arg0, arg1) {
      var v4 = arg0 + '\n';
      var v5 = 0;
      while (v5 < arg1.length) {
        var v6 = arg1[v5];
        ++v5;
        v4 += 'Called from ' + v6 + '\n';
      }
      haxe.Firebug.trace(v4, null);
    };

    haxe.Firebug.trace = function (arg0, arg1) {
      var v4 = (arg1 != null && arg1.customParams != null) ? arg1.customParams[0] : null;
      if (v4 != 'warn' && (v4 != 'info' && (v4 != 'debug' && v4 != 'error'))) {
        v4 = (arg1 == null) ? 'error' : 'log';
      }
      var v5 = (arg1 == null) ? '' : arg1.fileName + ':' + arg1.lineNumber + ' : ';
      try {
        v5 += Std.string(arg0);
      }
      catch (v0) {
        var v6 = v0;
        v5 += '????';
      }
      v5 = (((((((v5.split('\\')).join('\\\\')).split('\'')).join('\\\'')).split('\n')).join('\\n')).split('\r')).join('\\r');
      v5 = StringTools.urlEncode(v5);
      v6 = 'javascript:console.' + v4 + '(\'' + v5 + '\');';
      flash.Lib.getURL(v6);
    };

    IntIter = function (arg0, arg1) {
      this.min = arg0;
      this.max = arg1;
    };

    IntIter.__name__ = ['IntIter'];
    v1 = IntIter.prototype;
    v1.__class__ = IntIter;
    v1.hasNext = function () {
      return this.min < this.max;
    };

    v1.max = null;
    v1.min = null;
    v1.next = function () {
      ++this.min;
      return this.min;
    };

    Std = function () {};

    Std.__name__ = ['Std'];
    v1 = Std.prototype;
    v1.__class__ = Std;
    v1.__class__.is = function (arg0, arg1) {
      return flash.Boot.__instanceof(arg0, arg1);
    };

    v1.__class__.string = function (arg0) {
      return flash.Boot.__string_rec(arg0, '');
    };

    v1.__class__.int = function (arg0) {
      if (arg0 < 0) {
        return Math.ceil(arg0);
      }
      return Math.floor(arg0);
    };

    v1.__class__.parseInt = function (arg0) {
      var v3 = _global.parseInt(arg0);
      if (Math.isNaN(v3)) {
        return null;
      }
      return v3;
    };

    v1.__class__.parseFloat = function (arg0) {
      return _global.parseFloat(arg0);
    };

    v1.__class__.random = function (arg0) {
      return random(arg0);
    };

    ValueType = new Object();
    ValueType.__ename__ = ['ValueType'];
    ValueType.__constructs__ = ['TNull', 'TInt', 'TFloat', 'TBool', 'TObject', 'TFunction', 'TClass', 'TEnum', 'TUnknown'];
    ['TBool', 3].__enum__ = ValueType;
    ['TBool', 3].toString = @estr;
    ValueType.TBool = ['TBool', 3];
    ['TBool', 3].__enum__.TClass = function (arg0) {
      ['TClass', 6, arg0].__enum__ = this;
      ['TClass', 6, arg0].toString = @estr;
      return ['TClass', 6, arg0];
    };

    ['TBool', 3].__enum__.TEnum = function (arg0) {
      ['TEnum', 7, arg0].__enum__ = this;
      ['TEnum', 7, arg0].toString = @estr;
      return ['TEnum', 7, arg0];
    };

    ['TFloat', 2].__enum__ = ['TBool', 3].__enum__;
    ['TFloat', 2].toString = @estr;
    ['TBool', 3].__enum__.TFloat = ['TFloat', 2];
    ['TFunction', 5].__enum__ = ['TBool', 3].__enum__;
    ['TFunction', 5].toString = @estr;
    ['TBool', 3].__enum__.TFunction = ['TFunction', 5];
    ['TInt', 1].__enum__ = ['TBool', 3].__enum__;
    ['TInt', 1].toString = @estr;
    ['TBool', 3].__enum__.TInt = ['TInt', 1];
    ['TNull', 0].__enum__ = ['TBool', 3].__enum__;
    ['TNull', 0].toString = @estr;
    ['TBool', 3].__enum__.TNull = ['TNull', 0];
    ['TObject', 4].__enum__ = ['TBool', 3].__enum__;
    ['TObject', 4].toString = @estr;
    ['TBool', 3].__enum__.TObject = ['TObject', 4];
    ['TUnknown', 8].__enum__ = ['TBool', 3].__enum__;
    ['TUnknown', 8].toString = @estr;
    ['TBool', 3].__enum__.TUnknown = ['TUnknown', 8];
    Type = function () {};

    Type.__name__ = ['Type'];
    v1 = Type.prototype;
    v1.__class__ = Type;
    v1.__class__.getClass = function (arg0) {
      if (arg0.__enum__ != null) {
        return null;
      }
      return arg0.__class__;
    };

    v1.__class__.getEnum = function (arg0) {
      return arg0.__enum__;
    };

    v1.__class__.getSuperClass = function (arg0) {
      return arg0.__super__;
    };

    v1.__class__.getClassName = function (arg0) {
      if (arg0 == null) {
        return null;
      }
      var v3 = arg0.__name__;
      return v3.join('.');
    };

    v1.__class__.getEnumName = function (arg0) {
      var v3 = arg0.__ename__;
      return v3.join('.');
    };

    v1.__class__.resolveClass = function (arg0) {
      var v3 = eval(arg0);
      if (v3 == null || v3.__name__ == null) {
        return null;
      }
      return v3;
    };

    v1.__class__.resolveEnum = function (arg0) {
      var v3 = eval(arg0);
      if (v3 == null || v3.__ename__ == null) {
        return null;
      }
      return v3;
    };

    v1.__class__.createInstance = function (arg0, arg1) {
      if (arg0 == Array) {
        return new Array();
      }
      var v4 = {'__constructor__': arg0, '__proto__': arg0.prototype};
      arg0.apply(v4, arg1);
      return v4;
    };

    v1.__class__.createEmptyInstance = function (arg0) {
      if (arg0 == Array) {
        return new Array();
      }
      var v3 = new _global.Object();
      v3.__proto__ = arg0.prototype;
      return v3;
    };

    v1.__class__.createEnum = function (arg0, arg1, arg2) {
      var v5 = arg0[arg1];
      if (v5 == null) {
        throw 'No such constructor ' + arg1;
      }
      if (Reflect.isFunction(v5)) {
        if (arg2 == null) {
          throw 'Constructor ' + arg1 + ' need parameters';
        }
        return v5.apply(arg0, arg2);
      }
      if (arg2 != null && arg2.length != 0) {
        throw 'Constructor ' + arg1 + ' does not need parameters';
      }
      return v5;
    };

    v1.__class__.getInstanceFields = function (arg0) {
      var v3 = Reflect.fields(arg0.prototype);
      arg0 = arg0.__super__;
      while (arg0 != null) {
        var v4 = 0;
        var v5 = Reflect.fields(arg0.prototype);
        while (v4 < v5.length) {
          var v6 = v5[v4];
          ++v4;
          v3.remove(v6);
          v3.push(v6);
        }
        arg0 = arg0.__super__;
      }
      v3.remove('__class__');
      return v3;
    };

    v1.__class__.getClassFields = function (arg0) {
      var v3 = Reflect.fields(arg0);
      v3.remove('__name__');
      v3.remove('__interfaces__');
      v3.remove('__super__');
      return v3;
    };

    v1.__class__.getEnumConstructs = function (arg0) {
      return arg0.__constructs__;
    };

    v1.__class__.typeof = function (arg0) {
      var v3 = typeof arg0;
      if (v3 != 'null') {
      } else {
        if (v3 != 'boolean') {
        } else {
          if (v3 != 'string') {
          } else {
            if (v3 != 'number') {
                    return ValueType.TUnknown;
            } else {
                    return ValueType.TNull;
              if (v3 != 'object') {
                    return ValueType.TBool;
              } else {
                    return ValueType.TClass(String);
                if (v3 != 'function') {
                    if (Math.ceil(arg0) == arg0 % 2147483648.0) {
                      return ValueType.TInt;
                    }
                    return ValueType.TFloat;
                } else {
                    var v4 = arg0.__enum__;
                    if (v4 != null) {
                      return ValueType.TEnum(v4);
                    }
                    var v5 = arg0.__class__;
                    if (v5 != null) {
                      return ValueType.TClass(v5);
                    }
                    return ValueType.TObject;
                  if (v3 != 'undefined') {
                    if (arg0.__name__ != null) {
                      return ValueType.TObject;
                    }
                    return ValueType.TFunction;
                  } else {
                    return ValueType.TNull;
                  }
                }
              }
            }
          }
        }
      }
    };

    v1.__class__.enumEq = function (arg0, arg1) {
      if (arg0 == arg1) {
        return true;
      }
      if (arg0[0] != arg1[0]) {
        return false;
      }
      var v4 = 2;
      var v5 = arg0.length;
      while (v4 < v5) {
        ++v4;
        var v6 = v4;
        if (!Type.enumEq(arg0[v6], arg1[v6])) {
          return false;
        }
      }
      v4 = arg0.__enum__;
      if (v4 != arg1.__enum__ || v4 == null) {
        return false;
      }
      return true;
    };

    v1.__class__.enumConstructor = function (arg0) {
      return arg0[0];
    };

    v1.__class__.enumParameters = function (arg0) {
      return arg0.slice(2);
    };

    v1.__class__.enumIndex = function (arg0) {
      return arg0[1];
    };

    Fader = function () {
      this.flLock = false;
      this.flf = true;
      Fader.inst = this;
      this.imgUrl = new Array();
      this.dm = new mt.DepthManager(flash.Lib.current);
      this.bitmap = new flash.display.BitmapData(Fader.W, Fader.H, true, 0);
      this.root = this.dm.empty(0);
      this.currMC = this.dm.empty(1);
      this.mask = this.dm.empty(4);
      this.mask._alpha = 100;
      this.mask._x = 0;
      this.mask._y = 0;
      this.osci = 0;
      this.mask.beginFill(65280);
      this.mask.moveTo(0, 0);
      this.mask.lineTo(0, Fader.H);
      this.mask.lineTo(Fader.W, Fader.H);
      this.mask.lineTo(Fader.W, 0);
      this.mask.lineTo(0, 0);
      this.mask.endFill();
      this.mask._alpha = 1;
      this.castShadow = new flash.filters.DropShadowFilter();
      this.castShadow.angle = 45;
      this.castShadow.distance = 8;
      this.castShadow.color = 11246638;
      this.castShadow.alpha = 0.6;
      this.castShadow.blurX = 6;
      this.castShadow.blurY = 6;
      this.castShadow.strength = 1;
      this.border = new flash.filters.DropShadowFilter();
      this.border.angle = 90;
      this.border.distance = 0;
      this.border.color = 14013909;
      this.border.alpha = 1;
      this.border.blurX = 0;
      this.border.blurY = 0;
      this.border.strength = 1;
      this.bigShadow = new flash.filters.DropShadowFilter();
      this.bigShadow.angle = 45;
      this.bigShadow.distance = 0;
      this.bigShadow.color = 1392196;
      this.bigShadow.alpha = 0;
      this.bigShadow.blurX = 0;
      this.bigShadow.blurY = 0;
      this.bigShadow.strength = 1;
      this.cadre = this.dm.empty(2);
      this.snap = this.dm.empty(3);
      this.bitmap = new flash.display.BitmapData(Fader.W, Fader.H, true, 0);
      this.snap.attachBitmap(this.bitmap, 2);
      if (flash.Lib._root.domain != null) {
        this.domain = flash.Lib._root.domain;
      }
      this.currentImg = 0;
      this.loadStep = 0;
      this.init();
      flash.Lib._root.onEnterFrame = @closure('mainLoop', this);
    };

    Fader.__name__ = ['Fader'];
    v1 = Fader.prototype;
    v1.__class__ = Fader;
    v1.__class__.inst = null;
    v1.__class__.main = function () {
      if (haxe.Firebug.detect()) {
        haxe.Firebug.redirectTraces();
      }
      var v2 = new Fader();
    };

    v1.bigShadow = null;
    v1.bitmap = null;
    v1.bitmapMe = function () {
      if (this.currMC._width <= Fader.W) {
        var v2 = Std.parseInt('' + this.currMC._width);
      } else {
        var v2 = Fader.W;
      }
      if (this.currMC._height <= Fader.H) {
        var v3 = Std.parseInt('' + this.currMC._height);
      } else {
        var v3 = Fader.H;
      }
      this.bitmap.dispose();
      this.bitmap = new flash.display.BitmapData(v2, v3, true, 0);
      this.snap.attachBitmap(this.bitmap, 2);
      var v4 = new flash.geom.Matrix();
      this.bitmap.draw(this.currMC, v4);
      this.bitmap.draw(this.cadre, v4);
      this.snap._alpha = 100;
      this.snap._rotation = 0;
      this.snap._y = this.currMC._y;
      this.snap._x = this.currMC._x;
      this.snap._yscale = 100;
      this.snap._xscale = 100;
      this.snap.filters = [this.border];
    };

    v1.border = null;
    v1.cadre = null;
    v1.castShadow = null;
    v1.currMC = null;
    v1.currentImg = null;
    v1.displayImg = function () {
      this.flLock = true;
    };

    v1.dm = null;
    v1.domain = null;
    v1.drawCanvas = function () {
      var v2 = 4;
      var v3 = 16777215;
      var v4 = 10;
      this.cadre.removeMovieClip();
      this.cadre = this.dm.empty(2);
      if (this.currMC._width != 0) {
        if (!(this.currMC._width > Fader.W || this.currMC._height > Fader.H)) {
          this.drawTwisted(this.cadre, v2, v3, v4, this.currMC._height, this.currMC._width);
          var v5 = Std.parseInt('' + (Fader.W - this.currMC._width) / 2);
          var v6 = Std.parseInt('' + (Fader.H - this.currMC._height) / 2);
          this.cadre._x = v5;
          this.cadre._y = v6;
          this.currMC._x = v5;
          this.currMC._y = v6;
        } else {
          this.drawTwisted(this.cadre, v2, v3, v4, Fader.H, Fader.W);
          this.cadre._x = 0;
          this.cadre._y = 0;
          this.currMC._x = 0;
          this.currMC._y = 0;
        }
      }
    };

    v1.drawTwisted = function (arg0, arg1, arg2, arg3, arg4, arg5) {
      arg0.lineStyle(arg1, arg2, 100, null, 'none', 'square', 'miter', 8);
      arg0.moveTo(arg1 / 2, arg1 / 2);
      arg0.lineTo(arg1 / 2, this.currMC._height - arg1 / 2);
      arg0.lineTo(this.currMC._width - arg1 / 2, this.currMC._height - arg1 / 2);
      arg0.lineTo(this.currMC._width - arg1 / 2, arg1 / 2);
      arg0.lineTo(arg1 / 2, arg1 / 2);
    };

    v1.flLock = null;
    v1.flf = null;
    v1.imgUrl = null;
    v1.init = function () {
      if (flash.Lib._root.timeBase == null) {
        this.timeBase = Fader.TIMER;
      } else {
        this.timeBase = Std.parseInt(flash.Lib._root.timeBase);
      }
      if (flash.Lib._root.images != null) {
        this.imgUrl = flash.Lib._root.images.split(';');
        this.loadIMG(this.imgUrl[this.currentImg]);
      }
      this.timer = this.timeBase;
    };

    v1.loadIMG = function (arg0) {
      if (!this.flf) {
        this.bitmapMe();
      } else {
        this.flLock = false;
        this.flf = false;
      }
      if (this.domain != null && arg0.indexOf('http://') == -1) {
        arg0 = this.domain + arg0;
      }
      var me = this;
      this.loader = new flash.MovieClipLoader();
      this.loader.onLoadComplete = @closure('nextStep', this);
      this.loader.onLoadInit = @closure('nextStep', this);
      this.loader.onLoadProgress = function (arg0, arg1, arg2) {
        me.onImgProgress(arg1, arg2);
      };

      this.loader.onLoadError = function (arg0, arg1) {
        me.onLogoError(arg1);
      };

      this.loader.loadClip(arg0, this.currMC);
    };

    v1.loadStep = null;
    v1.loader = null;
    v1.mainLoop = function () {
      if (this.flLock) {
        this.currMC._alpha = 100;
        if (this.snap._yscale <= 0) {
          this.flLock = false;
          this.osci = 0;
          this.border.distance = 0;
        } else {
          this.osci += Fader.RAD / 100;
          var v2 = Math.cos(this.osci % Fader.RAD);
          this.snap._y += 20 - v2 * 20;
          this.snap._yscale = v2 * 100;
          this.snap._xscale = 50 + v2 * 50;
          this.snap._rotation -= 1.5;
          this.snap._alpha = v2 * 100;
          this.bigShadow.angle = 45;
          this.bigShadow.distance = 30 - v2 * 30;
          this.bigShadow.alpha = v2 - 0.4;
          this.bigShadow.blurX = 4 - v2 * 4;
          this.bigShadow.blurY = 4 - v2 * 4;
          this.snap.filters = [this.bigShadow];
          mt.bumdum.Col.setPercentColor(this.currMC, Math.round(v2 * 100), 16777215);
        }
      } else {
        if (this.timer <= 0) {
          if (this.currentImg >= this.imgUrl.length - 2) {
            this.currentImg = 0;
          } else {
            ++this.currentImg;
          }
          this.loadIMG(this.imgUrl[this.currentImg]);
          this.timer = this.timeBase;
        } else {
          --this.timer;
        }
      }
    };

    v1.mask = null;
    v1.maskMe = function () {
      if (this.currMC._width > Fader.W || this.currMC._height > Fader.H) {
        this.mask._visible = true;
        this.currMC.setMask(this.mask);
      }
    };

    v1.nextStep = function (arg0) {
      ++this.loadStep;
      if (this.loadStep >= 2) {
        this.onLoadImg();
        this.loadStep = 0;
      }
    };

    v1.onImgProgress = function (arg0, arg1) {
      this.progress(arg0 / arg1);
    };

    v1.onLoadImg = function () {
      this.progress(null);
      this.currMC._alpha = 0;
      this.maskMe();
      this.shadow();
      this.drawCanvas();
      this.displayImg();
    };

    v1.onLogoError = function (arg0) {
      ++this.currentImg;
      this.loadIMG(this.imgUrl[this.currentImg]);
      this.timer = this.timeBase;
    };

    v1.osci = null;
    v1.pbar = null;
    v1.progress = function (arg0) {
      if (arg0 == null || arg0 >= 1) {
        this.pbar.removeMovieClip();
        return undefined;
      }
      if (this.pbar._name == null) {
        this.pbar = this.dm.attach('progress_bar', 10);
        this.pbar._x = 390;
        this.pbar._y = 10;
        this.pbar._alpha = 0;
        var v3 = new flash.filters.GlowFilter();
        v3.blurX = 2;
        v3.blurY = 2;
        v3.strength = 100;
        v3.color = 0;
        this.pbar.filters = [v3];
      }
      this.pbar.bar._xscale = arg0 * 100;
    };

    v1.root = null;
    v1.shadow = function () {
      this.currMC.filters = [this.castShadow];
    };

    v1.snap = null;
    v1.timeBase = null;
    v1.timer = null;
    v1 = new Object();
    mt.bumdum = v1;
    v2 = _global.mt.bumdum;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    mt.bumdum.En = function () {};

    mt.bumdum.En.__name__ = ['mt', 'bumdum', 'En'];
    v1 = mt.bumdum.En.prototype;
    v1.__class__ = mt.bumdum.En;
    mt.bumdum.En.index = function (arg0) {
      return arg0[1];
    };

    mt.bumdum.En.get = function (arg0, arg1, arg2) {
      return Type.createEnum(arg0, (Type.getEnumConstructs(arg0))[arg1], arg2);
    };

    mt.bumdum.Num = function () {};

    mt.bumdum.Num.__name__ = ['mt', 'bumdum', 'Num'];
    v1 = mt.bumdum.Num.prototype;
    v1.__class__ = mt.bumdum.Num;
    mt.bumdum.Num.mm = function (arg0, arg1, arg2) {
      return Math.min(Math.max(arg0, arg1), arg2);
    };

    mt.bumdum.Num.sMod = function (arg0, arg1) {
      if (arg1 == 0 || (arg1 == null || arg0 == null)) {
        return null;
      }
      while (arg0 >= arg1) {
        arg0 -= arg1;
      }
      while (arg0 < 0) {
        arg0 += arg1;
      }
      return arg0;
    };

    mt.bumdum.Num.hMod = function (arg0, arg1) {
      if (arg1 == 0 || (arg1 == null || arg0 == null)) {
        return null;
      }
      while (arg0 > arg1) {
        arg0 -= arg1 * 2;
      }
      while (arg0 < -arg1) {
        arg0 += arg1 * 2;
      }
      return arg0;
    };

    mt.bumdum.Num.rnd = function (arg0, arg1) {
      return Std.int(Math.pow(Math.random(), arg1) * arg0);
    };

    mt.bumdum.Geom = function () {};

    mt.bumdum.Geom.__name__ = ['mt', 'bumdum', 'Geom'];
    v1 = mt.bumdum.Geom.prototype;
    v1.__class__ = mt.bumdum.Geom;
    mt.bumdum.Geom.getDist = function (arg0, arg1) {
      var v4 = arg0.x - arg1.x;
      var v5 = arg0.y - arg1.y;
      return Math.sqrt(v4 * v4 + v5 * v5);
    };

    mt.bumdum.Geom.getAng = function (arg0, arg1) {
      var v4 = arg0.x - arg1.x;
      var v5 = arg0.y - arg1.y;
      return Math.atan2(v5, v4);
    };

    mt.bumdum.Geom.getParentCoord = function (arg0, arg1) {
      var v4 = null;
      var v5 = 0;
      var v6 = arg0._x;
      var v7 = arg0._y;
      while (true) {
        v4 = arg0._parent;
        if (v4._rotation != 0) {
          var v8 = Math.sqrt(v6 * v6 + v7 * v7);
          var v9 = Math.atan2(v7, v6);
          v9 += v4._rotation * 0.0174;
          v6 = Math.cos(v9) * v8;
          v7 = Math.sin(v9) * v8;
        }
        v6 *= v4._xscale * 0.01;
        v7 *= v4._yscale * 0.01;
        v6 += v4._x;
        v7 += v4._y;
        if (v4 == arg1 || v4 == flash.Lib._root) {
          return {'x': v6, 'y': v7};
        }
        arg0 = v4;
        ++v5;
        if (v5 > 20) {
          haxe.Log.trace('GET PARENT COORD ERROR', {'fileName': 'Lib.hx', 'lineNumber': 81, 'className': 'mt.bumdum.Geom', 'methodName': 'getParentCoord'});
          break;
        }
      }
      return null;
    };

    mt.bumdum.Col = function () {};

    mt.bumdum.Col.__name__ = ['mt', 'bumdum', 'Col'];
    v1 = mt.bumdum.Col.prototype;
    v1.__class__ = mt.bumdum.Col;
    mt.bumdum.Col.colToObj = function (arg0) {
      return {'r': arg0 >> 16, 'g': arg0 >> 8 & 255, 'b': arg0 & 255};
    };

    mt.bumdum.Col.objToCol = function (arg0) {
      return arg0.r << 16 | arg0.g << 8 | arg0.b;
    };

    mt.bumdum.Col.colToObj32 = function (arg0) {
      return {'a': arg0 >>> 24, 'r': arg0 >> 16 & 255, 'g': arg0 >> 8 & 255, 'b': arg0 & 255};
    };

    mt.bumdum.Col.objToCol32 = function (arg0) {
      return arg0.a << 24 | arg0.r << 16 | arg0.g << 8 | arg0.b;
    };

    mt.bumdum.Col.setPercentColor = function (arg0, arg1, arg2, arg3) {
      if (arg3 == null) {
        arg3 = 0;
      }
      var v6 = mt.bumdum.Col.colToObj(arg2);
      var v7 = new flash.Color(arg0);
      var v8 = arg1 / 100;
      var v9 = {'_': null};
      var v10 = Std.int(100 - arg1);
      v9.ra = v10;
      v9.ga = v10;
      v9.ba = v10;
      v9.aa = 100;
      v9.rb = Std.int(v8 * v6.r + arg3);
      v9.gb = Std.int(v8 * v6.g + arg3);
      v9.bb = Std.int(v8 * v6.b + arg3);
      v9.ab = 0;
      v7.setTransform(v9);
    };

    mt.bumdum.Col.setColor = function (arg0, arg1, arg2) {
      if (arg2 == null) {
        arg2 = -255;
      }
      var v5 = mt.bumdum.Col.colToObj32(arg1);
      var v6 = new flash.Color(arg0);
      var v7 = {'_': null};
      v7.ra = 100;
      v7.ga = 100;
      v7.ba = 100;
      v7.aa = 100;
      v7.rb = Std.int(v5.r + arg2);
      v7.gb = Std.int(v5.g + arg2);
      v7.bb = Std.int(v5.b + arg2);
      v7.ab = 0;
      v6.setTransform(v7);
    };

    mt.bumdum.Col.mergeCol = function (arg0, arg1, arg2) {
      if (arg2 == null) {
        arg2 = 0.5;
      }
      var v5 = mt.bumdum.Col.colToObj(arg0);
      var v6 = mt.bumdum.Col.colToObj(arg1);
      var v7 = {'r': Std.int(v5.r * arg2 + v6.r * (1 - arg2)), 'g': Std.int(v5.g * arg2 + v6.g * (1 - arg2)), 'b': Std.int(v5.b * arg2 + v6.b * (1 - arg2))};
      return mt.bumdum.Col.objToCol(v7);
    };

    mt.bumdum.Col.mergeCol32 = function (arg0, arg1, arg2) {
      if (arg2 == null) {
        arg2 = 0.5;
      }
      var v5 = mt.bumdum.Col.colToObj32(arg0);
      var v6 = mt.bumdum.Col.colToObj32(arg1);
      var v7 = {'r': Std.int(v5.r * arg2 + v6.r * (1 - arg2)), 'g': Std.int(v5.g * arg2 + v6.g * (1 - arg2)), 'b': Std.int(v5.b * arg2 + v6.b * (1 - arg2)), 'a': Std.int(v5.a * arg2 + v6.a * (1 - arg2))};
      return mt.bumdum.Col.objToCol32(v7);
    };

    mt.bumdum.Col.getRainbow = function (arg0) {
      if (arg0 == null) {
        arg0 = Math.random();
      }
      var v3 = 3;
      var v4 = [0, 0, 0];
      var v5 = (1 / v3) * 2;
      var v6 = 0;
      while (v6 < v3) {
        ++v6;
        var v7 = v6;
        var v8 = v5 + v7 * 2 * v5;
        var v9 = mt.bumdum.Num.hMod(v8 - arg0, 0.5);
        v4[v7] = Math.min(1.5 - Math.abs(v9) * 3, 1);
      }
      return {'r': Std.int(v4[0] * 255), 'g': Std.int(v4[1] * 255), 'b': Std.int(v4[2] * 255)};
    };

    mt.bumdum.Col.shuffle = function (arg0, arg1) {
      var v4 = mt.bumdum.Col.colToObj(arg0);
      v4.r = Std.int(mt.bumdum.Num.mm(0, v4.r + (Math.random() * 2 - 1) * arg1, 255));
      v4.g = Std.int(mt.bumdum.Num.mm(0, v4.g + (Math.random() * 2 - 1) * arg1, 255));
      v4.b = Std.int(mt.bumdum.Num.mm(0, v4.b + (Math.random() * 2 - 1) * arg1, 255));
      return mt.bumdum.Col.objToCol(v4);
    };

    mt.bumdum.Col.getWeb = function (arg0) {
      return '#' + StringTools.hex(arg0);
    };

    mt.bumdum.Str = function () {};

    mt.bumdum.Str.__name__ = ['mt', 'bumdum', 'Str'];
    v1 = mt.bumdum.Str.prototype;
    v1.__class__ = mt.bumdum.Str;
    mt.bumdum.Str.searchAndReplace = function (arg0, arg1, arg2) {
      return (arg0.split(arg1)).join(arg2);
    };

    mt.bumdum.Filt = function () {};

    mt.bumdum.Filt.__name__ = ['mt', 'bumdum', 'Filt'];
    v1 = mt.bumdum.Filt.prototype;
    v1.__class__ = mt.bumdum.Filt;
    mt.bumdum.Filt.glow = function (arg0, arg1, arg2, arg3, arg4) {
      if (arg1 == null) {
        arg1 = 2;
      }
      if (arg2 == null) {
        arg2 = 10;
      }
      if (arg3 == null) {
        arg3 = 0;
      }
      if (arg4 == null) {
        arg4 = false;
      }
      var v7 = new flash.filters.GlowFilter();
      v7.blurX = arg1;
      v7.blurY = arg1;
      v7.strength = arg2;
      v7.color = arg3;
      v7.inner = arg4;
      var v8 = arg0.filters;
      v8.push(v7);
      arg0.filters = v8;
    };

    mt.bumdum.Filt.blur = function (arg0, arg1, arg2) {
      if (arg1 == null) {
        arg1 = 0;
      }
      if (arg2 == null) {
        arg2 = 0;
      }
      var v5 = new flash.filters.BlurFilter();
      v5.blurX = arg1;
      v5.blurY = arg2;
      var v6 = arg0.filters;
      v6.push(v5);
      arg0.filters = v6;
    };

    mt.bumdum.Filt.grey = function (arg0, arg1, arg2, arg3, arg4) {
      if (arg1 == null) {
        arg1 = 1;
      }
      if (arg2 == null) {
        arg2 = 0;
      }
      if (arg3 == null) {
        arg3 = {'r': 0, 'g': 0, 'b': 0};
      }
      var v7 = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
      if (arg4 == null) {
        var v8 = 0.25;
        var v9 = 0.15;
        var v10 = 0.6;
        arg4 = [v8, v9, v10, 0, arg3.r + arg2, v8, v9, v10, 0, arg3.g + arg2, v8, v9, v10, 0, arg3.b + arg2, 0, 0, 0, 1, 0];
      }
      v8 = [];
      v9 = 0;
      v10 = v7.length;
      while (v9 < v10) {
        ++v9;
        var v11 = v9;
        v8[v11] = v7[v11] * (1 - arg1) + arg4[v11] * arg1;
      }
      v9 = new flash.filters.ColorMatrixFilter();
      v9.matrix = v8;
      v10 = arg0.filters;
      v10.push(v9);
      arg0.filters = v10;
    };

    mt.bumdum.Tween = function (arg0, arg1, arg2, arg3) {
      this.sx = arg0;
      this.sy = arg1;
      this.ex = arg2;
      this.ey = arg3;
    };

    mt.bumdum.Tween.__name__ = ['mt', 'bumdum', 'Tween'];
    v1 = mt.bumdum.Tween.prototype;
    v1.__class__ = mt.bumdum.Tween;
    v1.ex = null;
    v1.ey = null;
    v1.getPos = function (arg0) {
      return {'x': this.sx * (1 - arg0) + this.ex * arg0, 'y': this.sy * (1 - arg0) + this.ey * arg0};
    };

    v1.sx = null;
    v1.sy = null;
    flash.Lib = function () {};

    flash.Lib.__name__ = ['flash', 'Lib'];
    v1 = flash.Lib.prototype;
    v1.__class__ = flash.Lib;
    flash.Lib._global = null;
    flash.Lib._root = null;
    flash.Lib.current = null;
    flash.Lib.onerror = null;
    flash.Lib.trace = function (arg0) {
      trace(arg0);
    };

    flash.Lib.eval = function (arg0) {
      return eval(arg0);
    };

    flash.Lib.getURL = function (arg0, arg1) {
      getURL(arg0, (arg1 == null) ? '_self' : arg1);
    };

    flash.Lib.fscommand = function (arg0, arg1) {
      fscommand('' + arg0, (arg1 == null) ? '' : arg1);
    };

    flash.Lib.print = function (arg0, arg1) {
      arg1 = (arg1 == 'bframe' || arg1 == 'bmax') ? 'print:#' + arg1 : 'print:';
      getURL(arg1, arg0);
    };

    flash.Lib.getTimer = function () {
      return getTimer();
    };

    flash.Lib.getVersion = function () {
      return flash.Lib._root.$version;
    };

    flash.Lib.registerClass = function (arg0, arg1) {
      flash.Lib._global.Object.registerClass(arg0, arg1);
    };

    flash.Lib.keys = function (arg0) {
      var v3 = new Array();
      // Loop counter not found
for ($somevar in arg0) {
        v3.push(enumerate arg0);
      }
      return v3;
    };

    flash.Lib.setErrorHandler = function (arg0) {
      flash.Lib.onerror = arg0;
    };

    v1 = new Object();
    flash.external = v1;
    v2 = _global.flash.external;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    @Main = function () {};

    @Main.__name__ = ['@Main'];
    v1 = @Main.prototype;
    v1.__class__ = @Main;
    flash.Boot.__init(this);
    flash.MovieClip = _global.MovieClip;
    flash.TextField = _global.TextField;
    flash.text.StyleSheet = _global.TextField.StyleSheet;
    flash.Color = _global.Color;
    flash.TextFormat = _global.TextFormat;
    var g = _global;
    g.Int = {'__name__': ['Int']};
    g.Bool = {'__ename__': ['Bool']};
    g.Dynamic = {'__name__': ['Dynamic']};
    g.Class = {'__name__': ['Class']};
    g.Enum = {};
    g.Void = {'__ename__': ['Void']};
    g.Float = _global.Number;
    g.Float.__name__ = ['Float'];
    Array.prototype.__class__ = Array;
    Array.__name__ = ['Array'];
    String.prototype.__class__ = String;
    String.__name__ = ['String'];
    g.ASSetPropFlags(Array.prototype, null, 7);
    Math.NaN = Number.NaN;
    Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
    Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
    Math.isFinite = function (arg0) {
      return _global.isFinite(arg0);
    };

    Math.isNaN = function (arg0) {
      return _global.isNaN(arg0);
    };

    Math.__name__ = ['Math'];
    flash.MovieClipLoader = _global.MovieClipLoader;
    flash.Stage = _global.Stage;
    flash.TextSnapshot = _global.TextSnapshot;
    try {
      flash.Boot.def_color = 0;
      flash.Boot.exception = null;
      mt.DepthManager.INST_COUNTER = 0;
      Fader.RAD = 3.14;
      Fader.W = 420;
      Fader.H = 300;
      Fader.TIMER = 40;
      @Main.init = Fader.main();
    }
    catch (flash.Boot) {
      flash.Boot.__exc(flash.Boot);
    }
  }
}
