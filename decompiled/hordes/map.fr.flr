movie 'map.fr.swf' {
// flash 8, total frames: 1, frame rate: 30 fps, 300x300 px, compressed

  movieClip 11 soul {

    frame 1 {
      play();
    }
  }

  movieClip 34 mapTag {
  }

  movieClip 36 alarm {
  }

  movieClip 38 danger {
  }
  
  // unknown tag 88 length 63

  movieClip 43 pathDot {
  }

  movieClip 46 cityArrow {
  }

  movieClip 49 dot {
  }

  movieClip 51 activeBox {
  }
  
  // unknown tag 88 length 97

  movieClip 56 moves {
  }

  movieClip 57 blackMask {
  }

  movieClip 75 mapButton {
  }

  movieClip 77 mapUser {
  }

  movieClip 80  {
  }

  movieClip 88 mapIcon {
  }

  movieClip 91 fx_hallu {
  }

  movieClip 93 fx_scan {
  }

  movieClip 209 building {
  }

  movieClip 211  {
  }
  
  // unknown tag 88 length 63

  movieClip 215 field {
  }

  movieClip 217  {
  }

  movieClip 218 fx_blink {

    frame 19 {
      stop();
      this.removeMovieClip();
    }
  }

  movieClip 225 icons {
  }

  movieClip 228  {
  }

  movieClip 231  {
  }

  movieClip 232  {
  }

  movieClip 235  {
  }

  movieClip 237 arrow {
  }

  movieClip 240 fx_screening {
  }

  movieClip 243 interf {
  }

  movieClip 245 fx_dispMap {
  }

  movieClip 248  {
  }

  movieClip 249 fx_noise {
  }

  movieClip 251 dark {
  }

  movieClip 253 mask {
  }

  movieClip 256 bg {
  }

  frame 1 {
    @estr = function () {
      return flash.Boot.__string_rec(this, 'xx');
    };

    List = function () {
      this.length = 0;
    };

    List.__name__ = ['List'];
    var v1 = List.prototype;
    v1.__class__ = List;
    v1.add = function (arg0) {
      var v3 = [arg0];
      if (this.h != null) {
        this.q[1] = v3;
      } else {
        this.h = v3;
      }
      this.q = v3;
      ++this.length;
    };

    v1.h = null;
    v1.iterator = function () {
      return {'h': this.h, 'hasNext': function () {
        return this.h != null;
      }, 'next': function () {
        if (this.h == null) {
          return null;
        }
        var v2 = this.h[0];
        this.h = this.h[1];
        return v2;
      }};
    };

    v1.length = null;
    v1.q = null;
    v1.remove = function (arg0) {
      var v3 = null;
      var v4 = this.h;
      while (v4 != null) {
        if (v4[0] == arg0) {
          if (v3 != null) {
            v3[1] = v4[1];
          } else {
            this.h = v4[1];
          }
          if (this.q == v4) {
            this.q = v3;
          }
          --this.length;
          return true;
        }
        v3 = v4;
        v4 = v4[1];
      }
      return false;
    };

    Boot = function () {};

    Boot.__name__ = ['Boot'];
    v1 = Boot.prototype;
    v1.__class__ = Boot;
    v1.__class__.debug = null;
    v1.__class__.main = function () {
      var v2 = flash.Lib.current;
      var v3 = v2.createEmptyMovieClip('mroot', 1);
      Boot.man = new Manager(v3);
      v3.onEnterFrame = @closure('onEnterFrame', Boot);
      flash.Lib._global.api = FlashMap;
    };

    v1.__class__.addListener = function (arg0) {
      Boot.listeners.add(arg0);
    };

    v1.__class__.removeListener = function (arg0) {
      Boot.listeners.remove(arg0);
    };

    v1.__class__.onEnterFrame = function () {
      var v2 = Boot.listeners.iterator();
      while (v2.hasNext()) {
        var v3 = v2.next();
        v3();
      }
      Boot.man.main();
    };

    v1.__class__.log = function (arg0) {};

    v1 = new Object();
    haxe = v1;
    var v2 = _global.haxe;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    haxe.Public = function () {};

    haxe.Public.__name__ = ['haxe', 'Public'];
    v1 = haxe.Public.prototype;
    v1.__class__ = haxe.Public;
    Const = function () {};

    Const.__name__ = ['Const'];
    Const.__interfaces__ = [haxe.Public];
    Const implements haxe.Public;
    v1 = Const.prototype;
    v1.__class__ = Const;
    v1.__class__.init = function (arg0, arg1) {
      Const.BUILDING_NAMES = new Array();
      var v4 = 0;
      while (v4 < arg0.length) {
        var v5 = arg0[v4];
        ++v4;
        Const.BUILDING_NAMES[v5._id] = v5._n;
      }
      Const.BUILDING_NAMES[1] = arg1;
    };

    v1 = new Object();
    mt = v1;
    v2 = _global.mt;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    mt.Protect = function () {};

    mt.Protect.__name__ = ['mt', 'Protect'];
    v1 = mt.Protect.prototype;
    v1.__class__ = mt.Protect;
    v1 = new Object();
    haxe.remoting = v1;
    v2 = _global.haxe.remoting;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    haxe.remoting.Context = function () {
      this.objects = new Hash();
    };

    haxe.remoting.Context.__name__ = ['haxe', 'remoting', 'Context'];
    v1 = haxe.remoting.Context.prototype;
    v1.__class__ = haxe.remoting.Context;
    v1.addObject = function (arg0, arg1, arg2) {
      this.objects.set(arg0, {'obj': arg1, 'rec': arg2});
    };

    v1.call = function (arg0, arg1) {
      if (arg0.length < 2) {
        throw 'Invalid path \'' + arg0.join('.') + '\'';
      }
      var v4 = this.objects.get(arg0[0]);
      if (v4 == null) {
        throw 'No such object ' + arg0[0];
      }
      var v5 = v4.obj;
      var v6 = v5[arg0[1]];
      if (arg0.length > 2) {
        if (!v4.rec) {
          throw 'Can\'t access ' + arg0.join('.');
        }
        var v7 = 2;
        var v8 = arg0.length;
        while (v7 < v8) {
          ++v7;
          var v9 = v7;
          v5 = v6;
          v6 = v5[arg0[v9]];
        }
      }
      if (!Reflect.isFunction(v6)) {
        throw 'No such method ' + arg0.join('.');
      }
      return v6.apply(v5, arg1);
    };

    v1.objects = null;
    Hash = function () {
      this.h = new _global.Object();
    };

    Hash.__name__ = ['Hash'];
    v1 = Hash.prototype;
    v1.__class__ = Hash;
    v1.exists = function (arg0) {
      return this.h.hasOwnProperty('$' + arg0);
    };

    v1.get = function (arg0) {
      return this.h['$' + arg0];
    };

    v1.h = null;
    v1.keys = function () {
      var v2 = new Array();
      // Loop counter not found
for ($somevar in this.h) {
        v2.push((enumerate this.h).substr(1));
      }
      return v2.iterator();
    };

    v1.set = function (arg0, arg1) {
      this.h['$' + arg0] = arg1;
    };

    FlashMap = function () {};

    FlashMap.__name__ = ['FlashMap'];
    FlashMap.__interfaces__ = [mt.Protect];
    FlashMap implements mt.Protect;
    v1 = FlashMap.prototype;
    v1.__class__ = FlashMap;
    v1.__class__.connect = function () {
      FlashMap.ctx.addObject('api', FlashMap);
      try {
        FlashMap.cnx = haxe.remoting.ExternalConnection.jsConnect('cnx', FlashMap.ctx);
      }
      catch (v0) {
        var v2 = v0;
        Manager.fatal('remoting call error (onReady): ' + Std.string(v2));
      }
    };

    v1.__class__.isFlashReady = function () {
      FlashMap.MANAGER.onAskedMeIfReady();
      return true;
    };

    v1.__class__.isJsReady = function () {
      try {
        var v2 = ((FlashMap.cnx.resolve('api')).resolve('isJsReady')).call(null);
        return v2;
      }
      catch (v0) {
        v2 = v0;
        Manager.fatal('JsConnexion FAILED !');
        return false;
      }
    };

    v1.__class__.reboot = function () {
      try {
        ((FlashMap.cnx.resolve('api')).resolve('reboot')).call([]);
      }
      catch (v0) {
        var v2 = v0;
        Manager.fatal('remoting call error (reboot): ' + Std.string(v2));
      }
    };

    v1.__class__.askInfos = function () {
      try {
        var v2 = ((FlashMap.cnx.resolve('api')).resolve('getInfo')).call([]);
        FlashMap.onResponse(v2);
      }
      catch (v0) {
        v2 = v0;
        Manager.fatal('remoting call error (getInfo): ' + Std.string(v2));
      }
    };

    v1.__class__.checkInfo = function () {
      if (@closure('onResponse', FlashMap.MANAGER) != null) {
        return undefined;
      }
      try {
        ((FlashMap.cnx.resolve('api')).resolve('hasInfo')).call(null);
      }
      catch (v0) {
        var v2 = v0;
        Manager.fatal('err : ' + Std.string(v2));
      }
    };

    v1.__class__.move = function (arg0, arg1, arg2) {
      try {
        ((FlashMap.cnx.resolve('api')).resolve('move')).call([arg0, arg1, arg2]);
      }
      catch (v0) {
        var v5 = v0;
        Manager.fatal('remoting call error (move): ' + Std.string(v5));
      }
    };

    v1.__class__.dispose = function () {
      FlashMap.MANAGER.dispose();
    };

    v1.__class__.sendCoord = function (arg0, arg1, arg2, arg3) {
      try {
        ((FlashMap.cnx.resolve('api')).resolve('sendCoord')).call([arg0, arg1, arg2, arg3]);
      }
      catch (v0) {
        var v6 = v0;
        Manager.fatal('remoting call error (sendCoord): ' + Std.string(v6));
      }
    };

    v1.__class__.onResponse = function (arg0) {
      if (arg0 == null) {
        throw 'null response';
      }
      try {
        var v3 = MapCommon.decode(StringTools.urlDecode(arg0));
        FlashMap.MANAGER.onResponse(haxe.Unserializer.run(v3));
      }
      catch (v0) {
        v3 = v0;
        Manager.fatal('remoting call error (onResponse): ' + (haxe.Stack.exceptionStack()).join('\n'));
      }
    };

    IntHash = function () {
      this.h = new _global.Object();
    };

    IntHash.__name__ = ['IntHash'];
    v1 = IntHash.prototype;
    v1.__class__ = IntHash;
    v1.get = function (arg0) {
      return this.h[arg0];
    };

    v1.h = null;
    v1.keys = function () {
      var v3 = new Array();
      // Loop counter not found
for ($somevar in this.h) {
        v3.push(enumerate this.h);
      }
      var v2 = v3;
      v3 = 0;
      var v4 = v2.length;
      while (v3 < v4) {
        ++v3;
        var v5 = v3;
        v2[v5] = Std.int(v2[v5]);
      }
      return v2.iterator();
    };

    v1.set = function (arg0, arg1) {
      this.h[arg0] = arg1;
    };

    v1 = new Object();
    haxe.xml = v1;
    v2 = _global.haxe.xml;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    haxe.xml.Proxy = function (arg0) {
      this.__f = arg0;
    };

    haxe.xml.Proxy.__name__ = ['haxe', 'xml', 'Proxy'];
    v1 = haxe.xml.Proxy.prototype;
    v1.__class__ = haxe.xml.Proxy;
    v1.__f = null;
    v1.resolve = function (arg0) {
      return this.__f(arg0);
    };

    v1 = new Object();
    _Lang = v1;
    v2 = _global._Lang;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    _Lang.AllTexts = function (arg0) {
      super(arg0);
    };

    _Lang.AllTexts.__name__ = ['_Lang', 'AllTexts'];
    _Lang.AllTexts.__super__ = haxe.xml.Proxy;
    _Lang.AllTexts extends haxe.xml.Proxy;
    v1 = _Lang.AllTexts.prototype;
    v1.__class__ = _Lang.AllTexts;
    v1.HorribleWords = null;
    v1.cancelExp = null;
    v1.clickToAddWaypoint = null;
    v1.close = null;
    v1.createExp = null;
    v1.deleteExp = null;
    v1.expedition = null;
    v1.explored = null;
    v1.fewZombies = null;
    v1.fog = null;
    v1.hideTags = null;
    v1.locked = null;
    v1.manyZombies = null;
    v1.map = null;
    v1.mapModeGlobal = null;
    v1.mapModeTags = null;
    v1.medZombies = null;
    v1.no_map = null;
    v1.pos = null;
    v1.starting = null;
    v1.sunsky = null;
    v1.tag = null;
    v1.tag_1 = null;
    v1.tag_10 = null;
    v1.tag_11 = null;
    v1.tag_2 = null;
    v1.tag_3 = null;
    v1.tag_4 = null;
    v1.tag_5 = null;
    v1.tag_6 = null;
    v1.tag_7 = null;
    v1.tag_8 = null;
    v1.tag_9 = null;
    v1.undigged = null;
    v1.zombie = null;
    Xml = function () {};

    Xml.__name__ = ['Xml'];
    v1 = Xml.prototype;
    v1.__class__ = Xml;
    v1.__class__.Element = null;
    v1.__class__.PCData = null;
    v1.__class__.CData = null;
    v1.__class__.Comment = null;
    v1.__class__.DocType = null;
    v1.__class__.Prolog = null;
    v1.__class__.Document = null;
    v1.__class__.convert = function (arg0) {
      if (arg0 == null) {
        return null;
      }
      if (arg0.__w != null) {
        return arg0.__w;
      }
      var v3 = new Xml();
      v3.__x = arg0;
      arg0.__w = v3;
      var v4 = arg0.nodeType;
      if (v4 != 1) {
        if (v4 != 3) {
          throw 'unknow nodeType: ' + arg0.nodeType;

// An attempt to read a value from empty stack
          undefined[v3] = 'nodeType';
          return v3;
        }
      }
      v3.nodeType = Xml.PCData;
      return v3;
    };

    v1.__class__.parse = function (arg0) {
      var v3 = new _global.XML();
      v3.parseXML(arg0);
      if (v3.status != 0) {
        throw 'Xml parse error #' + Std.string(v3.status);
      }
      var v4 = Xml.convert(v3);
      v4.nodeType = Xml.Document;
      return v4;
    };

    v1.__x = null;
    v1.elements = function () {
      if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
        throw 'bad nodeType';
      }
      return {'cur': this.__x.firstChild, 'hasNext': function () {
        var v2 = this.cur;
        for (;;) {
          if (!(v2 != null && v2.nodeType != 1)) break;
          v2 = v2.nextSibling;
        }
        this.cur = v2;
        return v2 != null;
      }, 'next': function () {
        var v2 = this.cur;
        for (;;) {
          if (!(v2 != null && v2.nodeType != 1)) break;
          v2 = v2.nextSibling;
        }
        if (v2 == null) {
          this.cur = null;
          return null;
        }
        this.cur = v2.nextSibling;
        return Xml.convert(v2);
      }};
    };

    v1.firstElement = function () {
      if (this.nodeType != Xml.Element && this.nodeType != Xml.Document) {
        throw 'bad nodeType';
      }
      var v2 = this.__x.firstChild;
      for (;;) {
        if (!(v2 != null && v2.nodeType != 1)) break;
        v2 = v2.nextSibling;
      }
      return Xml.convert(v2);
    };

    v1.get = function (arg0) {
      if (this.nodeType != Xml.Element) {
        throw 'bad nodeType';
      }
      return this.__x.attributes[arg0];
    };

    v1.iterator = function () {
      if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
        throw 'bad nodeType';
      }
      return {'cur': this.__x.firstChild, 'hasNext': function () {
        return this.cur != null;
      }, 'next': function () {
        var v2 = Xml.convert(this.cur);
        this.cur = this.cur.nextSibling;
        return v2;
      }};
    };

    v1.nodeType = null;
    v1.toString = function () {
      if (this.nodeType == Xml.Document) {
        var v2 = '';
        var v3 = this.iterator();
        while (v3.hasNext()) {
          var v4 = v3.next();
          v2 += v4.toString();
        }
        return v2;
      }
      if (this.nodeType == Xml.CData) {
        return '<![CDATA[' + this.__x.nodeValue + ']]>';
      }
      if (this.nodeType == Xml.Prolog) {
        return '<?' + this.__x.nodeValue + '?>';
      }
      if (this.nodeType == Xml.DocType) {
        return '<!DOCTYPE ' + this.__x.nodeValue + '>';
      }
      v2 = this.__x.toString();
      return (v2.split(' />')).join('/>');
    };

    haxe.Resource = function () {};

    haxe.Resource.__name__ = ['haxe', 'Resource'];
    v1 = haxe.Resource.prototype;
    v1.__class__ = haxe.Resource;
    haxe.Resource.content = null;
    haxe.Resource.getString = function (arg0) {
      var v3 = 0;
      var v4 = haxe.Resource.content;
      while (v3 < v4.length) {
        var v5 = v4[v3];
        ++v3;
        if (v5.name == arg0) {
          if (v5.str != null) {
            return v5.str;
          }
          var v6 = haxe.Unserializer.run(v5.data);
          return v6.toString();
        }
      }
      return null;
    };

    Type = function () {};

    Type.__name__ = ['Type'];
    v1 = Type.prototype;
    v1.__class__ = Type;
    v1.__class__.getClassName = function (arg0) {
      if (arg0 == null) {
        return null;
      }
      var v3 = arg0.__name__;
      return v3.join('.');
    };

    v1.__class__.getEnumName = function (arg0) {
      var v3 = arg0.__ename__;
      return v3.join('.');
    };

    v1.__class__.resolveClass = function (arg0) {
      var v3 = eval(arg0);
      if (v3 == null || v3.__name__ == null) {
        return null;
      }
      return v3;
    };

    v1.__class__.resolveEnum = function (arg0) {
      var v3 = eval(arg0);
      if (v3 == null || v3.__ename__ == null) {
        return null;
      }
      return v3;
    };

    v1.__class__.createEmptyInstance = function (arg0) {
      if (arg0 == Array) {
        return new Array();
      }
      var v3 = new _global.Object();
      v3.__proto__ = arg0.prototype;
      return v3;
    };

    v1.__class__.createEnum = function (arg0, arg1, arg2) {
      var v5 = arg0[arg1];
      if (v5 == null) {
        throw 'No such constructor ' + arg1;
      }
      if (Reflect.isFunction(v5)) {
        if (arg2 == null) {
          throw 'Constructor ' + arg1 + ' need parameters';
        }
        return v5.apply(arg0, arg2);
      }
      if (arg2 != null && arg2.length != 0) {
        throw 'Constructor ' + arg1 + ' does not need parameters';
      }
      return v5;
    };

    v1.__class__.getEnumConstructs = function (arg0) {
      var v3 = arg0.__constructs__;
      return v3.copy();
    };

    v1.__class__.typeof = function (arg0) {
      var v3 = typeof arg0;
      if (v3 != 'null') {
      } else {
        if (v3 != 'boolean') {
        } else {
          if (v3 != 'string') {
          } else {
            if (v3 != 'number') {
                    return ValueType.TUnknown;
            } else {
                    return ValueType.TNull;
              if (v3 != 'object') {
                    return ValueType.TBool;
              } else {
                    return ValueType.TClass(String);
                if (v3 != 'function') {
                    if (Math.ceil(arg0) == arg0 % 2147483648.0) {
                      return ValueType.TInt;
                    }
                    return ValueType.TFloat;
                } else {
                    var v4 = arg0.__enum__;
                    if (v4 != null) {
                      return ValueType.TEnum(v4);
                    }
                    var v5 = arg0.__class__;
                    if (v5 != null) {
                      return ValueType.TClass(v5);
                    }
                    return ValueType.TObject;
                  if (v3 != 'undefined') {
                    if (arg0.__name__ != null) {
                      return ValueType.TObject;
                    }
                    return ValueType.TFunction;
                  } else {
                    return ValueType.TNull;
                  }
                }
              }
            }
          }
        }
      }
    };

    haxe.Unserializer = function (arg0) {
      this.buf = arg0;
      this.length = arg0.length;
      this.pos = 0;
      this.scache = new Array();
      this.cache = new Array();
      var v3 = haxe.Unserializer.DEFAULT_RESOLVER;
      if (v3 == null) {
        v3 = Type;
        haxe.Unserializer.DEFAULT_RESOLVER = v3;
      }
      this.setResolver(v3);
    };

    haxe.Unserializer.__name__ = ['haxe', 'Unserializer'];
    v1 = haxe.Unserializer.prototype;
    v1.__class__ = haxe.Unserializer;
    haxe.Unserializer.initCodes = function () {
      var v2 = new Array();
      var v3 = 0;
      var v4 = haxe.Unserializer.BASE64.length;
      while (v3 < v4) {
        ++v3;
        var v5 = v3;
        v2[haxe.Unserializer.BASE64.cca(v5)] = v5;
      }
      return v2;
    };

    haxe.Unserializer.run = function (arg0) {
      return (new haxe.Unserializer(arg0)).unserialize();
    };

    v1.buf = null;
    v1.cache = null;
    v1.length = null;
    v1.pos = null;
    v1.readDigits = function () {
      var v2 = 0;
      var v3 = false;
      var v4 = this.pos;
      while (true) {
        var v5 = this.buf.cca(this.pos);
        if (v5 <= 0) {
          break;
        }
        if (v5 == 45) {
          if (this.pos != v4) {
            break;
          }
          v3 = true;
          ++this.pos;
          continue;
        }
        if (v5 < 48 || v5 > 57) {
          break;
        }
        v2 = v2 * 10 + (v5 - 48);
        ++this.pos;
      }
      if (v3) {
        v2 *= -1;
      }
      return v2;
    };

    v1.resolver = null;
    v1.scache = null;
    v1.setResolver = function (arg0) {
      if (arg0 != null) {
        this.resolver = arg0;
      } else {
        this.resolver = {'resolveClass': function (arg0) {
          return null;
        }, 'resolveEnum': function (arg0) {
          return null;
        }};
      }
    };

    v1.unserialize = function () {
      ++this.pos;
      var v2 = this.buf.cca(this.pos);
      if (v2 != 110) {
      } else {
        if (v2 != 116) {
        } else {
          if (v2 != 102) {
          } else {
            if (v2 != 122) {
            } else {
              if (v2 != 105) {
              } else {
                if (v2 != 100) {
                } else {
                  if (v2 != 121) {
                  } else {
                    if (v2 != 107) {
                    } else {
                      if (v2 != 109) {
                      } else {
                        if (v2 != 112) {
                        } else {
                          if (v2 != 97) {
                          } else {
                            if (v2 != 111) {
                            } else {
                              if (v2 != 114) {
                                                      return null;
                              } else {
                                                      return true;
                                if (v2 != 82) {
                                                      return false;
                                } else {
                                                      return 0;
                                  if (v2 != 120) {
                                                      return this.readDigits();
                                  } else {
                                                      var v3 = this.pos;
                                                      while (true) {
                                                        var v4 = this.buf.cca(this.pos);
                                                        if (!(v4 >= 43 && v4 < 58 || v4 == 101 || v4 == 69)) {
                                                          break;
                                                        } else {
                                                          ++this.pos;
                                                        }
                                                      }
                                                      return Std.parseFloat(this.buf.substr(v3, this.pos - v3));
                                    if (v2 != 99) {
                                                      var v3 = this.readDigits();
                                                      ++this.pos;
                                                      if (this.buf.cca(this.pos) != 58 || this.length - this.pos < v3) {
                                                        throw 'Invalid string length';
                                                      }
                                                      var v4 = this.buf.substr(this.pos, v3);
                                                      this.pos += v3;
                                                      v4 = StringTools.urlDecode(v4);
                                                      this.scache.push(v4);
                                                      return v4;
                                    } else {
                                                      return Math.NaN;
                                      if (v2 != 119) {
                                                      return Math.NEGATIVE_INFINITY;
                                      } else {
                                                      return Math.POSITIVE_INFINITY;
                                        if (v2 != 106) {
                                                      v3 = this.buf;
                                                      v4 = new Array();
                                                      this.cache.push(v4);
                                                      while (true) {
                                                        var v5 = this.buf.cca(this.pos);
                                                        if (v5 == 104) {
                                                          ++this.pos;
                                                          break;
                                                        }
                                                        if (v5 != 117) {
                                                          v4.push(this.unserialize());
                                                        } else {
                                                          ++this.pos;
                                                          var v6 = this.readDigits();
                                                          v4[v4.length + v6 - 1] = null;
                                                        }
                                                      }
                                                      return v4;
                                        } else {
                                                      v3 = {};
                                                      this.cache.push(v3);
                                                      this.unserializeObject(v3);
                                                      return v3;
                                          if (v2 != 108) {
                                                      v3 = this.readDigits();
                                                      if (v3 < 0 || v3 >= this.cache.length) {
                                                        throw 'Invalid reference';
                                                      }
                                                      return this.cache[v3];
                                          } else {
                                                      v3 = this.readDigits();
                                                      if (v3 < 0 || v3 >= this.scache.length) {
                                                        throw 'Invalid string reference';
                                                      }
                                                      return this.scache[v3];
                                            if (v2 != 98) {
                                                      throw this.unserialize();
                                            } else {
                                                      v3 = this.unserialize();
                                                      v4 = this.resolver.resolveClass(v3);
                                                      if (v4 == null) {
                                                        throw 'Class not found ' + v3;
                                                      }
                                                      var v5 = Type.createEmptyInstance(v4);
                                                      this.cache.push(v5);
                                                      this.unserializeObject(v5);
                                                      return v5;
                                              if (v2 != 113) {
                                                      v3 = this.unserialize();
                                                      v4 = this.resolver.resolveEnum(v3);
                                                      if (v4 == null) {
                                                        throw 'Enum not found ' + v3;
                                                      }
                                                      v5 = this.unserializeEnum(v4, this.unserialize());
                                                      this.cache.push(v5);
                                                      return v5;
                                              } else {
                                                      v3 = this.unserialize();
                                                      v4 = this.resolver.resolveEnum(v3);
                                                      if (v4 == null) {
                                                        throw 'Enum not found ' + v3;
                                                      }
                                                      ++this.pos;
                                                      v5 = this.readDigits();
                                                      var v6 = (Type.getEnumConstructs(v4))[v5];
                                                      if (v6 == null) {
                                                        throw 'Unknown enum index ' + v3 + '@' + v5;
                                                      }
                                                      var v7 = this.unserializeEnum(v4, v6);
                                                      this.cache.push(v7);
                                                      return v7;
                                                if (v2 != 118) {
                                                      v3 = new List();
                                                      this.cache.push(v3);
                                                      v4 = this.buf;
                                                      while (this.buf.cca(this.pos) != 104) {
                                                        v3.add(this.unserialize());
                                                      }
                                                      ++this.pos;
                                                      return v3;
                                                } else {
                                                      v3 = new Hash();
                                                      this.cache.push(v3);
                                                      v4 = this.buf;
                                                      while (this.buf.cca(this.pos) != 104) {
                                                        v5 = this.unserialize();
                                                        v3.set(v5, this.unserialize());
                                                      }
                                                      ++this.pos;
                                                      return v3;
                                                  if (v2 != 115) {
                                                      v3 = new IntHash();
                                                      this.cache.push(v3);
                                                      v4 = this.buf;
                                                      ++this.pos;
                                                      v5 = this.buf.cca(this.pos);
                                                      while (v5 == 58) {
                                                        v6 = this.readDigits();
                                                        v3.set(v6, this.unserialize());
                                                        ++this.pos;
                                                        v5 = this.buf.cca(this.pos);
                                                      }
                                                      if (v5 != 104) {
                                                        throw 'Invalid IntHash format';
                                                      }
                                                      return v3;
                                                  } else {
                                                      v3 = Date.fromString(this.buf.substr(this.pos, 19));
                                                      this.cache.push(v3);
                                                      this.pos += 19;
                                                      return v3;
                                                    if (v2 != 67) {
                                                      v3 = this.readDigits();
                                                      v4 = this.buf;
                                                      ++this.pos;
                                                      if (this.buf.cca(this.pos) != 58 || this.length - this.pos < v3) {
                                                        throw 'Invalid bytes length';
                                                      }
                                                      v5 = haxe.Unserializer.CODES;
                                                      if (v5 == null) {
                                                        v5 = haxe.Unserializer.initCodes();
                                                        haxe.Unserializer.CODES = v5;
                                                      }
                                                      v6 = this.pos;
                                                      var v7 = v3 & 3;
                                                      var v8 = (v3 >> 2) * 3 + (v7 >= 2 ? v7 - 1 : 0);
                                                      var v9 = v6 + (v3 - v7);
                                                      var v10 = haxe.io.Bytes.alloc(v8);
                                                      var v11 = 0;
                                                      while (v6 < v9) {
                                                        ++v6;
                                                        var v12 = v5[v4.cca(v6)];
                                                        ++v6;
                                                        var v13 = v5[v4.cca(v6)];
                                                        ++v11;
                                                        v10.b[v11] = (v12 << 2 | v13 >> 4) & 255;
                                                        ++v6;
                                                        var v14 = v5[v4.cca(v6)];
                                                        ++v11;
                                                        v10.b[v11] = (v13 << 4 | v14 >> 2) & 255;
                                                        ++v6;
                                                        var v15 = v5[v4.cca(v6)];
                                                        ++v11;
                                                        v10.b[v11] = (v14 << 6 | v15) & 255;
                                                      }
                                                      if (v7 >= 2) {
                                                        ++v6;
                                                        v12 = v5[v4.cca(v6)];
                                                        ++v6;
                                                        v13 = v5[v4.cca(v6)];
                                                        ++v11;
                                                        v10.b[v11] = (v12 << 2 | v13 >> 4) & 255;
                                                        if (v7 == 3) {
                                                          ++v6;
                                                          v14 = v5[v4.cca(v6)];
                                                          ++v11;
                                                          v10.b[v11] = (v13 << 4 | v14 >> 2) & 255;
                                                        }
                                                      }
                                                      this.pos += v3;
                                                      this.cache.push(v10);
                                                      return v10;
                                                    } else {
                                                      v3 = this.unserialize();
                                                      v4 = this.resolver.resolveClass(v3);
                                                      if (v4 == null) {
                                                        throw 'Class not found ' + v3;
                                                      }
                                                      v5 = Type.createEmptyInstance(v4);
                                                      this.cache.push(v5);
                                                      v5.hxUnserialize(this);
                                                      ++this.pos;
                                                      if (this.buf.cca(this.pos) != 103) {
                                                        throw 'Invalid custom data';
                                                      }
                                                      return v5;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      --this.pos;
      throw 'Invalid char ' + this.buf.charAt(this.pos) + ' at position ' + this.pos;
    };

    v1.unserializeEnum = function (arg0, arg1) {
      ++this.pos;
      if (this.buf.cca(this.pos) != 58) {
        throw 'Invalid enum format';
      }
      var v4 = this.readDigits();
      if (v4 == 0) {
        return Type.createEnum(arg0, arg1);
      }
      var v5 = new Array();
      --v4;
      while (v4 > 0) {
        v5.push(this.unserialize());
      }
      return Type.createEnum(arg0, arg1, v5);
    };

    v1.unserializeObject = function (arg0) {
      while (true) {
        if (this.pos >= this.length) {
          throw 'Invalid object';
        }
        if (this.buf.cca(this.pos) == 103) {
          break;
        }
        var v3 = this.unserialize();
        if (!Std.is(v3, String)) {
          throw 'Invalid object key';
        }
        var v4 = this.unserialize();
        arg0[v3] = v4;
      }
      ++this.pos;
    };

    Std = function () {};

    Std.__name__ = ['Std'];
    v1 = Std.prototype;
    v1.__class__ = Std;
    v1.__class__.is = function (arg0, arg1) {
      return flash.Boot.__instanceof(arg0, arg1);
    };

    v1.__class__.string = function (arg0) {
      return flash.Boot.__string_rec(arg0, '');
    };

    v1.__class__.int = function (arg0) {
      if (arg0 < 0) {
        return Math.ceil(arg0);
      }
      return Math.floor(arg0);
    };

    v1.__class__.parseInt = function (arg0) {
      if (!(arg0.charCodeAt(1) == 120 || arg0.charCodeAt(1) == 88)) {
        var v3 = _global.parseInt(arg0, 10);
      } else {
        var v3 = _global.parseInt(arg0);
      }
      if (_global.isNaN(v3)) {
        return null;
      }
      return v3;
    };

    v1.__class__.parseFloat = function (arg0) {
      return _global.parseFloat(arg0);
    };

    v1.__class__.random = function (arg0) {
      return random(arg0);
    };

    v1 = new Object();
    flash = v1;
    v2 = _global.flash;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    flash.Boot = function () {};

    flash.Boot.__name__ = ['flash', 'Boot'];
    v1 = flash.Boot.prototype;
    v1.__class__ = flash.Boot;
    flash.Boot.__string_rec = function (arg0, arg1) {
      if (arg1.length >= 20) {
        return '<...>';
      }
      var v4 = typeof arg0;
      if (v4 != 'movieclip') {
        if (v4 == 'function' && (arg0.__name__ != null || arg0.__ename__ != null)) {
          v4 = 'object';
        }
      } else {
        v4 = 'object';
      }
      var v5 = v4;
      if (v5 != 'object') {
      } else {
        if (v5 != 'function') {
            return String(arg0);
        } else {
            if (arg0 instanceof Array) {
              if (arg0.__enum__ != null) {
                if (arg0.length == 2) {
                  return arg0[0];
                }
                var v6 = arg0[0] + '(';
                arg1 += '    ';
                var v7 = 2;
                var v8 = arg0.length;
                while (v7 < v8) {
                  ++v7;
                  var v9 = v7;
                  if (v9 == 2) {
                    v6 += flash.Boot.__string_rec(arg0[v9], arg1);
                  } else {
                    v6 += ',' + flash.Boot.__string_rec(arg0[v9], arg1);
                  }
                }
                return v6 + ')';
              }
              v6 = arg0.length;
              v8 = '[';
              arg1 += '    ';
              v9 = 0;
              while (v9 < v6) {
                ++v9;
                var v10 = v9;
                v8 += (v10 > 0 ? ',' : '') + flash.Boot.__string_rec(arg0[v10], arg1);
              }
              v8 += ']';
              return v8;
            }
            v6 = arg0.toString();
            if ((typeof v6 == 'string' || v6 instanceof String) && v6 != '[object Object]' && v6 != '[type Function]') {
              return v6;
            }
            v8 = '{\n';
            if (typeof(arg0) == 'movieclip') {
              v8 = 'MC(' + Std.string(arg0._name) + ') ' + v8;
            }
            arg1 += '    ';
            v10 = new Array();
            // Loop counter not found
for ($somevar in arg0) {
              v10.push(enumerate arg0);
            }
            v9 = v10;
            v10 = v9.iterator();
            while (v10.hasNext()) {
              var v11 = v10.next();
              if (v11 == 'prototype' || v11 == '__class__' || v11 == '__super__' || v11 == '__interfaces__') {
                continue;
              }
              if (v8.length != 2) {
                v8 += ',\n';
              }
              v8 += arg1 + v11 + ' : ' + flash.Boot.__string_rec(arg0[v11], arg1);
            }
            arg1 = arg1.substring(4);
            if (v8.length != 2) {
              v8 += '\n';
            }
            v8 += arg1 + '}';
            return v8;
          if (v5 != 'string') {
            return '<function>';
          } else {
            return arg0;
          }
        }
      }
    };

    flash.Boot.__closure = function (arg0, arg1) {
      var v4 = arg1[super];
      if (v4 == null) {
        return null;
      }
      var v5 = function () {
        super = arguments.callee;
        return super.f.apply(super.o, arguments);
      };

      v5.f = v4;
      v5.o = arg1;
      return v5;
    };

    flash.Boot.__instanceof = function (arg0, arg1) {
      if (!arg1) {
        return false;
      }
      if (arg0 instanceof arg1) {
        if (arg1 == Array) {
          return arg0.__enum__ == null;
        }
        return true;
      }
      var v4 = arg1;
      if (v4 != Int) {
      } else {
        if (v4 != Float) {
        } else {
          if (v4 != Bool) {
                return arg0.__enum__ == arg1 || arg1 == Class && arg0.__name__ != null || arg1 == Enum && arg0.__ename__ != null;
          } else {
                return typeof arg0 == 'number' && Math.ceil(arg0) === arg0 % 2147483648.0 && !(arg0 === true || arg0 === false);
            if (v4 != String) {
                return typeof arg0 == 'number';
            } else {
                return arg0 === true || arg0 === false;
              if (v4 != Dynamic) {
                return typeof arg0 == 'string';
              } else {
                return true;
              }
            }
          }
        }
      }
    };

    flash.Boot.getTrace = function () {
      var v2 = flash.Lib.current;
      var v3 = v2.__trace_txt;
      if (v3 == null) {
        var v4 = flash.Stage.width;
        var v5 = flash.Stage.height;
        if (v4 == 0) {
          v4 = 800;
        }
        if (v5 == 0) {
          v5 = 600;
        }
        v2.createTextField('__trace_txt', 1048500, 0, 0, v4, v5 + 30);
        v3 = v2.__trace_txt;
        var v6 = v3.getTextFormat();
        v6.font = '_sans';
        v3.setNewTextFormat(v6);
        v3.selectable = false;
        v3.textColor = flash.Boot.def_color;
        v2.__trace_lines = new Array();
      }
      return v3;
    };

    flash.Boot.__set_trace_color = function (arg0) {
      (flash.Boot.getTrace()).textColor = arg0;
      flash.Boot.def_color = arg0;
    };

    flash.Boot.__trace = function (arg0, arg1) {
      var v4 = flash.Lib.current;
      var v5 = flash.Boot.getTrace();
      var v6 = arg1.fileName + ((arg1.lineNumber == null) ? '' : ':' + arg1.lineNumber) + ': ' + flash.Boot.__string_rec(arg0, '');
      var v7 = v4.__trace_lines.concat(v6.split('\n'));
      v5.text = v7.join('\n');
      for (;;) {
        if (!(v7.length > 1 && v5.textHeight > flash.Stage.height)) break;
        v7.shift();
        v5.text = v7.join('\n');
      }
      v4.__trace_lines = v7;
    };

    flash.Boot.__exc = function (arg0) {
      var v3 = '';
      if (flash.Lib.onerror == null) {
        flash.Boot.__trace(flash.Boot.__string_rec(arg0, '') + v3, {'fileName': '(uncaught exception)'});
      } else {
        flash.Lib.onerror(flash.Boot.__string_rec(arg0, ''), []);
      }
    };

    flash.Boot.__clear_trace = function () {
      var v2 = flash.Lib.current;
      v2.__trace_txt.removeTextField();
      v2.__trace_lines = null;
    };

    flash.Boot.__init = function (arg0) {
      var v3 = _global;
      if (!v3.haxeInitDone) {
        v3.haxeInitDone = true;
        Array.prototype.copy = Array.prototype.slice;
        Array.prototype.insert = function (arg0, arg1) {
          this.splice(arg0, 0, arg1);
        };

        Array.prototype.remove = function (arg0) {
          var v3 = 0;
          var v4 = this.length;
          while (v3 < v4) {
            if (this[v3] == arg0) {
              this.splice(v3, 1);
              return true;
            }
            ++v3;
          }
          return false;
        };

        Array.prototype.iterator = function () {
          return {'cur': 0, 'arr': this, 'hasNext': function () {
            return this.cur < this.arr.length;
          }, 'next': function () {
            ++this.cur;
            return this.arr[this.cur];
          }};
        };

        _global.ASSetPropFlags(Array.prototype, null, 7);
        var v4 = String.prototype.charCodeAt;
        String.prototype.cca = v4;
        String.prototype.charCodeAt = function (arg0) {
          var v3 = this.cca(arg0);
          if (v3 <= 0) {
            return null;
          }
          return v3;
        };

        if (_global.flash == null) {
          _global.flash = {};
        }
      }
      arg0.flash.Lib._global = _global;
      arg0.flash.Lib._root = _root;
      arg0.flash.Lib.current = arg0;
      arg0.@instanceof = flash.Boot.__instanceof;
      arg0.@closure = flash.Boot.__closure;
      if (_global.Stage.align == '') {
        _global.Stage.align = 'LT';
      }
      mt.flash.Init.check();
    };

    StringBuf = function () {};

    StringBuf.__name__ = ['StringBuf'];
    v1 = StringBuf.prototype;
    v1.__class__ = StringBuf;
    v1.b = '';
    Lang = function () {};

    Lang.__name__ = ['Lang'];
    v1 = Lang.prototype;
    v1.__class__ = Lang;
    v1.__class__.init = function () {
      var v2 = (Xml.parse(haxe.Resource.getString('xml_lang'))).firstElement();
      var v3 = new Hash();
      var v4 = v2.elements();
      while (v4.hasNext()) {
        var v5 = v4.next();
        var v6 = v5.get('id');
        if (v6 == null) {
          throw 'Missing \'id\' in data.xml';
        }
        if (v3.exists(v6)) {
          throw 'Duplicate id \'' + v6 + '\' in data.xml';
        }
        var v7 = new StringBuf();
        var v8 = v5.iterator();
        while (v8.hasNext()) {
          var v9 = v8.next();
          v7.b += Std.string(v9.toString());
        }
        v3.set(v6, v7.b);
      }
      return v3;
    };

    v1.__class__.getText = function (arg0) {
      var v3 = Lang.TEXTS.get(arg0);
      v3 = StringTools.replace(v3, '&apos;', '\'');
      return v3;
    };

    PHASE = new Object();
    PHASE.__ename__ = ['PHASE'];
    PHASE.__constructs__ = ['Init', 'ReInit', 'Main', 'Server', 'Moving', 'Map', 'ExpList'];
    ['ExpList', 6].__enum__ = PHASE;
    ['ExpList', 6].toString = @estr;
    PHASE.ExpList = ['ExpList', 6];
    ['Init', 0].__enum__ = ['ExpList', 6].__enum__;
    ['Init', 0].toString = @estr;
    ['ExpList', 6].__enum__.Init = ['Init', 0];
    ['Main', 2].__enum__ = ['ExpList', 6].__enum__;
    ['Main', 2].toString = @estr;
    ['ExpList', 6].__enum__.Main = ['Main', 2];
    ['Map', 5].__enum__ = ['ExpList', 6].__enum__;
    ['Map', 5].toString = @estr;
    ['ExpList', 6].__enum__.Map = ['Map', 5];
    ['Moving', 4].__enum__ = ['ExpList', 6].__enum__;
    ['Moving', 4].toString = @estr;
    ['ExpList', 6].__enum__.Moving = ['Moving', 4];
    ['ReInit', 1].__enum__ = ['ExpList', 6].__enum__;
    ['ReInit', 1].toString = @estr;
    ['ExpList', 6].__enum__.ReInit = ['ReInit', 1];
    ['Server', 3].__enum__ = ['ExpList', 6].__enum__;
    ['Server', 3].toString = @estr;
    ['ExpList', 6].__enum__.Server = ['Server', 3];
    MAP_MODE = new Object();
    MAP_MODE.__ename__ = ['MAP_MODE'];
    MAP_MODE.__constructs__ = ['Normal', 'Tags', 'Global', 'Close'];
    ['Close', 3].__enum__ = MAP_MODE;
    ['Close', 3].toString = @estr;
    MAP_MODE.Close = ['Close', 3];
    ['Global', 2].__enum__ = ['Close', 3].__enum__;
    ['Global', 2].toString = @estr;
    ['Close', 3].__enum__.Global = ['Global', 2];
    ['Normal', 0].__enum__ = ['Close', 3].__enum__;
    ['Normal', 0].toString = @estr;
    ['Close', 3].__enum__.Normal = ['Normal', 0];
    ['Tags', 1].__enum__ = ['Close', 3].__enum__;
    ['Tags', 1].toString = @estr;
    ['Close', 3].__enum__.Tags = ['Tags', 1];
    Manager = function (arg0) {
      this.root = arg0;
      FlashMap.MANAGER = this;
      FlashMap.connect();
      this.dm = new mt.DepthManager(this.root);
      this.screen = this.dm.empty(Const.DP_BG);
      this.dms = new mt.DepthManager(this.screen);
      this.raStep = 0;
      this.hangTimer = 0;
      this.psychoTimer = 0;
      this.respCpt = 0;
      this.psychoCD = 200 + Std.random(400);
      this.arrows = new Array();
      this.icons = new Array();
      this.buildings = new Array();
      this.abList = new Array();
      this.setPhase(PHASE.Init);
      this.fl_slow = false;
      Manager.fl_disposed = false;
      this.fl_mapZoom = this.loadPref('zoom', ValueType.TBool, false);
      if (this.fl_mapZoom && !this.isBigMap()) {
        this.fl_mapZoom = false;
        this.savePref('zoom', false);
      }
      this.reqDx = 0;
      this.reqDy = 0;
      this.mapStep = 0;
      this.kills = 0;
      this.pathStep = -1;
      var v3 = flash.Lib._root.data;
      if (v3 != null) {
        try {
          v3 = MapCommon.decode(v3);
          var v4 = haxe.Unserializer.run(v3);
        }
        catch (v0) {
          var v5 = v0;
          Manager.fatal('Unserialize failed ! (' + Std.string(v5) + ')');
          return undefined;
        }
      } else {
        return undefined;
      }
      if (storedv4._details == null) {
        Manager.fatal();
        return undefined;
      }
      this.expeditions = storedv4._e;
      this.fl_townMode = storedv4._town == true;
      this.mapDetails = storedv4._details;
      Const.MWID = storedv4._w;
      Const.MHEI = storedv4._h;
      Const.init(storedv4._b, storedv4._city);
      this.cx = storedv4._x;
      this.cy = storedv4._y;
      this.moves = storedv4._r._m;
      this.fl_slow = storedv4._slow;
      this.fl_map = storedv4._map;
      this.fl_betterMap = storedv4._up;
      this.fl_tracker = this.fl_map && !this.fl_townMode;
      if (storedv4._path != null && this.fl_townMode) {
        if (storedv4._path != '') {
          this.path = storedv4._path;
        }
      }
      this.fl_pathEditor = storedv4._editor == true;
      this.fl_pathPreview = storedv4._path != null && !this.fl_pathEditor;
      this.users = storedv4._users;
      this.zoneId = storedv4._r._zid;
      this.mapId = storedv4._mid;
      this.onResponse(storedv4._r);
      if (!this.checkDomains()) {
        return undefined;
      }
      var v5 = new Array();
      var v6 = 0;
      if (storedv4._hour >= 17) {
        v6 = Math.min(1, (storedv4._hour - 17) / 3);
      }
      if (storedv4._hour <= 8) {
        v6 = Math.min(1, (8 - storedv4._hour) / 3);
      }
      v5 = v5.concat([this.inte(1, 0.5, v6), 0, 0.3, 0, 0]);
      v5 = v5.concat([0, this.inte(1, 0.7, v6), 0.4, 0, 0]);
      v5 = v5.concat([this.inte(0, 0.2, v6), this.inte(0, 0.1, v6), 1.5, 0, 0]);
      v5 = v5.concat([0, 0, 0, 1.0, 0]);
      Manager.NIGHT = new flash.filters.ColorMatrixFilter(v5);
      this.bg = this.dms.empty(Const.DP_BG);
      ++Const.uniq;
      this.bg.base = this.bg.attachMovie('bg', 'base', Const.uniq);
      this.bg.base.filters = [Manager.NIGHT];
      ++Const.uniq;
      this.bg.blur = this.bg.attachMovie('bg', 'blur', Const.uniq);
      ++Const.uniq;
      this.bg.mask = this.bg.attachMovie('mask', 'mask', Const.uniq);
      this.bg.blur.filters = [Manager.NIGHT, new flash.filters.BlurFilter(Manager.FOCAL_BLUR, Manager.FOCAL_BLUR)];
      this.bg.blur.setMask(this.bg.mask);
      ++Const.uniq;
      var v7 = this.bg.createEmptyMovieClip('base', Const.uniq);
      v7.cacheAsBitmap = true;
      this.dmBg = new mt.DepthManager(v7);
      this.localFog = this.dms.empty(Const.DP_FOG);
      ++Const.uniq;
      this.localFog.smc = this.localFog.createEmptyMovieClip('blackMC', Const.uniq);
      ++Const.uniq;
      this.localFog.holes = this.localFog.createEmptyMovieClip('holesMC', Const.uniq);
      this.localFog.smc.beginFill(3342336);
      this.localFog.smc.moveTo(-Const.WID, -Const.HEI);
      this.localFog.smc.lineTo(Const.WID * 2, -Const.HEI);
      this.localFog.smc.lineTo(Const.WID * 2, Const.HEI * 2);
      this.localFog.smc.lineTo(-Const.WID, Const.HEI * 2);
      this.localFog.smc.moveTo(-Const.WID, -Const.HEI);
      this.localFog.smc.endFill();
      this.localFog.holes.blendMode = 'erase';
      this.localFog.blendMode = 'layer';
      this.localFog.filters = [new flash.filters.BlurFilter(64, 64, 2)];
      this.localFog.cacheAsBitmap = true;
      this.revealedMap = new Array();
      var v8 = 0;
      var v9 = Const.MWID;
      while (v8 < v9) {
        ++v8;
        var v10 = v8;
        this.revealedMap[v10] = new Array();
      }
      this.bg.base.cacheAsBitmap = true;
      this.bg.blur.cacheAsBitmap = true;
      this.knownMap = new Array();
      this.globalMap = new Array();
      v8 = 0;
      v9 = 0;
      v10 = 0;
      var v11 = storedv4._view;
      while (v10 < v11.length) {
        var v12 = v11[v10];
        ++v10;
        this.knownMap.push(v12);
        if (v12 != null) {
          this.revealFog(v8, v9);
          if (v12 != 0) {
            this.addBuilding(v12, v8, v9);
            if (v12 == 1) {
              this.cityX = v8;
              this.cityY = v9;
            }
          }
        }
        ++v8;
        if (v8 >= Const.MWID) {
          v8 = 0;
          ++v9;
        }
      }
      v10 = 0;
      v11 = storedv4._global;
      while (v10 < v11.length) {
        v12 = v11[v10];
        ++v10;
        this.globalMap.push(v12);
      }
      this.redrawFog();
      this.lastCoord = {'x': this.cityX, 'y': this.cityY};
      this.printMap(this.knownMap);
      v10 = flash.SharedObject.getLocal('mapTrack');
      if (!(v10.data.tx != null && this.mapId == v10.data.mapId)) {
        this.trackX = this.cityX;
        this.trackY = this.cityY;
      } else {
        this.trackX = v10.data.tx;
        this.trackY = v10.data.ty;
      }
      if (!this.fl_pathPreview && !this.fl_pathEditor && v10.data.pathId != null) {
        v11 = v10.data.pathId;
        v12 = 0;
        var v13 = this.expeditions;
        while (v12 < v13.length) {
          var v14 = v13[v12];
          ++v12;
          if (v14._i == v11) {
            this.path = v14._p;
          }
        }
        this.pathStep = v10.data.pathStep;
        if (this.path == null) {
          v10.data.pathStep = -1;
          v10.data.pathId = null;
          v10.flush();
        }
      }
      v11 = this.path.split(MapCommon.GroupSep);
      if (v11.length > 0) {
        v12 = v11[v11.length - 1].split(MapCommon.CoordSep);
        this.lastCoord = {'x': Std.parseInt(v12[0]), 'y': Std.parseInt(v12[1])};
      }
      v12 = this.dms.attach('dark', Const.DP_FX);
      v12._x = Const.WID * 0.5;
      v12._y = Const.HEI * 0.5;
      v12._alpha = 90;
      this.noise = this.dm.attach('fx_noise', Const.DP_FX);
      this.noise._alpha = 0;
      v13 = this.dm.attach('fx_dispMap', Const.DP_FX);
      this.dispMap = new flash.display.BitmapData(Const.WID, Const.HEI);
      this.dispMap.draw(v13);
      v13.removeMovieClip();
      this.fl_disp = false;
      this.screenBmp = new flash.display.BitmapData(Const.WID, Const.HEI, false, 0);
      this.screenDist = this.dm.empty(Const.DP_BG);
      this.screenDist.attachBitmap(this.screenBmp, 0);
      this.screenDist._visible = false;
      v12 = this.dm.attach('interf', Const.DP_INTERF);
      this.status = this.dm.attach('field', Const.DP_INTERF);
      this.initField(this.status);
      this.clearStatus();
      this.starting = this.dm.attach('field', Const.DP_INTERF);
      this.starting._x = Const.WID * 0.5;
      this.starting._y = Const.HEI * 0.5;
      this.initField(this.starting);
      this.starting.bg._visible = false;
      this.starting.field.text = Lang.get.resolve('starting');
      this.tip = this.dms.attach('field', Const.DP_INTERF);
      this.tip.field._width = 130;
      this.tip.field._x = -this.tip.field._width * 0.5;
      this.initField(this.tip);
      this.tip.field.filters = [new flash.filters.GlowFilter(Manager.LCD, 1, 6, 6, 1)];
      if (!this.fl_map) {
        this.mapButton = this.attachButton(1, Lang.get.resolve('map'), null);
      } else {
        var f = @closure('showMap', this);
        Manager.GC_SAVE = function () {
          return f(MAP_MODE.Normal);
        };

        this.mapButton = this.attachButton(1, Lang.get.resolve('map'), Manager.GC_SAVE);
      }
      this.mapButton._visible = false;
      if (!this.fl_pathPreview && !this.fl_pathEditor) {
        var f1 = @closure('showExpList', this);
        this.expButton = this.attachButton(4, Lang.get.resolve('expedition'), function () {
          return f1();
        });
        this.expButton._x = Const.WID - this.expButton._width;
        this.expButton._visible = false;
      }
      var f2 = @closure('showMap', this);
      this.tagModeButton = this.attachButton(2, Lang.get.resolve('mapModeTags'), function () {
        return f2(MAP_MODE.Tags);
      });
      if (!this.fl_townMode) {
        this.tagModeButton._x += 65;
      }
      this.tagModeButton._visible = false;
      var f3 = @closure('showMap', this);
      this.globalModeButton = this.attachButton(2, Lang.get.resolve('mapModeGlobal'), function () {
        return f3(MAP_MODE.Global);
      });
      if (!this.fl_townMode) {
        this.globalModeButton._x += 130;
      }
      this.globalModeButton._visible = false;
      var f4 = @closure('showMap', this);
      this.zoomButton = this.attachButton(this.fl_mapZoom ? 8 : 7, '', function () {
        return f4(MAP_MODE.Global);
      });
      this.zoomButton._x = 196;
      this.zoomButton._visible = false;
      if (this.fl_tracker) {
        this.cityArr = this.dms.attach('cityArrow', Const.DP_TOP);
        this.cityArr._x = Const.WID * 0.5;
        this.cityArr._y = Const.HEI * 0.5;
        this.cityArr.gotoAndStop(1);
        this.cityArr._alpha = 0;
        this.cityArr.filters = [new flash.filters.GlowFilter(Manager.LCD, 1, 6, 6, 2)];
      }
      this.setTarget(this.cx, this.cy);
      this.mapX = this.tx;
      this.mapY = this.ty;
      this.updateScroll(0, 0);
      this.black = this.dms.attach('blackMask', Const.DP_INTERF);
      this.black._alpha = Const.BLACK_ALPHA;
      if (!this.fl_townMode) {
        this.black._visible = false;
      } else {
        this.setPhase(PHASE.Main);
        this.mapButton.removeMovieClip();
        this.showMap(MAP_MODE.Normal);
        this.wmapCont.left.removeMovieClip();
      }
      if (this.phase == PHASE.Init) {
        if (FlashMap.isJsReady()) {
          this.setPhase(PHASE.ReInit);
          FlashMap.askInfos();
        }
      }
    };

    Manager.__name__ = ['Manager'];
    v1 = Manager.prototype;
    v1.__class__ = Manager;
    v1.__class__.fl_disposed = null;
    v1.__class__.GC_SAVE = null;
    v1.__class__.fatal = function (arg0) {
      if (arg0 != null) {
        null;
      }
      if (!Manager.fl_disposed) {
        flash.Lib._root.gotoAndStop(2);
      }
      Reflect.deleteField(flash.Lib._root, 'onEnterFrame');
    };

    v1.__class__.getListFrom = function (arg0) {
      var v3 = arg0.split('\n');
      var v4 = 0;
      while (v4 < v3.length) {
        v3[v4] = StringTools.trim(v3[v4]);
        if (v3[v4].length != 0) {
          ++v4;
        } else {
          v3.splice(v4, 1);
        }
      }
      return v3;
    };

    v1.abList = null;
    v1.addActiveBox = function (arg0, arg1, arg2) {
      ++Const.uniq;
      var v5 = arg0.attachMovie('activeBox', 'activeBox_' + Const.uniq, Const.uniq);
      v5._alpha = 0;
      v5._x = arg1._x;
      v5._y = arg1._y;
      v5._width = arg1._width;
      v5._height = arg1._height;
      v5.onRelease = arg2;
      v5.onReleaseOutside = arg2;
      this.abList.push(v5);
      return v5;
    };

    v1.addBuilding = function (arg0, arg1, arg2) {
      var v5 = this.dmBg.attach('building', Const.DP_BG);
      var v6 = new mt.Rand(arg1 + arg2 * Const.MWID);
      v6.seed = v6.seed * 16807 % 2147483647;
      v6.seed = v6.seed * 16807 % 2147483647;
      var v7 = ((v6.seed & 1073741823) % 20) * (((v6.seed & 1073741823) % 2) * 2 - 1);
      v6.seed = v6.seed * 16807 % 2147483647;
      v6.seed = v6.seed * 16807 % 2147483647;
      var v8 = ((v6.seed & 1073741823) % 20) * (((v6.seed & 1073741823) % 2) * 2 - 1);
      v5._x = Math.floor(arg1 * Const.CWID + Const.CWID * 0.5 + v7);
      v5._y = Math.floor(arg2 * Const.CHEI + Const.CHEI * 0.5 + v8);
      if (arg0 != -1) {
        v5.gotoAndStop(arg0);
      } else {
        v5.gotoAndStop(70);
      }
      v5.filters = [Manager.NIGHT];
      v5.cacheAsBitmap = true;
      if (!this.fl_townMode) {
        if (arg0 == -1) {
          var f = @closure('onOverBuilding', this);
          var mc1 = v5;
          v5.onRollOver = function () {
            return f(mc1, Lang.get.resolve('undigged'));
          };

          var f1 = @closure('onOutBuilding', this);
          v5.onRollOut = function () {
            return f1();
          };

          v5.useHandCursor = false;
        }
        if (Const.BUILDING_NAMES[arg0] != null) {
          var f2 = @closure('onOverBuilding', this);
          var mc2 = v5;
          var a1 = Const.BUILDING_NAMES[arg0];
          v5.onRollOver = function () {
            return f2(mc2, a1);
          };

          var f3 = @closure('onOutBuilding', this);
          v5.onRollOut = function () {
            return f3();
          };

          v5.useHandCursor = false;
        }
      }
      this.buildings.push(v5);
    };

    v1.addExp = function (arg0, arg1, arg2) {
      var v5 = this.attachButton(arg2 ? 6 : 5, arg0, arg1);
      v5._x = Const.WID - v5._width - 5;
      v5._y = Const.HEI - 35 - (v5._height + 1) * this.expButtons.length;
      v5._alpha = 70;
      this.expButtons.push(v5);
    };

    v1.addIcon = function (arg0, arg1) {
      if (this.fl_townMode) {
        return undefined;
      }
      var v4 = this.dms.attach('icons', Const.DP_INTERF);
      if (arg0 != null) {
        arg0.seed = arg0.seed * 16807 % 2147483647;
        v4._x = (arg0.seed & 1073741823) % Math.floor(Const.CWID * 0.7) + Const.CWID * 1.15;
        arg0.seed = arg0.seed * 16807 % 2147483647;
        v4._y = (arg0.seed & 1073741823) % Math.floor(Const.CHEI * 0.7) + Const.CHEI * 1.15;
      } else {
        v4._x = Const.WID * 0.5;
        v4._y = Const.HEI * 0.5;
      }
      v4.gotoAndStop(1);
      v4._alpha = 0;
      var v5 = null;
      if (Manager.ICON_GLOW[arg1] != null) {
        v5 = new flash.filters.GlowFilter(Manager.ICON_GLOW[arg1], 0.7, 3, 3, 4);
      }
      v4.blendMode = 'add';
      this.icons.push({'ox': v4._x, 'oy': v4._y, 'step': 0, 'mc': v4, 'glow': v5, 'frame': arg1});
      this.icons.sort(function (arg0, arg1) {
        if (arg0.mc._y > arg1.mc._y) {
          return 1;
        }
        if (arg0.mc._y < arg1.mc._y) {
          return -1;
        }
        return 0;
      });
      var v6 = 0;
      var v7 = this.icons;
      while (v6 < v7.length) {
        var v8 = v7[v6];
        ++v6;
        this.dms.over(v8.mc);
      }
    };

    v1.alarm = null;
    v1.arrows = null;
    v1.attachArrow = function (arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
      if (this.fl_townMode) {
        return undefined;
      }
      var mc = this.dms.attach('arrow', Const.DP_INTERF);
      mc._x = arg0;
      mc._y = arg1;
      mc.bg._rotation = arg2;
      mc.bg.gotoAndStop(1);
      if (arg5 == null) {
        mc.field._visible = false;
      } else {
        var v9 = 1;
        if (arg5 > 4) {
          v9 = 2;
        }
        if (arg5 > 8) {
          v9 = 3;
        }
        mc.bg.gotoAndStop(v9);
        if (arg5 > 0) {
          mc.field.text = Std.string(arg5);
          mc.field.filters = [new flash.filters.GlowFilter(0, 0.5, 6, 6, 1)];
        } else {
          mc.field._visible = false;
        }
      }
      mc.iconGather._visible = false;
      mc.iconEmpty._visible = false;
      if (arg6 != null) {
        if (!arg6) {
          mc.iconEmpty._visible = true;
          mc.bg.gotoAndStop(3);
        } else {
          mc.iconGather._visible = true;
        }
      }
      mc._alpha = 0;
      if (!arg4) {
        Reflect.deleteField(mc, 'onRelease');
        mc._visible = false;
      } else {
        mc.onRelease = arg3;
        mc.onRollOver = function () {
          mc.filters = [new flash.filters.GlowFilter(Manager.LCD, 0.5, 4, 4, 6)];
        };

        mc.onRollOut = function () {
          mc.filters = [];
        };

      }
      this.arrows.push(mc);
    };

    v1.attachButton = function (arg0, arg1, arg2) {
      var but = this.dm.attach('mapButton', Const.DP_INTERF);
      but._x = 2;
      but._y = Const.HEI - 17;
      but.gotoAndStop(arg0);
      if (arg2 == null) {
        but.field.text = arg1;
        but._alpha = Const.OFF_ALPHA;
        return but;
      }
      but.field.text = arg1;
      if (!(arg0 == 5 || arg0 == 6)) {
        but.onRollOver = function () {
          but.filters = [new flash.filters.GlowFilter(15783838, 1, 3, 3, 3)];
        };

        but.onRollOut = function () {
          but.filters = [];
        };

      } else {
        but.onRollOver = function () {
          but._alpha = 100;
          but.filters = [new flash.filters.GlowFilter(Manager.LCD, 0.8, 4, 4, 6)];
        };

        but.onRollOut = function () {
          but._alpha = 70;
          but.filters = [];
        };

      }
      but.onRelease = arg2;
      return but;
    };

    v1.between = function (arg0, arg1, arg2, arg3) {
      if (arg1 == arg2.y && arg2.y == arg3.y) {
        if (arg2.x < arg3.x && arg0 >= arg2.x && arg0 <= arg3.x) {
          return true;
        }
        if (arg2.x > arg3.x && arg0 >= arg3.x && arg0 <= arg2.x) {
          return true;
        }
      }
      if (arg0 == arg2.x && arg2.x == arg3.x) {
        if (arg2.y < arg3.y && arg1 >= arg2.y && arg1 <= arg3.y) {
          return true;
        }
        if (arg2.y > arg3.y && arg1 >= arg3.y && arg1 <= arg2.y) {
          return true;
        }
      }
      return false;
    };

    v1.bg = null;
    v1.black = null;
    v1.blackExp = null;
    v1.buildings = null;
    v1.checkDomains = function () {
      var v2 = this.root._url.substr(0, this.root._url.indexOf('map'));
      var v3 = 0;
      var v4 = Manager.D;
      while (v3 < v4.length) {
        var v5 = v4[v3];
        ++v3;
        if (MapCommon.encode(v2) == v5) {
          return true;
        }
      }
      Manager.fatal('ckdm');
      return false;
    };

    v1.cityArr = null;
    v1.cityX = null;
    v1.cityY = null;
    v1.clearStatus = function () {
      this.status.bg._visible = false;
      this.status.field.text = '';
      this.status.field2.text = '';
    };

    v1.coords = function (arg0, arg1, arg2) {
      if (arg2 == null) {
        arg2 = true;
      }
      var v5 = MapCommon.coords(this.cityX, this.cityY, arg0, arg1);
      if (!arg2) {
        return v5.x + v5.sep + v5.y;
      } else {
        return '[ ' + v5.x + v5.sep + v5.y + ' ]';
      }
    };

    v1.cx = null;
    v1.cy = null;
    v1.dispMap = null;
    v1.dispY = null;
    v1.dispose = function () {
      if (Manager.fl_disposed) {
        return undefined;
      }
      this.screenBmp.dispose();
      this.dispMap.dispose();
      this.wmapBmp.dispose();
      this.dm.destroy();
      this.dms.destroy();
      this.dmBg.destroy();
      Reflect.deleteField(flash.Lib._global, 'api');
      Reflect.deleteField(this.root, 'onEnterFrame');
      Reflect.deleteField(flash.Lib._root, 'onEnterFrame');
      Boot.man = null;
      Manager.fl_disposed = true;
      flash.Lib._root.gotoAndStop(1);
      this.root.removeMovieClip();
    };

    v1.dm = null;
    v1.dmBg = null;
    v1.dms = null;
    v1.expButton = null;
    v1.expButtons = null;
    v1.expeditions = null;
    v1.fl_betterMap = null;
    v1.fl_danger = null;
    v1.fl_disp = null;
    v1.fl_map = null;
    v1.fl_mapZoom = null;
    v1.fl_pathEditor = null;
    v1.fl_pathPreview = null;
    v1.fl_slow = null;
    v1.fl_townMode = null;
    v1.fl_tracker = null;
    v1.fpsOk = function () {
      if (this.phase == PHASE.Moving) {
        return false;
      }
      var v2 = mt.Timer.wantedFPS / mt.Timer.tmod >= Manager.LOW_FPS;
      if (!v2) {
        this.fl_slow = true;
        this.screenBmp.dispose();
        this.screenBmp = null;
      }
      return v2 && !this.fl_slow;
    };

    v1.getHorribleWord = function (arg0) {
      var v3 = Manager.getListFrom(Lang.get.resolve('HorribleWords'));
      var v4 = 0;
      var v5 = 8;
      while (true) {
        var v6 = v3[Std.random(v3.length)];
        if (Math.abs(arg0.length - v6.length) <= v5) {
          return v6;
        }
        if (v4 % 10 == 0) {
          ++v5;
        }
        ++v4;
      }
      return arg0;
    };

    v1.getMapCenter = function () {
      if (!this.fl_townMode) {
        return {'x': this.fl_townMode ? this.cityX : this.cx, 'y': this.cy};
      }
      return {'x': this.fl_townMode ? this.cityX : this.cx, 'y': this.cityY};
    };

    v1.getMapScale = function () {
      if (!this.fl_mapZoom) {
        return Math.min(Const.WID * 0.9 / 30 * Const.MWID, Const.HEI * 0.9 / 30 * Const.MHEI);
      } else {
        return Math.min(Const.WID * 0.9 / 30 * Const.BIG_MAP_WID, Const.HEI * 0.9 / 30 * Const.BIG_MAP_WID);
      }
    };

    v1.getPathPoints = function (arg0, arg1) {
      var v4 = arg0.split(MapCommon.GroupSep);
      var v5 = new Array();
      if (arg1) {
        v5.push({'x': this.cityX, 'y': this.cityY});
      }
      var v6 = 0;
      while (v6 < v4.length) {
        var v7 = v4[v6];
        ++v6;
        var v8 = v7.split(MapCommon.CoordSep);
        v5.push({'x': Std.parseInt(v8[0]), 'y': Std.parseInt(v8[1])});
      }
      if (arg1 && (v5[v5.length - 1].x == this.cityX || v5[v5.length - 1].y == this.cityY)) {
        v5.push({'x': this.cityX, 'y': this.cityY});
      }
      return v5;
    };

    v1.getPhaseName = function (arg0) {
      var v3 = arg0;
      var v4 = v3[1];
      switch (v4) {
          return '-unknown(' + Std.string(arg0) + ')-';
        case 0:
          return 'INIT';
          break;
        case 1:
          return 'REINIT';
          break;
        case 2:
          return 'MAIN';
          break;
        case 3:
          return 'SERVER';
          break;
        case 4:
          return 'MOVING';
          break;
        case 5:
          return 'MAP';
          break;
        case 6:
          return 'EXPLIST';
      }
    };

    v1.globalMap = null;
    v1.globalModeButton = null;
    v1.hallu = null;
    v1.hangTimer = null;
    v1.hideExpList = function () {
      var v2 = 0;
      var v3 = this.expButtons;
      while (v2 < v3.length) {
        var v4 = v3[v2];
        ++v2;
        v4.removeMovieClip();
      }
      v2 = 0;
      v3 = this.abList;
      while (v2 < v3.length) {
        v4 = v3[v2];
        ++v2;
        v4._visible = true;
      }
      this.expButtons = new Array();
      this.expButton.field.text = Lang.get.resolve('expedition');
      this.expButton.onRelease = @closure('showExpList', this);
      this.blackExp.removeMovieClip();
      this.mapButton._alpha = 100;
      var f = @closure('showMap', this);
      this.mapButton.onRelease = function () {
        return f(MAP_MODE.Close);
      };

      this.tagModeButton._alpha = 100;
      var f1 = @closure('showMap', this);
      this.tagModeButton.onRelease = function () {
        return f1(MAP_MODE.Tags);
      };

      this.globalModeButton._alpha = 100;
      var f2 = @closure('showMap', this);
      this.globalModeButton.onRelease = function () {
        return f2(MAP_MODE.Global);
      };

      this.zoomButton._visible = this.isBigMap();
      if (!this.fl_townMode) {
        this.setPhase(PHASE.Map);
      } else {
        this.setPhase(PHASE.Main);
      }
    };

    v1.hideMap = function () {
      if (this.fl_townMode) {
        return undefined;
      }
      var v2 = 0;
      var v3 = this.icons;
      while (v2 < v3.length) {
        var v4 = v3[v2];
        ++v2;
        v4.mc._visible = true;
      }
      this.expButton._visible = false;
      Reflect.deleteField(this.root, 'onRelease');
      this.setPhase(PHASE.Main);
      v2 = 0;
      v3 = this.abList;
      while (v2 < v3.length) {
        v4 = v3[v2];
        ++v2;
        v4.removeMovieClip();
      }
      this.abList = new Array();
      this.setStatus(Lang.get.resolve('pos') + ' ' + this.coords(this.cx, this.cy, false));
      this.cityArr._alpha = 100;
      this.mapButton.gotoAndStop(1);
      this.mapButton.field.text = Lang.get.resolve('map');
      var f = @closure('showMap', this);
      this.mapButton.onRelease = function () {
        return f(MAP_MODE.Normal);
      };

      this.tagModeButton._visible = false;
      this.globalModeButton._visible = false;
      this.zoomButton._visible = false;
      v2 = 0;
      v3 = Manager.souls;
      while (v2 < v3.length) {
        v4 = v3[v2];
        ++v2;
        v4.dispose();
      }
      Manager.souls = [];
    };

    v1.hidePath = function () {
      this.path = null;
      this.pathStep = -1;
      var v2 = flash.SharedObject.getLocal('mapTrack');
      v2.data.pathId = null;
      v2.data.pathStep = -1;
      v2.flush();
      this.hideExpList();
      this.showMap(MAP_MODE.Normal);
    };

    v1.humans = null;
    v1.icons = null;
    v1.initField = function (arg0) {
      arg0.field.text = '';
      arg0.field2.text = '';
      arg0.bg._visible = false;
      arg0.bg.filters = [new flash.filters.GlowFilter(Manager.LCD, 1, 3, 3, 3)];
      arg0.bg._alpha = 60;
    };

    v1.inte = function (arg0, arg1, arg2) {
      return arg0 + (arg1 - arg0) * arg2;
    };

    v1.isBigMap = function () {
      return Const.MWID >= Const.BIG_MAP_WID;
    };

    v1.kills = null;
    v1.knownMap = null;
    v1.lastCoord = null;
    v1.loadPref = function (arg0, arg1, arg2) {
      var v5 = flash.SharedObject.getLocal('mapPrefs');
      if (!Reflect.hasOwnProperty.call(v5.data, arg0)) {
        return arg2;
      } else {
        var v6 = v5.data[arg0];
        if (Type.typeof(v6) == arg1) {
          return v6;
        } else {
          return arg2;
        }
      }
    };

    v1.localFog = null;
    v1.main = function () {
      if (Manager.fl_disposed) {
        return undefined;
      }
      if (!mt.Timer.paused) {
        ++mt.Timer.frameCount;
        var v2 = getTimer();
        mt.Timer.deltaT = (v2 - mt.Timer.oldTime) / 1000.0;
        mt.Timer.oldTime = v2;
        if (mt.Timer.deltaT >= mt.Timer.maxDeltaTime) {
          mt.Timer.deltaT = 1 / mt.Timer.wantedFPS;
        } else {
          mt.Timer.calc_tmod = mt.Timer.calc_tmod * mt.Timer.tmod_factor + (1 - mt.Timer.tmod_factor) * mt.Timer.deltaT * mt.Timer.wantedFPS;
        }
        mt.Timer.tmod = mt.Timer.calc_tmod;
      }
      if (this.fl_townMode && this.phase != PHASE.ExpList) {
        this.setPhase(PHASE.Main);
      }
      v2 = this.phase;
      var v3 = v2[1];
      switch (v3) {
          Manager.fatal('unknown phase !');
          break;
        case 0:
        case 2:
          if (this.starting != null) {
            this.starting._alpha -= 12;
            if (this.starting._alpha <= 0) {
              this.starting.removeMovieClip();
              this.starting = null;
            }
          }
          this.mapButton._visible = true;
          this.updateMapScrolling();
          if (this.moves > 0 && this.arrows.length == 0) {
            var f = @closure('onMove', this);
            this.attachArrow(Const.WID * 0.5, 30, 0, function () {
              return f(0, -1);
            }, this.cy > 0, this.neightbours[0], this.neigDrops[0]);
            var f1 = @closure('onMove', this);
            this.attachArrow(Const.WID - 30, Const.HEI * 0.5, 90, function () {
              return f1(1, 0);
            }, this.cx < Const.MWID - 1, this.neightbours[1], this.neigDrops[1]);
            var f2 = @closure('onMove', this);
            this.attachArrow(Const.WID * 0.5, Const.HEI - 30, 180, function () {
              return f2(0, 1);
            }, this.cy < Const.MHEI - 1, this.neightbours[2], this.neigDrops[2]);
            var f3 = @closure('onMove', this);
            this.attachArrow(30, Const.HEI * 0.5, 270, function () {
              return f3(-1, 0);
            }, this.cx > 0, this.neightbours[3], this.neigDrops[3]);
          }
          v3 = 0;
          var v4 = 0;
          var v5 = this.arrows;
          while (v4 < v5.length) {
            var v6 = v5[v4];
            ++v4;
            v6.field.text = Std.string(this.neightbours[v3]);
            ++v3;
            if (v6._alpha < 100) {
              v6._alpha = Math.min(100, v6._alpha + 7 * mt.Timer.tmod);
            }
          }
          v4 = 0;
          v5 = this.icons;
          while (v4 < v5.length) {
            v6 = v5[v4];
            ++v4;
            v6.step += 0.2;
            if (v6.step < 2) {
              var v7 = Math.max(0, Math.min(1, v6.step));
              v6.mc._alpha = Math.min(100, 2 * v7 * 100);
              v6.mc._xscale = 100 + 100 * (1 - v7);
              v6.mc._yscale = 100 * v7;
              if (v6.mc._currentframe != 1) {
                if (v6.glow == null) {
                  v6.mc.filters = [new flash.filters.GlowFilter(Manager.LCD, 1 - v6.step, 7 + 10 * v7, 7 + 10 * v7, 4)];
                } else {
                  v6.mc.filters = [v6.glow, new flash.filters.GlowFilter(Manager.LCD, 1 - v6.step, 7 + 10 * v7, 7 + 10 * v7, 4)];
                }
              } else {
                v6.mc.filters = [new flash.filters.GlowFilter(Manager.LCD, 0.5, 4, 4, 2), new flash.filters.GlowFilter(Manager.LCD, 1 - v6.step, 7 + 10 * v7, 7 + 10 * v7, 4)];
              }
            }
          }
          break;
        case 3:
          this.screen.filters = [];
          break;
        case 4:
          break;
        case 5:
          this.mapStep = Math.min(1, this.mapStep + 0.04);
          if (this.mapStep < 2) {
            this.wmapCont.left._x = Math.cos(this.mapStep * Math.PI * 4) * (1 - this.mapStep) * 12;
            this.wmapCont.right._x = -Math.cos(this.mapStep * Math.PI * 4) * (1 - this.mapStep) * 8;
            this.wmapCont.right._y = -Math.cos(this.mapStep * Math.PI * 4) * (1 - this.mapStep) * 5;
            this.wmapCont.left._alpha = Math.min(100, 100 * this.mapStep);
            this.wmapCont.right._alpha = Math.min(100, Math.sin(this.mapStep * Math.PI) * 100);
            this.wmapCont._x = Const.WID * 0.5 - this.wmapCont._width * 0.5;
            this.wmapCont._y = Const.HEI * 0.5 - this.wmapCont._height * 0.5;
            this.wmapCont.filters = [new flash.filters.BlurFilter((1 - this.mapStep) * 8, (1 - this.mapStep) * 16)];
            this.black._alpha = this.mapStep * Const.BLACK_ALPHA;
          }
          this.updateMapScrolling();
          break;
        case 6:
          v3 = 0;
          var v4 = this.expButtons;
          while (v3 < v4.length) {
            var v5 = v4[v3];
            ++v3;
            if (v5._alpha < 100) {
              if (Std.random(100) != 0) {
                v5.filters = [];
              } else {
                v5.filters = [new flash.filters.BlurFilter(8, 0)];
              }
            }
          }
      }
      if (!(this.phase == PHASE.Main || this.phase == PHASE.Map)) {
        this.mapButton._alpha = Const.OFF_ALPHA;
      } else {
        this.mapButton._alpha = 100;
      }
      if (this.wmapCont != null && this.phase != PHASE.ExpList && this.phase != PHASE.Map && !this.fl_townMode) {
        this.wmapCont._alpha -= 5;
        v2 = 1 - this.wmapCont._alpha / 100;
        this.wmapCont.filters = [new flash.filters.BlurFilter(v2 * 16, 0)];
        this.black._alpha -= 5;
        this.mapButton._alpha = Const.OFF_ALPHA;
        if (this.wmapCont._alpha <= 0) {
          this.removeMapMCs();
          this.mapButton._alpha = 100;
        }
      }
      if (this.tip.field.text != '') {
        this.dms.over(this.tip);
        this.tip._x = Math.floor(this.bg._x + this.over._x);
        this.tip._y = Math.min(Math.floor(this.bg._y + this.over._y + 25), Const.HEI - 10);
        this.psychoField(this.tip);
      }
      if (this.phase == PHASE.Map) {
        this.psychoField(this.status);
      }
      if (this.scanner._name != null) {
        this.scanner._y += 10 * mt.Timer.tmod;
        v2 = 0;
        v3 = this.icons;
        while (v2 < v3.length) {
          var v4 = v3[v2];
          ++v2;
          if (v4.mc._currentframe == 1 && v4.mc._y < this.scanner._y) {
            v4.step = this.fpsOk() ? 0 : 1;
            v4.mc.blendMode = 'layer';
            v4.mc.gotoAndStop(v4.frame + 1);
          }
        }
        if (this.scanner._y > Const.HEI + this.scanner._height) {
          this.scanner.removeMovieClip();
        }
      }
      if (this.phase != PHASE.Main) {
        v2 = 0;
        while (v2 < this.arrows.length) {
          v3 = this.arrows[v2];
          v3._alpha -= 8;
          if (v3._alpha <= 0) {
            v3.removeMovieClip();
            this.arrows.splice(v2, 1);
            --v2;
          }
          ++v2;
        }
      }
      if (this.phase == PHASE.Server || this.phase == PHASE.Moving) {
        v2 = 0;
        while (v2 < this.icons.length) {
          v3 = this.icons[v2];
          v3.mc._alpha -= 9;
          if (v3.mc._alpha <= 0) {
            v3.mc.removeMovieClip();
            this.icons.splice(v2, 1);
            --v2;
          }
          ++v2;
        }
      }
      if (this.oldMouse != this.root._xmouse + Const.WID * this.root._ymouse) {
        this.hangTimer = 0;
      } else {
        this.hangTimer += mt.Timer.tmod;
      }
      this.oldMouse = this.root._xmouse + Const.WID * this.root._ymouse;
      if (!(!this.fl_townMode && (this.phase == PHASE.Main || this.phase == PHASE.Server) && this.hangTimer < Manager.HANG_LIMIT && this.root._xmouse != 0 && this.root._ymouse != 0)) {
        this.updateScroll(0, 0);
      } else {
        v2 = this.root._xmouse - Const.WID * 0.5;
        v3 = this.root._ymouse - Const.HEI * 0.5;
        v4 = Math.sqrt(Math.pow(v2, 2) + Math.pow(v3, 2));
        this.updateScroll(-v2, -v3);
      }
      if (!this.fpsOk()) {
        if (this.noise._visible) {
          this.noise._visible = false;
        }
      } else {
        if (!this.noise._visible) {
          this.noise._visible = true;
        }
        if (this.noise._alpha != 0) {
          this.noise._alpha = Std.random(6);
          this.noise.smc._xscale = 100 * (Std.random(2) * 2 - 1);
          this.noise.smc._yscale = 100 * (Std.random(2) * 2 - 1);
        } else {
          if (Std.random(15) == 0) {
            this.noise._alpha = 5;
          }
        }
      }
      if (this.hallu != null) {
        if (this.phase == PHASE.Main && !this.hallu._visible && Std.random(100) == 0) {
          this.hallu._visible = true;
          this.hallu.gotoAndStop(Std.random(this.hallu._totalframes) + 1);
        }
        if (this.hallu._visible) {
          this.hallu._x = Std.random(30) * (Std.random(2) * 2 - 1);
          this.hallu._y = Std.random(30) * (Std.random(2) * 2 - 1);
          if (Std.random(3) == 0) {
            this.hallu._visible = false;
          }
        }
      }
      if (!this.fpsOk()) {
        if (this.screenDist._visible) {
          this.screenDist._visible = false;
        }
      } else {
        if (!this.screenDist._visible) {
          this.screenDist._visible = true;
        }
        this.screenBmp.draw(this.screen);
      }
      v2 = new flash.geom.Rectangle(0, 0, Const.WID, Const.HEI);
      v3 = new flash.geom.Point(0, 0);
      if (this.fpsOk()) {
        if (!this.fl_disp) {
          this.fl_disp = Std.random(30) == 0;
          if (this.fl_disp) {
            this.dispY = Std.random(Const.HEI) - 50;
          }
        }
        if (this.fl_disp) {
          v4 = new flash.geom.Point(0, this.dispY);
          var v5 = Std.random(3) + 8;
          var v6 = new flash.filters.DisplacementMapFilter(this.dispMap, v4, 4, 4, v5, 0);
          this.screenBmp.applyFilter(this.screenBmp, v2, v3, v6);
          this.dispY += Std.random(10) * (Std.random(2) * 2 - 1);
          this.fl_disp = Std.random(20) != 0;
        }
      }
      if (!(!this.fl_townMode && this.fl_danger && this.phase == PHASE.Main)) {
        if (this.alarm != null) {
          this.alarm._alpha -= mt.Timer.tmod;
          if (this.alarm._alpha <= 0) {
            this.alarm.removeMovieClip();
            this.alarm = null;
          }
        }
      } else {
        if (this.alarm == null) {
          this.alarm = this.dm.attach('alarm', Const.DP_FX);
          this.alarm._x = Const.WID * 0.5;
          this.alarm._y = Const.HEI * 0.5;
          this.alarm._xscale = 100 * (Std.random(2) * 2 - 1);
          this.alarm._alpha = 0;
          this.alarm.filters = [new flash.filters.BlurFilter(5, 15)];
          this.alarm.blendMode = 'overlay';
        }
        if (this.alarm._alpha < 24) {
          this.alarm._alpha += mt.Timer.tmod;
        }
      }
      if (this.fl_tracker && this.phase != PHASE.Map && this.phase != PHASE.ExpList) {
        v4 = 0.4;
        v5 = Math.atan2(this.trackY - this.cy, this.trackX - this.cx);
        v6 = (this.trackX - this.cx) * Const.CWID;
        var v7 = (this.trackY - this.cy) * Const.CHEI;
        if (Math.abs(v7) > Const.HEI * v4) {
          v6 = Math.cos(v5) * Const.HEI * v4;
          v7 = Math.abs(Const.HEI * v4 / v7) * v7;
        }
        if (Math.abs(v6) > Const.WID * v4) {
          v6 = Math.abs(Const.WID * v4 / v6) * v6;
          v7 = Math.sin(v5) * Const.WID * v4;
        }
        this.cityArr._alpha = 100;
        this.cityArr._rotation = 180 * v5 / Math.PI;
        this.cityArr._x += (Const.WID * 0.5 + v6 - this.cityArr._x) * 0.1;
        this.cityArr._y += (Const.HEI * 0.5 + v7 - this.cityArr._y) * 0.1;
        this.cityArr._y = Math.min(this.cityArr._y, Const.HEI - 20);
        if (!(Math.abs(this.cx - this.trackX) <= 1 && Math.abs(this.cy - this.trackY) <= 1)) {
          this.cityArr.gotoAndStop(1);
        } else {
          this.cityArr.gotoAndStop(2);
          this.cityArr._rotation = 0;
        }
      }
    };

    v1.mapButton = null;
    v1.mapDetails = null;
    v1.mapGet = function (arg0, arg1) {
      return this.knownMap[arg0 + arg1 * Const.MWID];
    };

    v1.mapId = null;
    v1.mapSet = function (arg0, arg1, arg2) {
      this.knownMap[arg0 + arg1 * Const.MWID] = arg2;
      return this.knownMap[arg0 + arg1 * Const.MWID];
    };

    v1.mapStep = null;
    v1.mapX = null;
    v1.mapY = null;
    v1.modeToString = function (arg0) {
      var v3 = arg0;
      var v4 = v3[1];
      switch (v4) {
          return 'UNKNOWN !';
        case 0:
          return 'Normal';
          return 'UNKNOWN !';
        case 1:
          return 'Tags';
          return 'UNKNOWN !';
        case 2:
          return 'Global';
          return 'UNKNOWN !';
        case 3:
          return 'Close';
          return 'UNKNOWN !';
      }
      return 'UNKNOWN !';
    };

    v1.moveMap = function (arg0, arg1) {
      if (!(this.bg._x != Math.floor(arg0) || this.bg._y != Math.floor(arg1))) {
        return false;
      } else {
        this.bg._x = Math.floor(arg0);
        this.bg._y = Math.floor(arg1);
        this.bg.mask._x = -this.bg._x;
        this.bg.mask._y = -this.bg._y;
        var v4 = Math.floor((-this.bg._x + Const.CWID) / Const.CWID * Const.BGWID);
        var v5 = Math.floor((-this.bg._y + Const.CHEI) / Const.CHEI * Const.BGHEI);
        this.bg.base._x = v4 * (Const.CWID * Const.BGWID);
        this.bg.base._y = v5 * (Const.CHEI * Const.BGHEI);
        this.bg.blur._x = v4 * (Const.CWID * Const.BGWID);
        this.bg.blur._y = v5 * (Const.CHEI * Const.BGHEI);
        return true;
      }
    };

    v1.moves = null;
    v1.neigDrops = null;
    v1.neightbours = null;
    v1.noise = null;
    v1.oldMouse = null;
    v1.onArrive = function () {
      if (this.phase != PHASE.Moving) {
        return undefined;
      }
      if (this.icons.length == 0) {
        var v2 = new mt.Rand(this.cx + this.cy * Const.MWID);
        var v3 = 0;
        var v4 = this.response._h;
        while (v3 < v4) {
          ++v3;
          var v5 = v3;
          if (v5 != 0) {
            this.addIcon(v2, 2);
          } else {
            this.addIcon(null, 2);
          }
        }
        v3 = 0;
        v4 = this.response._z;
        while (v3 < v4) {
          ++v3;
          v5 = v3;
          this.addIcon(v2, 1);
        }
        v3 = 0;
        v4 = this.kills;
        while (v3 < v4) {
          ++v3;
          v5 = v3;
          this.addIcon(v2, 3);
        }
        if (this.icons.length > 0) {
          this.scan();
        }
      }
      this.raStep = 0;
      this.moveMap(this.tx, this.ty);
      this.redrawFog();
      this.setStatus(Lang.get.resolve('pos') + ' ' + this.coords(this.cx, this.cy, false));
      this.setPhase(PHASE.Main);
    };

    v1.onAskedMeIfReady = function () {
      if (this.phase == PHASE.Init) {
        this.setPhase(PHASE.Moving);
      }
    };

    v1.onMove = function (arg0, arg1) {
      if (this.phase != PHASE.Main) {
        return undefined;
      }
      if (this.moves <= 0) {
        return undefined;
      }
      this.scanner.removeMovieClip();
      this.reqDx = arg0;
      this.reqDy = arg1;
      this.setPhase(PHASE.Server);
      this.clearStatus();
      var v4 = 0;
      var v5 = this.arrows;
      while (v4 < v5.length) {
        var v6 = v5[v4];
        ++v4;
        Reflect.deleteField(v6, 'onRelease');
      }
      FlashMap.move(this.zoneId, arg0, arg1);
    };

    v1.onOutBuilding = function () {
      this.tip.field.text = '';
      this.tip.bg._visible = false;
      this.prevTip = '';
    };

    v1.onOutMapZone = function (arg0) {
      arg0._alpha = 0;
      arg0.filters = [];
      this.clearStatus();
    };

    v1.onOverBuilding = function (arg0, arg1) {
      if (this.phase == PHASE.Map) {
        return undefined;
      }
      this.tip.field.text = arg1;
      this.tip.bg._visible = true;
      this.tip.bg._width = this.tip.field.textWidth + 10;
      this.tip.bg._height = this.tip.field.textHeight;
      this.prevTip = arg1;
      this.over = arg0;
    };

    v1.onOverMapZone = function (arg0, arg1, arg2) {
      var v5 = arg0._x;
      var v6 = arg0._y;
      var v7 = arg0._parent;
      while (v7 != null) {
        v5 += v7._x;
        v6 += v7._y;
        v7 = v7._parent;
      }
      arg0._alpha = 75;
      arg0.filters = [new flash.filters.GlowFilter(Manager.LCD, 1, 6, 6, 2)];
      if (arg2 != null) {
        this.setStatus(arg1, arg2, v5 + arg0._width * 0.5, v6 - 5);
      } else {
        this.setStatus(arg1, null, v5 + arg0._width * 0.5, v6 - 5);
      }
    };

    v1.onResponse = function (arg0) {
      if (Manager.fl_disposed) {
        return undefined;
      }
      if (!this.checkDomains()) {
        return undefined;
      }
      this.response = arg0;
      if (this.phase == PHASE.Server && this.zoneId == arg0._zid) {
        FlashMap.reboot();
        return undefined;
      }
      ++this.respCpt;
      this.neightbours = arg0._neig;
      this.neigDrops = arg0._neigDrops;
      if (this.zombies == null) {
        this.zombies = arg0._z;
      }
      if (this.humans == null) {
        this.humans = arg0._h;
      }
      if (!(this.reqDx != 0 || this.reqDy != 0)) {
        if (!(arg0._z != this.zombies || arg0._h != this.humans)) {
          var v3 = 0;
          var v4 = this.icons;
          while (v3 < v4.length) {
            var v5 = v4[v3];
            ++v3;
            v5.step = 0.9;
          }
        } else {
          var v3 = 0;
          var v4 = this.icons;
          while (v3 < v4.length) {
            var v5 = v4[v3];
            ++v3;
            v5.mc.removeMovieClip();
          }
          this.icons = new Array();
        }
        if (arg0._z != this.zombies) {
          this.kills += Std.int(Math.max(0, this.zombies - arg0._z));
        }
        if (this.phase == PHASE.Map) {
          this.hideMap();
        }
      } else {
        this.kills = 0;
        this.revealFog(this.cx + this.reqDx, this.cy + this.reqDy);
        this.redrawFog();
        this.cx += this.reqDx;
        this.cy += this.reqDy;
        if (this.mapGet(this.cx, this.cy) == null && arg0._c != null && arg0._c != 0) {
          this.addBuilding(arg0._c, this.cx, this.cy);
        }
        this.mapSet(this.cx, this.cy, arg0._c);
      }
      this.trackPath(this.path);
      this.zombies = arg0._z;
      this.humans = arg0._h;
      this.zoneId = arg0._zid;
      if (this.mapDetails != null) {
        var v3 = false;
        if (this.mapDetails[this.cx + this.cy * Const.MWID] != null) {
          v3 = this.mapDetails[this.cx + this.cy * Const.MWID]._s;
        }
        var v4 = {'_z': arg0._z, '_c': arg0._c, '_t': arg0._t, '_nvt': false, '_s': v3};
        this.mapDetails[this.cx + this.cy * Const.MWID] = v4;
      }
      if (this.phase != PHASE.Init) {
        this.setPhase(PHASE.Moving);
      }
      this.setTarget(this.cx, this.cy);
      this.fl_danger = arg0._state;
      this.moves = arg0._m;
      if (this.moves <= 0) {
        v3 = 0;
        v4 = this.arrows;
        while (v3 < v4.length) {
          var v5 = v4[v3];
          ++v3;
          v5.removeMovieClip();
        }
        this.arrows = new Array();
      }
      this.reqDx = 0;
      this.reqDy = 0;
    };

    v1.onSelectZone = function (arg0, arg1) {
      if (!this.fl_pathEditor) {
        if (this.fl_townMode) {
          return undefined;
        }
        if (this.fl_tracker) {
          this.setTracker(arg0, arg1);
        }
        this.hideMap();
      } else {
        if (this.path.length > MapCommon.MaxPathStringLength) {
          return undefined;
        }
        if (arg0 != this.lastCoord.x && arg1 != this.lastCoord.y) {
          return undefined;
        }
        if (arg0 == this.lastCoord.x && arg1 == this.lastCoord.y) {
          return undefined;
        }
        if (arg0 == this.cityX && arg1 == this.cityY) {
          return undefined;
        }
        this.lastCoord = {'x': arg0, 'y': arg1};
        if (this.path != null) {
          this.path += '|' + arg0 + ':' + arg1;
        } else {
          this.path = arg0 + ':' + arg1;
        }
        this.showMap(MAP_MODE.Normal);
        FlashMap.sendCoord(this.cityX, this.cityY, arg0, arg1);
      }
    };

    v1.over = null;
    v1.path = null;
    v1.pathMC = null;
    v1.pathStep = null;
    v1.phase = null;
    v1.prevTip = null;
    v1.prevTipX = null;
    v1.prevTipY = null;
    v1.printMap = function (arg0) {
      var v3 = 0;
      var v4 = 0;
      var v5 = '\n   ';
      var v6 = 0;
      var v7 = Const.MWID;
      while (v6 < v7) {
        ++v6;
        var v8 = v6;
        if (v8 >= 10) {
          v5 += v8 + '';
        } else {
          v5 += v8 + ' ';
        }
      }
      v5 += '\n0  ';
      v6 = 0;
      while (v6 < arg0.length) {
        v7 = arg0[v6];
        ++v6;
        if (v7 == null) {
          v5 += '·';
        } else {
          v5 += '' + v7;
        }
        if (this.cx == v3 && this.cy == v4) {
          v5 = v5.substr(0, v5.length - 1);
          v5 += 'x';
        }
        ++v3;
        v5 += ' ';
        if (v3 >= Const.MWID) {
          v3 = 0;
          ++v4;
          if (v4 < Const.MHEI) {
            if (v4 >= 10) {
              v5 += '\n' + v4 + ' ';
            } else {
              v5 += '\n' + v4 + '  ';
            }
          }
        }
      }
    };

    v1.psychoCD = null;
    v1.psychoField = function (arg0) {
      this.psychoCD -= mt.Timer.tmod;
      if (arg0.field.text != '' && this.psychoCD <= 0 && this.psychoTimer <= 0 && Std.random(120) == 0) {
        this.prevTip = arg0.field.text;
        this.prevTipX = arg0._x;
        this.prevTipY = arg0._y;
        arg0.field.text = this.getHorribleWord(this.prevTip);
        this.psychoTimer = 20 + Std.random(15);
      }
      if (this.psychoTimer > 0) {
        this.psychoTimer -= mt.Timer.tmod;
        arg0._x += (Std.random(2) * 2 - 1) * Std.random(2);
        arg0.field.filters = [new flash.filters.BlurFilter(Std.random(4), Std.random(2))];
        if (this.psychoTimer <= 0) {
          this.resetPsychoField(arg0);
          this.psychoCD = 250 + Std.random(650);
        }
      }
    };

    v1.psychoTimer = null;
    v1.raStep = null;
    v1.redrawFog = function () {
      if (this.fl_townMode || this.fl_pathEditor) {
        return undefined;
      }
      this.localFog._x = Const.CWID;
      this.localFog._y = Const.CHEI;
      this.localFog.holes.clear();
      var v2 = -2;
      while (v2 < 3) {
        ++v2;
        var v3 = v2;
        var v4 = -2;
        while (v4 < 3) {
          ++v4;
          var v5 = v4;
          if (this.revealedMap[this.cx + v3][this.cy + v5] == true) {
            this.localFog.holes.beginFill(0);
            this.localFog.holes.moveTo(v3 * Const.CWID, v5 * Const.CHEI);
            this.localFog.holes.lineTo((v3 + 1) * Const.CWID, v5 * Const.CHEI);
            this.localFog.holes.lineTo((v3 + 1) * Const.CWID, (v5 + 1) * Const.CHEI);
            this.localFog.holes.lineTo(v3 * Const.CWID, (v5 + 1) * Const.CHEI);
            this.localFog.holes.lineTo(v3 * Const.CWID, v5 * Const.CHEI);
            this.localFog.holes.endFill();
          }
        }
      }
    };

    v1.removeMapMCs = function () {
      this.mapButton.gotoAndStop(1);
      this.mapButton.field.text = Lang.get.resolve('map');
      this.tagModeButton._visible = false;
      this.black._visible = false;
      this.wmapBmp.dispose();
      this.soulsCont.removeMovieClip();
      this.soulsCont = null;
      this.wmapCont.removeMovieClip();
      this.wmapCont = null;
      this.wmapButtonCont.removeMovieClip();
      this.wmapButtonCont = null;
    };

    v1.reqDx = null;
    v1.reqDy = null;
    v1.resetPsychoField = function (arg0) {
      this.psychoTimer = 0;
      arg0.field.text = this.prevTip;
      arg0._x = this.prevTipX;
      arg0._y = this.prevTipY;
      arg0.field.filters = [];
    };

    v1.respCpt = null;
    v1.response = null;
    v1.revealFog = function (arg0, arg1) {
      this.revealedMap[arg0][arg1] = true;
    };

    v1.revealedMap = null;
    v1.root = null;
    v1.savePref = function (arg0, arg1) {
      var v4 = flash.SharedObject.getLocal('mapPrefs');
      v4.data[arg0] = arg1;
      v4.flush();
    };

    v1.scan = function () {
      if (this.fl_townMode) {
        return undefined;
      }
      this.scanner.removeMovieClip();
      this.scanner = this.dm.attach('fx_scan', Const.DP_FX);
      this.scanner.blendMode = 'add';
      this.scanner._alpha = 20;
    };

    v1.scanner = null;
    v1.screen = null;
    v1.screenBmp = null;
    v1.screenDist = null;
    v1.selectPath = function (arg0) {
      this.path = arg0._p;
      this.pathStep = -1;
      this.trackPath(this.path);
      var v3 = flash.SharedObject.getLocal('mapTrack');
      v3.data.pathId = arg0._i;
      v3.flush();
      this.hideExpList();
      this.showMap(MAP_MODE.Normal);
    };

    v1.setPhase = function (arg0) {
      if (arg0 == this.phase) {
        return undefined;
      }
      this.phase = arg0;
    };

    v1.setStatus = function (arg0, arg1, arg2, arg3) {
      if (this.psychoTimer > 0) {
        this.psychoCD = Std.random(100);
        this.resetPsychoField(this.status);
      }
      this.status.field.text = arg0;
      if (arg1 == null) {
        this.status.field2.text = '';
      } else {
        this.status.field2.text = arg1;
        this.status.field2._y = this.status.field._y + this.status.field.textHeight;
      }
      var v6 = Math.max(this.status.field.textWidth, this.status.field2.textWidth);
      if (arg2 == null) {
        this.status.bg._visible = false;
        this.status._x = Const.WID - v6 * 0.5 - 10;
        this.status._y = Const.HEI - 18;
      } else {
        arg2 = Math.min(Const.WID - v6 * 0.5 - 6, arg2);
        arg2 = Math.min(Const.WID - v6 * 0.5 - 6, arg2);
        arg2 = Math.max(v6 * 0.5 + 6, arg2);
        arg3 = Math.max(22, arg3);
        this.status._x = Math.floor(arg2);
        this.status._y = Math.floor(arg3);
        this.status.bg._visible = true;
        this.status.bg._width = v6 + 10;
        this.status.bg._height = this.status.field.textHeight + this.status.field2.textHeight;
      }
    };

    v1.setTarget = function (arg0, arg1) {
      this.tx = Const.WID * 0.5 - Const.CWID * 0.5 - arg0 * Const.CWID;
      this.ty = Const.HEI * 0.5 - Const.CHEI * 0.5 - arg1 * Const.CHEI;
    };

    v1.setTracker = function (arg0, arg1) {
      this.trackX = arg0;
      this.trackY = arg1;
      var v4 = flash.SharedObject.getLocal('mapTrack');
      v4.data.tx = this.trackX;
      v4.data.ty = this.trackY;
      v4.data.mapId = this.mapId;
      v4.flush();
    };

    v1.showExpList = function () {
      if (this.phase != PHASE.Map && !this.fl_townMode) {
        return undefined;
      }
      Reflect.deleteField(this.wmapCont, 'onRelease');
      this.blackExp = this.dms.attach('blackMask', Const.DP_INTERF);
      this.blackExp._alpha = 70;
      this.setStatus('');
      this.expButtons = new Array();
      this.setPhase(PHASE.ExpList);
      this.expButton.field.text = Lang.get.resolve('close');
      this.expButton.onRelease = @closure('hideExpList', this);
      this.black._visible = true;
      this.black._alpha = Const.BLACK_ALPHA;
      this.mapButton._alpha = Const.OFF_ALPHA;
      this.tagModeButton._alpha = Const.OFF_ALPHA;
      this.globalModeButton._alpha = Const.OFF_ALPHA;
      this.zoomButton._visible = false;
      Reflect.deleteField(this.mapButton, 'onRelease');
      Reflect.deleteField(this.tagModeButton, 'onRelease');
      Reflect.deleteField(this.globalModeButton, 'onRelease');
      var v2 = 0;
      var v3 = this.abList;
      while (v2 < v3.length) {
        var v4 = v3[v2];
        ++v2;
        v4._visible = false;
      }
      this.addExp(Lang.get.resolve('cancelExp'), @closure('hidePath', this), true);
      v2 = 0;
      v3 = this.expeditions;
      while (v2 < v3.length) {
        v4 = v3[v2];
        ++v2;
        var f = [@closure('selectPath', this)];
        var e1 = [v4];
        this.addExp(v4._n, function (e1, f) {
          return function () {
            return f[0](e1[0]);
          };
        }(e1, f));
      }
    };

    v1.showMap = function (arg0) {
      if (!this.checkDomains()) {
        return undefined;
      }
      if (this.phase == PHASE.Init || this.phase == PHASE.ReInit) {
        return undefined;
      }
      if (arg0 == null) {
        Manager.fatal('map mode is null !');
        return undefined;
      }
      var v3 = 0;
      var v4 = Manager.souls;
      while (v3 < v4.length) {
        var v5 = v4[v3];
        ++v3;
        v5.dispose();
      }
      if (arg0 == MAP_MODE.Close && this.wmapCont != null) {
        this.hideMap();
        return undefined;
      }
      if (arg0 != MAP_MODE.Close && this.wmapCont != null) {
        if (!this.fl_townMode) {
          this.hideMap();
        } else {
          v3 = 0;
          v4 = this.abList;
          while (v3 < v4.length) {
            v5 = v4[v3];
            ++v3;
            v5.removeMovieClip();
          }
          this.abList = new Array();
        }
        this.removeMapMCs();
      }
      if (this.phase != PHASE.Main) {
        return undefined;
      }
      if (!this.fl_townMode) {
        this.globalModeButton.gotoAndStop(2);
        this.globalModeButton._visible = true;
        var f = @closure('showMap', this);
        this.globalModeButton.onRelease = function () {
          return f(MAP_MODE.Global);
        };

      }
      this.tagModeButton.gotoAndStop(2);
      this.tagModeButton._visible = true;
      var f1 = @closure('showMap', this);
      this.tagModeButton.onRelease = function () {
        return f1(MAP_MODE.Tags);
      };

      v3 = arg0;
      v4 = v3[1];
      switch (v4) {
        case 1:
          this.tagModeButton.gotoAndStop(3);
          var f2 = @closure('showMap', this);
          this.tagModeButton.onRelease = function () {
            return f2(MAP_MODE.Normal);
          };

          this.globalModeButton.gotoAndStop(3);
          var f3 = @closure('showMap', this);
          this.globalModeButton.onRelease = function () {
            return f3(MAP_MODE.Normal);
          };

          break;
        case 2:
          this.globalModeButton.gotoAndStop(3);
          var f4 = @closure('showMap', this);
          this.globalModeButton.onRelease = function () {
            return f4(MAP_MODE.Normal);
          };

      }
      this.globalModeButton.field.text = Lang.get.resolve('mapModeGlobal');
      this.tagModeButton.field.text = Lang.get.resolve('mapModeTags');
      this.mapButton.gotoAndStop(4);
      this.mapButton.field.text = Lang.get.resolve('close');
      var f5 = @closure('showMap', this);
      this.mapButton.onRelease = function () {
        return f5(MAP_MODE.Close);
      };

      this.expButton._visible = true;
      this.zoomButton._visible = this.isBigMap();
      var f6 = @closure('toggleZoom', this);
      var a1 = arg0;
      this.zoomButton.onRelease = function () {
        return f6(a1);
      };

      v3 = 0;
      v4 = this.icons;
      while (v3 < v4.length) {
        v5 = v4[v3];
        ++v3;
        v5.mc._visible = false;
      }
      this.wmapBmp = new flash.display.BitmapData(Const.WID * 2, Const.HEI * 2, true, 0);
      v3 = Math.min(Const.WID / this.bg._width, Const.HEI / this.bg._height);
      this.wmapCont = this.dms.empty(Const.DP_INTERF);
      this.wmapButtonCont = this.dms.empty(Const.DP_INTERF);
      v4 = new mt.DepthManager(this.wmapCont);
      if (!this.fl_townMode) {
        this.black._alpha = 0;
      }
      this.black._visible = true;
      this.cityArr._alpha = 35;
      v5 = 0;
      var v6 = 0;
      var v7 = 0;
      var v8 = this.getMapScale();
      var v9 = v4.empty(Const.DP_BG);
      ++Const.uniq;
      var v10 = v9.createEmptyMovieClip('tags', Const.uniq);
      var v11 = (this.fl_townMode || arg0 == MAP_MODE.Global || arg0 == MAP_MODE.Tags) ? this.globalMap : this.knownMap;
      var v12 = 0;
      while (v12 < v11.length) {
        var v13 = v11[v12];
        ++v12;
        var v14 = new mt.Rand(v5 + v6 * Const.MWID);
        ++Const.uniq;
        var v15 = v9.attachMovie('mapIcon', 'icon_' + Const.uniq, Const.uniq);
        v15._x = Math.floor(Const.WID * 0.05 + v5 * 30 * v8);
        v15._y = Math.floor(Const.HEI * 0.03 + v6 * 30 * v8);
        v15._xscale = v8 * 100;
        v15._yscale = v8 * 100;
        var f7 = [@closure('onSelectZone', this)];
        var x1 = [v5];
        var y1 = [v6];
        var v16 = this.addActiveBox(this.wmapButtonCont, v15, function (y1, x1, f7) {
          return function () {
            return f7[0](x1[0], y1[0]);
          };
        }(y1, x1, f7));
        var f8 = [@closure('onOutMapZone', this)];
        var mc1 = [v16];
        v16.onRollOut = function (mc1, f8) {
          return function () {
            return f8[0](mc1[0]);
          };
        }(mc1, f8);
        v16.onReleaseOutside = @closure('onRollOut', v16);
        var v17 = null;
        var v18 = v13 == null;
        if (this.mapDetails != null) {
          var v19 = this.mapDetails[v7];
          if (v19._z > 0) {
            if (!this.fl_betterMap) {
              var v20 = MapCommon.zombieDanger(this.mapId + v5 + v6 * Const.MWID, v19._z, this.fl_betterMap);
              if (v20 != 0) {
              } else {
                  v17 = Lang.get.resolve('manyZombies');
                if (v20 != 1) {
                  v17 = Lang.get.resolve('fewZombies');
                } else {
                  v17 = Lang.get.resolve('medZombies');
                }
              }
            } else {
              v17 = v19._z + ' ' + Lang.get.resolve('zombie') + (v19._z > 1 ? 's' : '');
            }
          }
          var v20 = 0;
          if (this.fl_townMode && (v5 != this.cityX || v6 != this.cityY)) {
            var v21 = new Array();
            var v22 = 0;
            var v23 = this.users;
            while (v22 < v23.length) {
              var v24 = v23[v22];
              ++v22;
              if (v24._x == v5 && v24._y == v6) {
                v21.push(v24._n);
              }
            }
            v20 = v21.length;
            if (v21.length > 0) {
              if (v17 != null) {
                v17 += '\n' + v21.join(', ');
              } else {
                v17 = v21.join(', ');
              }
            }
          }
          if (!v18) {
            v21 = v13;
            if (v21 != 0) {
            } else {
                if (!v19._nvt) {
                  v15.gotoAndStop(4);
                } else {
                  v15.gotoAndStop(10);
                }
              if (v21 != 1) {
                if (!v19._nvt) {
                  v15.gotoAndStop(2);
                } else {
                  v15.gotoAndStop(9);
                }
              } else {
                v15.gotoAndStop(3);
              }
            }
          } else {
            v15.gotoAndStop(1);
            if (!(Const.MWID > 12 || Const.MHEI > 12)) {
              v15.hashes.gotoAndStop(1);
            } else {
              v15.hashes.gotoAndStop(2);
            }
          }
          if (v19._z != null && v13 != null) {
            ++Const.uniq;
            v21 = v10.attachMovie('mapIcon', 'icon_' + Const.uniq, Const.uniq);
            v21._x = v15._x;
            v21._y = v15._y;
            v21._width = v15._width;
            v21._height = v15._height;
            v21.gotoAndStop(6);
            v21._alpha = 15;
          }
          if (v18 && v19._c != null && v19._c != 0) {
            v15.gotoAndStop(5);
            v13 = v19._c;
          }
          if (v13 > 0) {
            var f9 = [@closure('onOverMapZone', this)];
            var mc2 = [v16];
            var a11 = [Const.BUILDING_NAMES[v13] + ' ' + this.coords(v5, v6)];
            var a2 = [v17];
            v16.onRollOver = function (a2, a11, mc2, f9) {
              return function () {
                return f9[0](mc2[0], a11[0], a2[0]);
              };
            }(a2, a11, mc2, f9);
          }
          if (v13 == -1) {
            var f10 = [@closure('onOverMapZone', this)];
            var mc3 = [v16];
            var a12 = [Lang.get.resolve('undigged') + ' ' + this.coords(v5, v6)];
            var a21 = [v17];
            v16.onRollOver = function (a21, a12, mc3, f10) {
              return function () {
                return f10[0](mc3[0], a12[0], a21[0]);
              };
            }(a21, a12, mc3, f10);
          }
          if (v19._z > 0) {
            ++Const.uniq;
            v21 = v9.attachMovie('danger', 'danger_' + Const.uniq, Const.uniq);
            v21._x = v15._x;
            v21._y = v15._y;
            v21._width = v15._width;
            v21._height = v15._height;
            v22 = MapCommon.zombieDanger(this.mapId + v5 + v6 * Const.MWID, v19._z, this.fl_betterMap);
            v23 = Std.int(Math.min(Manager.DANGER_COLORS.length - 1, v22));
            mt.bumdum.Col.setPercentColor(v21, 100, Manager.DANGER_COLORS[v23]);
            v21._alpha = 40;
          }
          v21 = arg0;
          v22 = v21[1];
          switch (v22) {
            case 0:
              v22 = this.getMapScale();
              v23 = Math.round(v15._width * 2 * v22);
              if (this.fl_betterMap) {
                v24 = this.fl_mapZoom ? 5 : (this.isBigMap() ? 3 : 5);
                var v25 = 0;
                var v26 = Std.int(Math.min(v24, v19._z));
                while (v25 < v26) {
                  ++v25;
                  var v27 = v25;
                  ++Const.uniq;
                  var v28 = v9.attachMovie('dot', 'dot_' + Const.uniq, Const.uniq);
                  v28.gotoAndStop(1);
                  v14.seed = v14.seed * 16807 % 2147483647;
                  v28._x = Math.round(v15._x + v23 * 0.2 + (v14.seed & 1073741823) % Math.ceil(v23 * 0.4));
                  v14.seed = v14.seed * 16807 % 2147483647;
                  v28._y = Math.round(v15._y + v23 * 0.2 + (v14.seed & 1073741823) % Math.ceil(v23 * 0.4));
                  v28.filters = [new flash.filters.GlowFilter(Manager.RED, 1, 5, 5, 2)];
                }
              }
              if (this.fl_townMode && (v5 != this.cityX || v6 != this.cityY)) {
                v24 = 0;
                while (v24 < v20) {
                  ++v24;
                  v25 = v24;
                  ++Const.uniq;
                  v26 = v9.attachMovie('dot', 'dot_' + Const.uniq, Const.uniq);
                  v26.gotoAndStop(2);
                  v14.seed = v14.seed * 16807 % 2147483647;
                  v26._x = Math.round(v15._x + v23 * 0.2 + (v14.seed & 1073741823) % Math.ceil(v23 * 0.4));
                  v14.seed = v14.seed * 16807 % 2147483647;
                  v26._y = Math.round(v15._y + v23 * 0.2 + (v14.seed & 1073741823) % Math.ceil(v23 * 0.4));
                  v26.filters = [new flash.filters.GlowFilter(Manager.LCD, 0.5, 5, 5, 2)];
                }
              }
              break;
            case 1:
              if (v19._t != null && v19._t > 0) {
                ++Const.uniq;
                v22 = v9.attachMovie('mapTag', 'icon_' + Const.uniq, Const.uniq);
                v23 = v15._width * 0.5 - v22._width * 0.5;
                v22._x = Math.floor(v15._x + v15._width * 0.5 - v22._width * 0.5);
                v22._y = Math.floor(v15._y + v15._height * 0.5 - v22._height * 0.5);
                v22.filters = [new flash.filters.GlowFilter(Manager.LCD, 1, 6, 6, 2)];
                v22.gotoAndStop(v19._t);
                var f11 = [@closure('onOverMapZone', this)];
                var mc4 = [v16];
                var a13 = [Lang.get.resolve('tag') + '\n' + Lang.getText('tag_' + v19._t) + ' ' + this.coords(v5, v6)];
                var a22 = [v17];
                v16.onRollOver = function (a22, a13, mc4, f11) {
                  return function () {
                    return f11[0](mc4[0], a13[0], a22[0]);
                  };
                }(a22, a13, mc4, f11);
              }
              break;
            case 2:
          }
        }
        if (!v18) {
          if (@closure('onRollOver', v16) == null) {
            var f13 = [@closure('onOverMapZone', this)];
            var mc6 = [v16];
            var a15 = [Lang.get.resolve('explored') + ' ' + this.coords(v5, v6)];
            var a24 = [v17];
            v16.onRollOver = function (a24, a15, mc6, f13) {
              return function () {
                return f13[0](mc6[0], a15[0], a24[0]);
              };
            }(a24, a15, mc6, f13);
          }
        } else {
          if (@closure('onRollOver', v16) == null) {
            var f12 = [@closure('onOverMapZone', this)];
            var mc5 = [v16];
            var a14 = [this.coords(v5, v6)];
            var a23 = [v17];
            v16.onRollOver = function (a23, a14, mc5, f12) {
              return function () {
                return f12[0](mc5[0], a14[0], a23[0]);
              };
            }(a23, a14, mc5, f12);
          }
        }
        if (!this.fl_townMode && v5 == this.trackX && v6 == this.trackY) {
          ++Const.uniq;
          v19 = v9.attachMovie('mapIcon', 'icon_' + Const.uniq, Const.uniq);
          v19._x = v15._x;
          v19._y = v15._y;
          v19._width = v15._width;
          v19._height = v15._height;
          v19.gotoAndStop(8);
        }
        ++v5;
        if (v5 >= Const.MWID) {
          v5 = 0;
          ++v6;
        }
        ++v7;
      }
      ++Const.uniq;
      v12 = v9.attachMovie('mapUser', 'user', Const.uniq);
      v12._x = Const.WID * 0.05 + this.cx * 30 * v8 - 1;
      v12._y = Const.HEI * 0.03 + this.cy * 30 * v8 - 1;
      v12._xscale = v8 * 100;
      v12._yscale = v8 * 100;
      v12.filters = [new flash.filters.GlowFilter(Manager.LCD, 1, 6, 6, 2)];
      this.showPath(v9);
      this.wmapBmp.draw(v9);
      v9.removeMovieClip();
      this.wmapCont.removeMovieClip();
      this.wmapCont = this.dms.empty(Const.DP_INTERF);
      v4 = new mt.DepthManager(this.wmapCont);
      if (!this.fl_townMode) {
        ++Const.uniq;
        this.wmapCont.left = this.wmapCont.createEmptyMovieClip('left', Const.uniq);
        this.wmapCont.left.attachBitmap(this.wmapBmp, 0);
      }
      ++Const.uniq;
      this.wmapCont.right = this.wmapCont.createEmptyMovieClip('right', Const.uniq);
      this.wmapCont.right.attachBitmap(this.wmapBmp, 1);
      if (!(arg0 == MAP_MODE.Close && this.fpsOk())) {
        this.mapStep = 0.9;
      } else {
        this.mapStep = 0;
      }
      if (!this.fl_townMode && !this.fpsOk()) {
        this.wmapCont.right.removeMovieClip();
      }
      this.setPhase(PHASE.Map);
      this.clearStatus();
      v4.destroy();
      this.wmapCont.onRelease = @closure('hideMap', this);
      this.dms.over(this.wmapButtonCont);
      v6 = 0;
      v5 = v6;
      v7 = v5;
      v13 = 0;
      while (v13 < v11.length) {
        v14 = v11[v13];
        ++v13;
        if (this.mapDetails != null) {
          v15 = this.mapDetails[v7];
          if (v15._s) {
            v16 = Math.floor(Const.WID * 0.05 + v5 * 30 * v8);
            v17 = Math.floor(Const.HEI * 0.03 + v6 * 30 * v8);
            v18 = v4.attach('soul', Const.DP_TOP);
            v18._x = v16;
            v18._y = v17;
            v18._alpha = 80;
            Manager.souls.push(new SoulBehaviour(v18, v8));
          }
        }
        ++v5;
        if (v5 >= Const.MWID) {
          v5 = 0;
          ++v6;
        }
        ++v7;
      }
    };

    v1.showPath = function (arg0) {
      if (this.path == null) {
        return undefined;
      }
      var v3 = this.getMapScale();
      var v4 = this.getPathPoints(this.path, true);
      var v5 = null;
      ++Const.uniq;
      var v6 = arg0.createEmptyMovieClip('lineCont', Const.uniq);
      ++Const.uniq;
      var v7 = arg0.createEmptyMovieClip('dotCont', Const.uniq);
      v6.lineStyle(2, Manager.LCD, 70);
      var v8 = 0;
      var v9 = 0;
      while (v9 < v4.length) {
        var v10 = v4[v9];
        ++v9;
        ++Const.uniq;
        var v11 = v7.attachMovie('pathDot', 'pathDot_' + Const.uniq, Const.uniq);
        if (!(v10.x == this.cityX && v10.y == this.cityY)) {
          v11.gotoAndStop(1);
        } else {
          v11.gotoAndStop(2);
        }
        v11._x = Const.WID * 0.05 + v10.x * 30 * v3 + 15 * v3;
        v11._y = Const.HEI * 0.03 + v10.y * 30 * v3 + 15 * v3;
        if (v8 > 0) {
          v11.field.text = v8;
        }
        v11.filters = [new flash.filters.GlowFilter(3096842, 1, 3, 3, 4), new flash.filters.GlowFilter(Manager.LCD, 0.7, 4, 4, 3)];
        if (v5 != null) {
          v6.moveTo(v11._x, v11._y);
          v6.lineTo(v5._x, v5._y);
        }
        v5 = v11;
        ++v8;
      }
    };

    v1.soulsCont = null;
    v1.starting = null;
    v1.status = null;
    v1.swap = function (arg0, arg1) {
      var v4 = arg0.x;
      var v5 = arg0.y;
      arg0.x = arg1.x;
      arg0.y = arg1.y;
      arg1.x = v4;
      arg1.y = v5;
    };

    v1.tagModeButton = null;
    v1.tip = null;
    v1.toggleZoom = function (arg0) {
      this.fl_mapZoom = !this.fl_mapZoom;
      this.savePref('zoom', this.fl_mapZoom);
      this.zoomButton.gotoAndStop(this.fl_mapZoom ? 8 : 7);
      this.showMap(arg0);
    };

    v1.trackPath = function (arg0) {
      if (this.fl_townMode) {
        return undefined;
      }
      if (arg0 == null) {
        return undefined;
      }
      var v3 = this.getPathPoints(arg0, true);
      var v4 = null;
      var v5 = 0;
      var v6 = 0;
      while (v6 < v3.length) {
        var v7 = v3[v6];
        ++v6;
        if (v5 > this.pathStep && v7.x == this.cx && v7.y == this.cy) {
          this.pathStep = v5;
          var v8 = flash.SharedObject.getLocal('mapTrack');
          v8.data.pathStep = this.pathStep;
          v8.flush();
        }
        if (v4 != null && (v7.x != this.cx || v7.y != this.cy) && (this.pathStep == -1 || v5 == this.pathStep + 1)) {
          if (this.between(this.cx, this.cy, v7, v4)) {
            this.setTracker(v7.x, v7.y);
            return undefined;
          }
        }
        ++v5;
        v4 = v7;
      }
    };

    v1.trackX = null;
    v1.trackY = null;
    v1.tx = null;
    v1.ty = null;
    v1.updateMapScrolling = function () {
      if (this.wmapCont == null) {
        return undefined;
      }
      if (!this.fl_mapZoom) {
        this.wmapCont._x = 0;
        this.wmapCont._y = 0;
      } else {
        var v2 = this.getMapCenter();
        if (this.fl_pathEditor) {
          v2.x = this.lastCoord.x;
          v2.y = this.lastCoord.y;
        }
        var v3 = 20 + v2.x * 30 * this.getMapScale();
        var v4 = 20 + v2.y * 30 * this.getMapScale();
        var v5 = (this.root._xmouse - Const.WID * 0.5) / Const.WID * 0.5;
        var v6 = (this.root._ymouse - Const.HEI * 0.5) / Const.HEI * 0.5;
        this.wmapCont._x = Const.WID * 0.5 - v3 + -v5 * 30;
        this.wmapCont._y = Const.WID * 0.5 - v4 + -v6 * 30;
        this.soulsCont._x = this.wmapCont._x;
        this.soulsCont._y = this.wmapCont._y;
      }
      this.wmapButtonCont._x = this.wmapCont._x;
      this.wmapButtonCont._y = this.wmapCont._y;
    };

    v1.updateScroll = function (arg0, arg1) {
      var v4 = Manager.MAX_SPD;
      var v5 = Manager.SCROLL_SPD * mt.Timer.tmod;
      var v6 = Math.max(-v4, Math.min(v4, (this.tx + arg0 * Manager.PANNING - this.mapX) * v5));
      var v7 = Math.max(-v4, Math.min(v4, (this.ty + arg1 * Manager.PANNING - this.mapY) * v5));
      this.mapX += v6;
      this.mapY += v7;
      var v8 = 0;
      var v9 = this.icons;
      while (v8 < v9.length) {
        var v10 = v9[v8];
        ++v8;
        v10.mc._x += Math.floor(this.mapX) - this.bg._x;
        v10.mc._y += Math.floor(this.mapY) - this.bg._y;
      }
      if (this.moveMap(this.mapX, this.mapY)) {
        this.localFog._x += v6;
        this.localFog._y += v7;
        v8 = Const.WID * 0.5;
        v9 = Const.HEI * 0.5;
        v10 = 0;
        var v11 = this.buildings;
        while (v10 < v11.length) {
          var v12 = v11[v10];
          ++v10;
          var v13 = v12._x + this.mapX;
          var v14 = v12._y + this.mapY;
          var v15 = Math.max(Math.abs(v13 - v8), Math.abs(v14 - v9));
          var v16 = Math.min(1, v15 / Const.CWID);
          v12.filters = [Manager.NIGHT, new flash.filters.BlurFilter(v16 * Manager.FOCAL_BLUR, v16 * Manager.FOCAL_BLUR)];
        }
      }
      if (Math.abs(this.mapX - this.tx) <= 0.5 && Math.abs(this.mapY - this.ty) <= 0.5) {
        this.mapX = this.tx;
        this.mapY = this.ty;
        this.onArrive();
      }
    };

    v1.users = null;
    v1.wmapBmp = null;
    v1.wmapButtonCont = null;
    v1.wmapCont = null;
    v1.zombies = null;
    v1.zoneId = null;
    v1.zoomButton = null;
    MapCommon = function () {};

    MapCommon.__name__ = ['MapCommon'];
    v1 = MapCommon.prototype;
    v1.__class__ = MapCommon;
    v1.__class__.getRSeed = function () {
      return new mt.Rand(2527896);
    };

    v1.__class__.genKey = function (arg0) {
      var v3 = new StringBuf();
      var v4 = MapCommon.getRSeed();
      var v5 = 0;
      while (v5 < arg0) {
        ++v5;
        var v6 = v5;
        v4.seed = v4.seed * 16807 % 2147483647;
        v3.b += String.fromCharCode(65 + (v4.seed & 1073741823) % 50);
      }
      return v3.b;
    };

    v1.__class__.permute = function (arg0) {
      var v3 = MapCommon.getRSeed();
      var v4 = arg0.split('');
      var v5 = 0;
      var v6 = new Array();
      while (v5 < v4.length) {
        v3.seed = v3.seed * 16807 % 2147483647;
        var v7 = (v3.seed & 1073741823) % v4.length;
        if (v6[v7] == null && v6[v5] == null) {
          var v8 = v4[v7];
          v4[v7] = v4[v5];
          v4[v5] = v8;
          v6[v5] = true;
          v6[v7] = true;
        }
        ++v5;
      }
      return v4.join('');
    };

    v1.__class__.encode = function (arg0) {
      var v3 = new mt.net.Codec(MapCommon.genKey(arg0.length));
      return StringTools.urlEncode(MapCommon.permute(v3.run(arg0)));
    };

    v1.__class__.decode = function (arg0) {
      var v3 = new mt.net.Codec(MapCommon.genKey(arg0.length));
      return v3.run(MapCommon.permute(arg0));
    };

    v1.__class__.zombieDanger = function (arg0, arg1, arg2) {
      if (arg1 == 0) {
        return 0;
      }
      if (arg2) {
        return Math.floor((arg1 - 1) / 2);
      }
      var v5 = new mt.Rand(arg0);
      v5.seed = v5.seed * 16807 % 2147483647;
      var v6 = (v5.seed & 1073741823) % 3;
      if (v6 != 0) {
        if (v6 != 1) {
          return Std.int(Math.min(2, Math.floor((arg1 - 1) / 2)));

// An attempt to read a value from empty stack
          if (!undefined) {
          } else {}
        }
      }
      ++arg1;
      return Std.int(Math.min(2, Math.floor((arg1 - 1) / 2)));
    };

    v1.__class__.getPathLength = function (arg0) {
      var v3 = null;
      var v4 = 0;
      var v5 = 0;
      while (v5 < arg0.length) {
        var v6 = arg0[v5];
        ++v5;
        if (v3 != null && v6.x != null && v6.y != null) {
          v4 += Math.floor(Math.abs(v6.x - v3.x) + Math.abs(v6.y - v3.y));
        }
        v3 = v6;
      }
      return v4;
    };

    v1.__class__.coords = function (arg0, arg1, arg2, arg3) {
      return {'x': arg2 - arg0, 'y': -(arg3 - arg1), 'sep': ' / '};
    };

    v1.__class__.coordsToReal = function (arg0, arg1, arg2, arg3) {
      return {'x': arg0 + arg2, 'y': arg1 - arg3, 'sep': ' / '};
    };

    Reflect = function () {};

    Reflect.__name__ = ['Reflect'];
    v1 = Reflect.prototype;
    v1.__class__ = Reflect;
    v1.__class__.fields = function (arg0) {
      if (arg0 == null) {
        return new Array();
      }
      var v4 = new Array();
      // Loop counter not found
for ($somevar in arg0) {
        v4.push(enumerate arg0);
      }
      var v3 = v4;
      v4 = 0;
      while (v4 < v3.length) {
        if (v3.hasOwnProperty.call(arg0, v3[v4])) {
          ++v4;
        } else {
          v3.splice(v4, 1);
        }
      }
      return v3;
    };

    v1.__class__.isFunction = function (arg0) {
      return typeof arg0 == 'function' && arg0.__name__ == null;
    };

    v1.__class__.deleteField = function (arg0, arg1) {
      if (this.hasOwnProperty.call(arg0, arg1) != true) {
        return false;
      }
      delete arg0[arg1];
      return true;
    };

    SoulBehaviour = function (arg0, arg1) {
      if (arg1 == null) {
        arg1 = 1.0;
      }
      this.mc = arg0;
      this._dir = new flash.geom.Point(Math.random() - 0.5, Math.random() - 0.5);
      this._dir.normalize(arg1 * (Math.random() * 0.2 + 0.2));
      this._target = this._dir.clone();
      this._ox = arg0._x;
      this._oy = arg0._y;
      this._px = this._ox + this._target.y;
      this._py = this._oy + this._target.y;
      this.updateSoul(arg0._x, arg0._y);
      this.time = 0;
      this.angle = 0;
      this.scale = arg1;
      this._matrix = new flash.geom.Matrix();
      Boot.addListener(@closure('run', this));
    };

    SoulBehaviour.__name__ = ['SoulBehaviour'];
    v1 = SoulBehaviour.prototype;
    v1.__class__ = SoulBehaviour;
    v1._dir = null;
    v1._matrix = null;
    v1._ox = null;
    v1._oy = null;
    v1._px = null;
    v1._py = null;
    v1._target = null;
    v1.angle = null;
    v1.dispose = function () {
      Boot.removeListener(@closure('run', this));
      this.mc.removeMovieClip();
    };

    v1.mc = null;
    v1.run = function () {
      var v2 = this._px;
      var v3 = this._py;
      this._dir.x = this.time * this._dir.x + (1.0 - this.time) * this._target.x;
      this._dir.y = this.time * this._dir.y + (1.0 - this.time) * this._target.y;
      this._dir.normalize((0.2 + Math.random() * 0.2) * this.scale);
      this._px += this._dir.x;
      this._py += this._dir.y;
      this.updateSoul(v2, v3);
      this.time -= 0.012;
      if (this.time <= 0) {
        var v4 = 30 * this.scale;
        var v5 = (this._px - this._ox) * (this._px - this._ox) + (this._py - this._oy) * (this._py - this._oy);
        if (v5 > v4) {
          this._target.x = (this._px > this._ox ? -1 : 1) * Math.random() * v4 * 2;
          this._target.y = (this._py > this._oy ? -1 : 1) * Math.random() * v4 * 2;
          this._target.normalize(1);
          this.time = 1.0;
        }
      }
    };

    v1.scale = null;
    v1.time = null;
    v1.updateSoul = function (arg0, arg1) {
      this.mc._rotation = Math.atan2(this._py - arg1, this._px - arg0) * 180 / Math.PI - 90;
      this.mc._x = this._px;
      this.mc._y = this._py;
    };

    StringTools = function () {};

    StringTools.__name__ = ['StringTools'];
    v1 = StringTools.prototype;
    v1.__class__ = StringTools;
    v1.__class__.urlEncode = function (arg0) {
      return _global.escape(arg0);
    };

    v1.__class__.urlDecode = function (arg0) {
      return _global.unescape(arg0);
    };

    v1.__class__.isSpace = function (arg0, arg1) {
      var v4 = arg0.charCodeAt(arg1);
      return v4 >= 9 && v4 <= 13 || v4 == 32;
    };

    v1.__class__.ltrim = function (arg0) {
      var v3 = arg0.length;
      var v4 = 0;
      for (;;) {
        if (!(v4 < v3 && StringTools.isSpace(arg0, v4))) break;
        ++v4;
      }
      if (v4 <= 0) {
        return arg0;
      } else {
        return arg0.substr(v4, v3 - v4);
      }
    };

    v1.__class__.rtrim = function (arg0) {
      var v3 = arg0.length;
      var v4 = 0;
      for (;;) {
        if (!(v4 < v3 && StringTools.isSpace(arg0, v3 - v4 - 1))) break;
        ++v4;
      }
      if (v4 <= 0) {
        return arg0;
      } else {
        return arg0.substr(0, v3 - v4);
      }
    };

    v1.__class__.trim = function (arg0) {
      return StringTools.ltrim(StringTools.rtrim(arg0));
    };

    v1.__class__.replace = function (arg0, arg1, arg2) {
      return (arg0.split(arg1)).join(arg2);
    };

    ValueType = new Object();
    ValueType.__ename__ = ['ValueType'];
    ValueType.__constructs__ = ['TNull', 'TInt', 'TFloat', 'TBool', 'TObject', 'TFunction', 'TClass', 'TEnum', 'TUnknown'];
    ['TBool', 3].__enum__ = ValueType;
    ['TBool', 3].toString = @estr;
    ValueType.TBool = ['TBool', 3];
    ['TBool', 3].__enum__.TClass = function (arg0) {
      ['TClass', 6, arg0].__enum__ = this;
      ['TClass', 6, arg0].toString = @estr;
      return ['TClass', 6, arg0];
    };

    ['TBool', 3].__enum__.TEnum = function (arg0) {
      ['TEnum', 7, arg0].__enum__ = this;
      ['TEnum', 7, arg0].toString = @estr;
      return ['TEnum', 7, arg0];
    };

    ['TFloat', 2].__enum__ = ['TBool', 3].__enum__;
    ['TFloat', 2].toString = @estr;
    ['TBool', 3].__enum__.TFloat = ['TFloat', 2];
    ['TFunction', 5].__enum__ = ['TBool', 3].__enum__;
    ['TFunction', 5].toString = @estr;
    ['TBool', 3].__enum__.TFunction = ['TFunction', 5];
    ['TInt', 1].__enum__ = ['TBool', 3].__enum__;
    ['TInt', 1].toString = @estr;
    ['TBool', 3].__enum__.TInt = ['TInt', 1];
    ['TNull', 0].__enum__ = ['TBool', 3].__enum__;
    ['TNull', 0].toString = @estr;
    ['TBool', 3].__enum__.TNull = ['TNull', 0];
    ['TObject', 4].__enum__ = ['TBool', 3].__enum__;
    ['TObject', 4].toString = @estr;
    ['TBool', 3].__enum__.TObject = ['TObject', 4];
    ['TUnknown', 8].__enum__ = ['TBool', 3].__enum__;
    ['TUnknown', 8].toString = @estr;
    ['TBool', 3].__enum__.TUnknown = ['TUnknown', 8];
    flash.Lib = function () {};

    flash.Lib.__name__ = ['flash', 'Lib'];
    v1 = flash.Lib.prototype;
    v1.__class__ = flash.Lib;
    flash.Lib._global = null;
    flash.Lib._root = null;
    flash.Lib.current = null;
    flash.Lib.onerror = null;
    v1 = new Object();
    flash._MovieClip = v1;
    v2 = _global.flash._MovieClip;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.display = v1;
    v2 = _global.flash.display;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.external = v1;
    v2 = _global.flash.external;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.filters = v1;
    v2 = _global.flash.filters;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.geom = v1;
    v2 = _global.flash.geom;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    v1 = new Object();
    flash.text = v1;
    v2 = _global.flash.text;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    haxe.Serializer = function () {
      this.buf = new StringBuf();
      this.cache = new Array();
      this.useCache = haxe.Serializer.USE_CACHE;
      this.useEnumIndex = haxe.Serializer.USE_ENUM_INDEX;
      this.shash = new Hash();
      this.scount = 0;
    };

    haxe.Serializer.__name__ = ['haxe', 'Serializer'];
    v1 = haxe.Serializer.prototype;
    v1.__class__ = haxe.Serializer;
    v1.buf = null;
    v1.cache = null;
    v1.scount = null;
    v1.serialize = function (arg0) {
      var v3 = Type.typeof(arg0);
      var v4 = v3[1];
      switch (v4) {
          throw 'Cannot serialize ' + Std.string(arg0);
        case 0:
          this.buf.b += 'n';
          break;
        case 1:
          if (arg0 == 0) {
            this.buf.b += 'z';
            return undefined;
          }
          this.buf.b += 'i';
          this.buf.b += Std.string(arg0);
          break;
        case 2:
          if (!Math.isNaN(arg0)) {
            if (Math.isFinite(arg0)) {
              this.buf.b += 'd';
              this.buf.b += Std.string(arg0);
            } else {
              this.buf.b += Std.string(arg0 < 0 ? 'm' : 'p');
            }
          } else {
            this.buf.b += 'k';
          }
          break;
        case 3:
          this.buf.b += Std.string(arg0 ? 't' : 'f');
          break;
        case 6:
          v4 = v3[2];
          if (v4 == String) {
            this.serializeString(arg0);
            return undefined;
          }
          if (this.useCache && this.serializeRef(arg0)) {
            return undefined;
          }
          var v5 = v4;
          if (v5 != Array) {
          } else {
            if (v5 != List) {
            } else {
              if (v5 != Date) {
              } else {
                      this.cache.pop();
                      if (arg0.hxSerialize == null) {
                        this.buf.b += 'c';
                        this.serializeString(Type.getClassName(v4));
                        this.cache.push(arg0);
                        this.serializeFields(arg0);
                      } else {
                        this.buf.b += 'C';
                        this.serializeString(Type.getClassName(v4));
                        this.cache.push(arg0);
                        arg0.hxSerialize(this);
                        this.buf.b += 'g';
                      }
                if (v5 != Hash) {
                      var v6 = 0;
                      this.buf.b += 'a';
                      var v7 = arg0.length;
                      var v8 = 0;
                      while (v8 < v7) {
                        ++v8;
                        var v9 = v8;
                        if (arg0[v9] != null) {
                          if (v6 > 0) {
                            if (v6 != 1) {
                              this.buf.b += 'u';
                              this.buf.b += Std.string(v6);
                            } else {
                              this.buf.b += 'n';
                            }
                            v6 = 0;
                          }
                          this.serialize(arg0[v9]);
                        } else {
                          ++v6;
                        }
                      }
                      if (v6 > 0) {
                        if (v6 != 1) {
                          this.buf.b += 'u';
                          this.buf.b += Std.string(v6);
                        } else {
                          this.buf.b += 'n';
                        }
                      }
                      this.buf.b += 'h';
                } else {
                      this.buf.b += 'l';
                      var v6 = arg0;
                      var v7 = v6.iterator();
                      while (v7.hasNext()) {
                        var v8 = v7.next();
                        this.serialize(v8);
                      }
                      this.buf.b += 'h';
                  if (v5 != IntHash) {
                      v6 = arg0;
                      this.buf.b += 'v';
                      this.buf.b += Std.string(v6.toString());
                  } else {
                      this.buf.b += 'b';
                      v6 = arg0;
                      v7 = v6.keys();
                      while (v7.hasNext()) {
                        v8 = v7.next();
                        this.serializeString(v8);
                        this.serialize(v6.get(v8));
                      }
                      this.buf.b += 'h';
                    if (v5 != haxe.io.Bytes) {
                      this.buf.b += 'q';
                      v6 = arg0;
                      v7 = v6.keys();
                      while (v7.hasNext()) {
                        v8 = v7.next();
                        this.buf.b += ':';
                        this.buf.b += Std.string(v8);
                        this.serialize(v6.get(v8));
                      }
                      this.buf.b += 'h';
                    } else {
                      v6 = arg0;
                      v7 = 0;
                      v8 = v6.length - 2;
                      var v9 = new StringBuf();
                      var v10 = haxe.Serializer.BASE64;
                      while (v7 < v8) {
                        ++v7;
                        var v11 = v6.b[v7];
                        ++v7;
                        var v12 = v6.b[v7];
                        ++v7;
                        var v13 = v6.b[v7];
                        v9.b += Std.string(v10.charAt(v11 >> 2));
                        v9.b += Std.string(v10.charAt((v11 << 4 | v12 >> 4) & 63));
                        v9.b += Std.string(v10.charAt((v12 << 2 | v13 >> 6) & 63));
                        v9.b += Std.string(v10.charAt(v13 & 63));
                      }
                      if (v7 != v8) {
                        if (v7 == v8 + 1) {
                          ++v7;
                          v11 = v6.b[v7];
                          v9.b += Std.string(v10.charAt(v11 >> 2));
                          v9.b += Std.string(v10.charAt(v11 << 4 & 63));
                        }
                      } else {
                        ++v7;
                        v11 = v6.b[v7];
                        ++v7;
                        v12 = v6.b[v7];
                        v9.b += Std.string(v10.charAt(v11 >> 2));
                        v9.b += Std.string(v10.charAt((v11 << 4 | v12 >> 4) & 63));
                        v9.b += Std.string(v10.charAt(v12 << 2 & 63));
                      }
                      v11 = v9.b;
                      this.buf.b += 's';
                      this.buf.b += Std.string(v11.length);
                      this.buf.b += ':';
                      this.buf.b += Std.string(v11);
                    }
                  }
                }
              }
            }
          }
          break;
        case 4:
          if (this.useCache && this.serializeRef(arg0)) {
            return undefined;
          }
          this.buf.b += 'o';
          this.serializeFields(arg0);
          break;
        case 7:
          v4 = v3[2];
          if (this.useCache && this.serializeRef(arg0)) {
            return undefined;
          }
          this.cache.pop();
          this.buf.b += Std.string(this.useEnumIndex ? 'j' : 'w');
          this.serializeString(Type.getEnumName(v4));
          if (!this.useEnumIndex) {
            this.serializeString(arg0[0]);
          } else {
            this.buf.b += ':';
            this.buf.b += Std.string(arg0[1]);
          }
          this.buf.b += ':';
          var v5 = arg0.length;
          this.buf.b += Std.string(v5 - 2);
          var v6 = 2;
          while (v6 < v5) {
            ++v6;
            var v7 = v6;
            this.serialize(arg0[v7]);
          }
          this.cache.push(arg0);
          break;
        case 5:
          throw 'Cannot serialize function';
      }
    };

    v1.serializeException = function (arg0) {
      this.buf.b += 'x';
      this.serialize(arg0);
    };

    v1.serializeFields = function (arg0) {
      var v3 = 0;
      var v4 = Reflect.fields(arg0);
      while (v3 < v4.length) {
        var v5 = v4[v3];
        ++v3;
        this.serializeString(v5);
        this.serialize(arg0[v5]);
      }
      this.buf.b += 'g';
    };

    v1.serializeRef = function (arg0) {
      var v3 = 0;
      var v4 = this.cache.length;
      while (v3 < v4) {
        ++v3;
        var v5 = v3;
        if (this.cache[v5] == arg0) {
          this.buf.b += 'r';
          this.buf.b += Std.string(v5);
          return true;
        }
      }
      this.cache.push(arg0);
      return false;
    };

    v1.serializeString = function (arg0) {
      var v3 = this.shash.get(arg0);
      if (v3 != null) {
        this.buf.b += 'R';
        this.buf.b += Std.string(v3);
        return undefined;
      }
      ++this.scount;
      this.shash.set(arg0, this.scount);
      this.buf.b += 'y';
      arg0 = StringTools.urlEncode(arg0);
      this.buf.b += Std.string(arg0.length);
      this.buf.b += ':';
      this.buf.b += Std.string(arg0);
    };

    v1.shash = null;
    v1.toString = function () {
      return this.buf.b;
    };

    v1.useCache = null;
    v1.useEnumIndex = null;
    haxe.StackItem = new Object();
    haxe.StackItem.__ename__ = ['haxe', 'StackItem'];
    haxe.StackItem.__constructs__ = ['CFunction', 'Module', 'FilePos', 'Method', 'Lambda'];
    ['CFunction', 0].__enum__ = haxe.StackItem;
    ['CFunction', 0].toString = @estr;
    haxe.StackItem.CFunction = ['CFunction', 0];
    haxe.StackItem.FilePos = function (arg0, arg1, arg2) {
      ['FilePos', 2, arg0, arg1, arg2].__enum__ = this;
      ['FilePos', 2, arg0, arg1, arg2].toString = @estr;
      return ['FilePos', 2, arg0, arg1, arg2];
    };

    haxe.StackItem.Lambda = function (arg0) {
      ['Lambda', 4, arg0].__enum__ = this;
      ['Lambda', 4, arg0].toString = @estr;
      return ['Lambda', 4, arg0];
    };

    haxe.StackItem.Method = function (arg0, arg1) {
      ['Method', 3, arg0, arg1].__enum__ = this;
      ['Method', 3, arg0, arg1].toString = @estr;
      return ['Method', 3, arg0, arg1];
    };

    haxe.StackItem.Module = function (arg0) {
      ['Module', 1, arg0].__enum__ = this;
      ['Module', 1, arg0].toString = @estr;
      return ['Module', 1, arg0];
    };

    haxe.Stack = function () {};

    haxe.Stack.__name__ = ['haxe', 'Stack'];
    v1 = haxe.Stack.prototype;
    v1.__class__ = haxe.Stack;
    haxe.Stack.exceptionStack = function () {
      return haxe.Stack.makeStack('$e');
    };

    haxe.Stack.makeStack = function (arg0) {
      var v3 = eval(arg0);
      var v4 = new Array();
      var v5 = 0;
      var v6 = v3.length - ((arg0 == '$s') ? 2 : 0);
      while (v5 < v6) {
        ++v5;
        var v7 = v5;
        var v8 = v3[v7].split('::');
        v4.unshift(haxe.StackItem.Method(v8[0], v8[1]));
      }
      return v4;
    };

    v1 = new Object();
    haxe.io = v1;
    v2 = _global.haxe.io;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    haxe.io.Bytes = function (arg0, arg1) {
      this.length = arg0;
      this.b = arg1;
    };

    haxe.io.Bytes.__name__ = ['haxe', 'io', 'Bytes'];
    v1 = haxe.io.Bytes.prototype;
    v1.__class__ = haxe.io.Bytes;
    haxe.io.Bytes.alloc = function (arg0) {
      var v3 = new Array();
      var v4 = 0;
      while (v4 < arg0) {
        ++v4;
        var v5 = v4;
        v3.push(0);
      }
      return new haxe.io.Bytes(arg0, v3);
    };

    v1.b = null;
    v1.length = null;
    v1.readString = function (arg0, arg1) {
      if (arg0 < 0 || arg1 < 0 || arg0 + arg1 > this.length) {
        throw haxe.io.Error.OutsideBounds;
      }
      var v4 = '';
      var v5 = this.b;
      var v6 = @closure('fromCharCode', String);
      var v7 = arg0;
      var v8 = arg0 + arg1;
      while (v7 < v8) {
        ++v7;
        var v9 = v5[v7];
        if (v9 >= 128) {
          if (v9 >= 224) {
            if (v9 >= 240) {
              ++v7;
              var v10 = v5[v7];
              ++v7;
              var v11 = v5[v7];
              ++v7;
              v4 += v6((v9 & 15) << 18 | (v10 & 127) << 12 | v11 << 6 & 127 | v5[v7] & 127);
            } else {
              ++v7;
              var v10 = v5[v7];
              ++v7;
              v4 += v6((v9 & 31) << 12 | (v10 & 127) << 6 | v5[v7] & 127);
            }
          } else {
            ++v7;
            v4 += v6((v9 & 63) << 6 | v5[v7] & 127);
          }
        } else {
          if (v9 == 0) {
            break;
          }
          v4 += v6(v9);
        }
      }
      return v4;
    };

    v1.toString = function () {
      return this.readString(0, this.length);
    };

    haxe.io.Error = new Object();
    haxe.io.Error.__ename__ = ['haxe', 'io', 'Error'];
    haxe.io.Error.__constructs__ = ['Blocked', 'Overflow', 'OutsideBounds', 'Custom'];
    ['Blocked', 0].__enum__ = haxe.io.Error;
    ['Blocked', 0].toString = @estr;
    haxe.io.Error.Blocked = ['Blocked', 0];
    haxe.io.Error.Custom = function (arg0) {
      ['Custom', 3, arg0].__enum__ = this;
      ['Custom', 3, arg0].toString = @estr;
      return ['Custom', 3, arg0];
    };

    ['OutsideBounds', 2].__enum__ = haxe.io.Error;
    ['OutsideBounds', 2].toString = @estr;
    haxe.io.Error.OutsideBounds = ['OutsideBounds', 2];
    ['Overflow', 1].__enum__ = haxe.io.Error;
    ['Overflow', 1].toString = @estr;
    haxe.io.Error.Overflow = ['Overflow', 1];
    haxe.remoting.Connection = function () {};

    haxe.remoting.Connection.__name__ = ['haxe', 'remoting', 'Connection'];
    v1 = haxe.remoting.Connection.prototype;
    v1.__class__ = haxe.remoting.Connection;
    v1.call = null;
    v1.resolve = null;
    haxe.remoting.ExternalConnection = function (arg0, arg1) {
      this.__data = arg0;
      this.__path = arg1;
    };

    haxe.remoting.ExternalConnection.__name__ = ['haxe', 'remoting', 'ExternalConnection'];
    haxe.remoting.ExternalConnection.__interfaces__ = [haxe.remoting.Connection];
    haxe.remoting.ExternalConnection implements haxe.remoting.Connection;
    v1 = haxe.remoting.ExternalConnection.prototype;
    v1.__class__ = haxe.remoting.ExternalConnection;
    haxe.remoting.ExternalConnection.escapeString = function (arg0) {
      return (((arg0.split('\\')).join('\\\\')).split('&')).join('&amp;');
    };

    haxe.remoting.ExternalConnection.doCall = function (arg0, arg1, arg2) {
      try {
        var v5 = haxe.remoting.ExternalConnection.connections.get(arg0);
        if (v5 == null) {
          throw 'Unknown connection : ' + arg0;
        }
        if (v5.__data.ctx == null) {
          throw 'No context shared for the connection ' + arg0;
        }
        var v6 = (new haxe.Unserializer(arg2)).unserialize();
        var v7 = v5.__data.ctx.call(arg1.split('.'), v6);
        var v8 = new haxe.Serializer();
        v8.serialize(v7);
        return haxe.remoting.ExternalConnection.escapeString(v8.toString());
      }
      catch (v0) {
        v5 = v0;
        v6 = new haxe.Serializer();
        v6.serializeException(v5);
        return v6.toString();
      }
    };

    haxe.remoting.ExternalConnection.jsConnect = function (arg0, arg1) {
      if (!flash.external.ExternalInterface.available) {
        throw 'External Interface not available';
      }
      flash.external.ExternalInterface.addCallback('externalRemotingCall', null, @closure('doCall', haxe.remoting.ExternalConnection));
      var v4 = new haxe.remoting.ExternalConnection({'name': arg0, 'ctx': arg1}, []);
      haxe.remoting.ExternalConnection.connections.set(arg0, v4);
      return v4;
    };

    v1.__data = null;
    v1.__path = null;
    v1.call = function (arg0) {
      var v3 = new haxe.Serializer();
      v3.serialize(arg0);
      var v4 = haxe.remoting.ExternalConnection.escapeString(v3.toString());
      var v5 = null;
      v5 = flash.external.ExternalInterface.call('haxe.remoting.ExternalConnection.doCall', this.__data.name, this.__path.join('.'), v4);
      if (v5 == null) {
        throw 'Call failure : ExternalConnection is not ' + 'compiled in JS';
      }
      return (new haxe.Unserializer(v5)).unserialize();
    };

    v1.resolve = function (arg0) {
      var v3 = new haxe.remoting.ExternalConnection(this.__data, this.__path.copy());
      v3.__path.push(arg0);
      return v3;
    };

    mt.DepthManager = function (arg0) {
      this.root_mc = arg0;
      this.plans = new Array();
    };

    mt.DepthManager.__name__ = ['mt', 'DepthManager'];
    v1 = mt.DepthManager.prototype;
    v1.__class__ = mt.DepthManager;
    v1.attach = function (arg0, arg1) {
      var v4 = this.getPlan(arg1);
      var v5 = v4.tbl;
      var v6 = v4.cur;
      if (v6 == 1000) {
        this.compact(arg1);
        return this.attach(arg0, arg1);
      }
      ++mt.DepthManager.INST_COUNTER;
      var v7 = arg0 + '@' + mt.DepthManager.INST_COUNTER;
      var v8 = this.root_mc.attachMovie(arg0, v7, v6 + arg1 * 1000, null);
      v5[v6] = v8;
      v4.cur = v6 + 1;
      return v8;
    };

    v1.clear = function (arg0) {
      var v3 = this.getPlan(arg0);
      var v4 = v3.tbl;
      var v5 = 0;
      var v6 = v3.cur;
      while (v5 < v6) {
        ++v5;
        var v7 = v5;
        v4[v7].removeMovieClip();
      }
      v3.cur = 0;
    };

    v1.compact = function (arg0) {
      var v3 = this.plans[arg0];
      var v4 = v3.tbl;
      var v5 = 0;
      var v6 = arg0 * 1000;
      var v7 = 0;
      var v8 = v3.cur;
      while (v7 < v8) {
        ++v7;
        var v9 = v7;
        if (v4[v9]._name != null) {
          v4[v9].swapDepths(v6 + v5);
          v4[v5] = v4[v9];
          ++v5;
        }
      }
      v3.cur = v5;
    };

    v1.destroy = function () {
      var v2 = 0;
      var v3 = this.plans.length;
      while (v2 < v3) {
        ++v2;
        var v4 = v2;
        this.clear(v4);
      }
    };

    v1.empty = function (arg0) {
      var v3 = this.getPlan(arg0);
      var v4 = v3.tbl;
      var v5 = v3.cur;
      if (v5 == 1000) {
        this.compact(arg0);
        return this.empty(arg0);
      }
      ++mt.DepthManager.INST_COUNTER;
      var v6 = 'empty@' + mt.DepthManager.INST_COUNTER;
      var v7 = this.root_mc.createEmptyMovieClip(v6, v5 + arg0 * 1000);
      v4[v5] = v7;
      v3.cur = v5 + 1;
      return v7;
    };

    v1.getPlan = function (arg0) {
      var v3 = this.plans[arg0];
      if (v3 == null) {
        v3 = {'tbl': new Array(), 'cur': 0};
        this.plans[arg0] = v3;
      }
      return v3;
    };

    v1.over = function (arg0) {
      var v3 = arg0.getDepth();
      var v4 = Math.floor(v3 / 1000);
      var v5 = this.getPlan(v4);
      var v6 = v5.tbl;
      var v7 = v3 % 1000;
      if (v6[v7] == arg0) {
        v6[v7] = null;
        if (v5.cur == 1000) {
          this.compact(v4);
        }
        v3 = v5.cur;
        ++v5.cur;
        arg0.swapDepths(v3 + v4 * 1000);
        v6[v3] = arg0;
      }
    };

    v1.plans = null;
    v1.root_mc = null;
    mt.Rand = function (arg0) {
      this.seed = (arg0 < 0 ? -arg0 : arg0) + 131;
    };

    mt.Rand.__name__ = ['mt', 'Rand'];
    v1 = mt.Rand.prototype;
    v1.__class__ = mt.Rand;
    v1.seed = null;
    mt.Timer = function () {};

    mt.Timer.__name__ = ['mt', 'Timer'];
    v1 = mt.Timer.prototype;
    v1.__class__ = mt.Timer;
    v1 = new Object();
    mt.bumdum = v1;
    v2 = _global.mt.bumdum;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    mt.bumdum.Col = function () {};

    mt.bumdum.Col.__name__ = ['mt', 'bumdum', 'Col'];
    v1 = mt.bumdum.Col.prototype;
    v1.__class__ = mt.bumdum.Col;
    mt.bumdum.Col.colToObj = function (arg0) {
      return {'r': arg0 >> 16, 'g': arg0 >> 8 & 255, 'b': arg0 & 255};
    };

    mt.bumdum.Col.setPercentColor = function (arg0, arg1, arg2, arg3, arg4) {
      if (arg4 == null) {
        arg4 = 100;
      }
      if (arg3 == null) {
        arg3 = 0;
      }
      var v7 = mt.bumdum.Col.colToObj(arg2);
      var v8 = new flash.Color(arg0);
      var v9 = arg1 / 100;
      var v10 = {'_': null};
      var v11 = Std.int(100 - arg1);
      v10.ra = v11;
      v10.ga = v11;
      v10.ba = v11;
      v10.aa = arg4;
      v10.rb = Std.int(v9 * v7.r + arg3);
      v10.gb = Std.int(v9 * v7.g + arg3);
      v10.bb = Std.int(v9 * v7.b + arg3);
      v10.ab = 0;
      v8.setTransform(v10);
    };

    v1 = new Object();
    mt.flash = v1;
    v2 = _global.mt.flash;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    mt.flash.Init = function () {};

    mt.flash.Init.__name__ = ['mt', 'flash', 'Init'];
    v1 = mt.flash.Init.prototype;
    v1.__class__ = mt.flash.Init;
    mt.flash.Init.check = function () {
      var v2 = flash.Lib._root._url;
      var v3 = v2.split('?');
      v3.shift();
      v3 = (v3.join('?')).split('&');
      var v4 = 0;
      while (v4 < v3.length) {
        var v5 = v3[v4];
        ++v4;
        var v6 = (v5.split('='))[0];
        if (v6 != '' && v6 != 'v') {
          throw 'Vars not allowed';
        }
      }
    };

    v1 = new Object();
    mt.net = v1;
    v2 = _global.mt.net;
    // Loop counter not found
for ($somevar in v2) {
      v1[enumerate v2] = v2[enumerate v2];
    }
    mt.net.Codec = function (arg0) {
      this.key = new Array();
      var v3 = 0;
      var v4 = arg0.length;
      while (v3 < v4) {
        ++v3;
        var v5 = v3;
        var v6 = this.decodeChar(arg0.charCodeAt(v5));
        if (v6 != null) {
          this.key.push(v6);
        }
      }
      if (this.key.length == 0) {
        this.key.push(0);
      }
    };

    mt.net.Codec.__name__ = ['mt', 'net', 'Codec'];
    v1 = mt.net.Codec.prototype;
    v1.__class__ = mt.net.Codec;
    v1.decodeChar = function (arg0) {
      if (arg0 >= 65 && arg0 <= 90) {
        return arg0 - 65;
      }
      if (arg0 >= 97 && arg0 <= 122) {
        return arg0 - 97 + 26;
      }
      if (arg0 >= 48 && arg0 <= 57) {
        return arg0 - 48 + 52;
      }
      return null;
    };

    v1.key = null;
    v1.run = function (arg0, arg1) {
      if (arg1 == null) {
        arg1 = arg0.length;
      }
      var v4 = new StringBuf();
      var v5 = this.key.length;
      var v6 = 0;
      var v7 = arg0.length;
      while (v6 < v7) {
        ++v6;
        var v8 = v6;
        var v9 = arg0.charCodeAt(v8) ^ this.key[(v8 + arg1) % v5];
        if (v9 != 0) {
          v4.b += String.fromCharCode(v9);
        } else {
          v4.b += String.fromCharCode(arg0.charCodeAt(v8));
        }
      }
      return v4.b;
    };

    flash.Boot.__init(this);
    var d = Date;
    d.now = function () {
      return new Date();
    };

    d.fromTime = function (arg0) {
      var v3 = new Date();
      v3.setTime(arg0);
      return v3;
    };

    d.fromString = function (arg0) {
      var v3 = arg0.length;
      if (v3 != 8) {
      } else {
        if (v3 != 10) {
            throw 'Invalid date format : ' + arg0;
        } else {
            var v4 = arg0.split(':');
            var v5 = new Date();
            v5.setTime(0);
            v5.setUTCHours(v4[0]);
            v5.setUTCMinutes(v4[1]);
            v5.setUTCSeconds(v4[2]);
            return v5;
          if (v3 != 19) {
            var v4 = arg0.split('-');
            return new Date(v4[0], v4[1] - 1, v4[2], 0, 0, 0);
          } else {
            v4 = arg0.split(' ');
            v5 = v4[0].split('-');
            var v6 = v4[1].split(':');
            return new Date(v5[0], v5[1] - 1, v5[2], v6[0], v6[1], v6[2]);
          }
        }
      }
    };

    d.prototype.toString = function () {
      var v2 = this;
      var v3 = v2.getMonth() + 1;
      var v4 = v2.getDate();
      var v5 = v2.getHours();
      var v6 = v2.getMinutes();
      var v7 = v2.getSeconds();
      return v2.getFullYear() + '-' + (v3 < 10 ? '0' + v3 : '' + v3) + '-' + (v4 < 10 ? '0' + v4 : '' + v4) + ' ' + (v5 < 10 ? '0' + v5 : '' + v5) + ':' + (v6 < 10 ? '0' + v6 : '' + v6) + ':' + (v7 < 10 ? '0' + v7 : '' + v7);
    };

    d.prototype.__class__ = d;
    d.__name__ = ['Date'];
    Xml.Element = 'element';
    Xml.PCData = 'pcdata';
    Xml.CData = 'cdata';
    Xml.Comment = 'comment';
    Xml.DocType = 'doctype';
    Xml.Prolog = 'prolog';
    Xml.Document = 'document';
    haxe.Resource.content = [{'name': 'xml_lang', 'str': '<lang>\r\n\t<t id="sunsky">:)</t>\r\n\t<t id="map">Carte</t>\r\n\t<t id="expedition">Expéditions</t>\r\n\t<t id="createExp">CREER NOUVELLE</t>\r\n\t<t id="deleteExp">SUPPR. LA MIENNE</t>\r\n\t<t id="cancelExp">MASQUER</t>\r\n\t<t id="mapModeTags">Marqu.</t>\r\n\t<t id="mapModeGlobal">Global</t>\r\n\t<t id="hideTags">Cacher</t>\r\n\t<t id="close">Fermer</t>\r\n\t<t id="starting">Démarrage...</t>\r\n\t<t id="no_map">--</t>\r\n\t<t id="pos">Position :</t>\r\n\t<t id="locked">Bloqué !</t>\r\n\t<t id="fog">Zone inconnue</t>\r\n\t<t id="explored">Désert</t>\r\n\t<t id="zombie">zombie</t>\r\n\t<t id="undigged">Secteur inexploitable</t>\r\n\t<t id="clickToAddWaypoint">Nouvelle expédition</t>\r\n\t<t id="fewZombies">Zombies isolés</t>\r\n\t<t id="medZombies">Meute de zombies</t>\r\n\t<t id="manyZombies">Horde de zombies</t>\r\n\r\n\r\n\t<t id="tag">____MARQUEUR____</t>\r\n\t<t id="tag_1">Appel à l\'aide</t>\r\n\t<t id="tag_2">Ressources abandonnées</t>\r\n\t<t id="tag_3">Objet(s) abandonné(s)</t>\r\n\t<t id="tag_4">Objet(s) important(s) !</t>\r\n\t<t id="tag_5">Zone épuisée</t>\r\n\t<t id="tag_6">Zone sécurisée</t>\r\n\t<t id="tag_7">Zone à déblayer</t>\r\n\t<t id="tag_8">Entre 5 et 8 zombies</t>\r\n\t<t id="tag_9">9 zombies ou plus !</t>\r\n\t<t id="tag_10">Campement prévu</t>\r\n\t<t id="tag_11">Ruine à explorer</t>\r\n\t<t id="HorribleWords">\r\n\t\tPsychoses\r\n\t\tDémence\r\n\t\tAgonie\r\n\t\tBoire\r\n\t\tDormir\r\n\t\tSang\r\n\t\tRage\r\n\t\tHaine\r\n\t\tTuer\r\n\t\tTues-les\r\n\t\tMeurtre\r\n\t\tDrogues\r\n\t\tLa mort t\'attend\r\n\t\tTu vas mourir\r\n\t\tTu mourras cette nuit\r\n\t\tRejoins les ombres\r\n\t\tCauchemars\r\n\t\tMutilations\r\n\t\tAucun espoir\r\n\t\tIls t\'espionnent\r\n\t\tIls veulent ta mort\r\n\t\tNe leur fais pas confiance\r\n\t\tEnfuis toi loin\r\n\t\tNe les écoute pas\r\n\t\tIls te tueront\r\n\t\tTon voisin veut ta mort\r\n\t\tIls veulent te pendre\r\n\t\tIls vont te tuer\r\n\t\tTu y passeras\r\n\t\tGoûte leur sang\r\n\t\tOn t\'observe\r\n\t\tIls sont FOUS\r\n\t\tOn veut ta peau\r\n\t\tGoûte leur chair\r\n\t\tManges en un\r\n\t\tTues en un\r\n\t\tFais lui payer\r\n\t\tVenge-toi\r\n\t\tTrahis-les\r\n\t\tSans pitié\r\n\t\tJe ne suis pas fou\r\n\t\tJe ne vois rien\r\n\t\tIls sont fous\r\n\t\tA mort\r\n\t\tTue les tous\r\n\t\tIls mourront\r\n\t\tQu\'ils meurent\r\n\t\tDévore-les\r\n\t\tAbandonne\r\n\t\tTout...va...bien...\r\n\t\tNous étions mieux sans eux\r\n\t</t>\r\n</lang>\r\n'}];
    var g = _global;
    g.Int = {'__name__': ['Int']};
    g.Bool = {'__ename__': ['Bool']};
    g.Dynamic = {'__name__': ['Dynamic']};
    g.Class = {'__name__': ['Class']};
    g.Enum = {};
    g.Void = {'__ename__': ['Void']};
    g.Float = _global.Number;
    g.Float.__name__ = ['Float'];
    Array.prototype.__class__ = Array;
    Array.__name__ = ['Array'];
    String.prototype.__class__ = String;
    String.__name__ = ['String'];
    g.ASSetPropFlags(Array.prototype, null, 7);
    Math.__name__ = ['Math'];
    Math.NaN = Number.NaN;
    Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
    Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
    Math.isFinite = function (arg0) {
      return _global.isFinite(arg0);
    };

    Math.isNaN = function (arg0) {
      return _global.isNaN(arg0);
    };

    flash.Color = _global.Color;
    flash.Key = _global.Key;
    flash.Key.addListener(flash.Key);
    flash.MovieClip = _global.MovieClip;
    flash.NetConnection = _global.NetConnection;
    flash.SharedObject = _global.SharedObject;
    flash.Stage = _global.Stage;
    flash.TextField = _global.TextField;
    flash.TextFormat = _global.TextFormat;
    flash.TextSnapshot = _global.TextSnapshot;
    flash.text.StyleSheet = _global.TextField.StyleSheet;
    try {
      Boot.man = null;
      Boot.listeners = new List();
      Const.uniq = 0;
      ++Const.uniq;
      Const.DP_BG = Const.uniq;
      ++Const.uniq;
      Const.DP_FOG = Const.uniq;
      ++Const.uniq;
      Const.DP_FX = Const.uniq;
      ++Const.uniq;
      Const.DP_INTERF = Const.uniq;
      ++Const.uniq;
      Const.DP_TOP = Const.uniq;
      Const.WID = 300;
      Const.HEI = 300;
      Const.CWID = 100;
      Const.CHEI = 100;
      Const.MWID = 12;
      Const.MHEI = 12;
      Const.BGWID = 6;
      Const.BGHEI = 6;
      Const.BIG_MAP_WID = 17;
      Const.OFF_ALPHA = 60;
      Const.BLACK_ALPHA = 90;
      Const.BUILDING_NAMES = null;
      Const.HORRIBLE_WORDS = ['Psychoses', 'Démence', 'Agonie', 'Boire', 'Dormir', 'Sang', 'Rage', 'Haine', 'Tuer', 'Tues-les', 'Meurtre', 'Drogues', 'La mort t\'attend', 'Tu vas mourir', 'Tu mourras cette nuit', 'Rejoins les ombres', 'Cauchemars', 'Mutilations', 'Aucun espoir', 'Ils t\'espionnent', 'Ils veulent ta mort', 'Ne leur fais pas confiance', 'Enfuis toi loin', 'Ne les écoute pas', 'Ils te tueront', 'Ton voisin veut ta mort', 'Ils veulent te pendre', 'Ils vont te tuer', 'Tu y passeras', 'Goûte leur sang', 'On t\'observe', 'Ils sont FOUS', 'On veut ta peau', 'Goûte leur chair', 'Manges en un', 'Tues en un', 'Fais lui payer', 'Venge-toi', 'Trahis-les', 'Sans pitié', 'Je ne suis pas fou', 'Je ne vois rien', 'Ils sont fous', 'A mort', 'Tue les tous', 'Ils mourront', 'Qu\'ils meurent', 'Dévore-les', 'Abandonne'];
      FlashMap.MANAGER = null;
      FlashMap.cnx = null;
      FlashMap.ctx = new haxe.remoting.Context();
      FlashMap.info = null;
      haxe.Unserializer.DEFAULT_RESOLVER = Type;
      haxe.Unserializer.BASE64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:';
      haxe.Unserializer.CODES = null;
      flash.Boot.def_color = 0;
      flash.Boot.exception = null;
      Lang.TEXTS = Lang.init();
      Lang.get = new _Lang.AllTexts(@closure('get', Lang.TEXTS));
      Manager.LCD = 14155611;
      Manager.RED = 16736328;
      Manager.ICON_GLOW = [null, Manager.RED, Manager.LCD];
      Manager.SCROLL_SPD = 0.2;
      Manager.MAX_SPD = 4;
      Manager.FOCAL_BLUR = 4;
      Manager.NIGHT = null;
      Manager.PAN_MARGIN = 40;
      Manager.PANNING = 0.13;
      Manager.HANG_LIMIT = 32;
      Manager.LOW_FPS = 18;
      Manager.D = ['cW85sip4sdvus%3F6%3E%60hvzre%7Ec%2C', 'cW85sip4fvvus%3F6%3E%60hvzve%7Ec%2C', '%3F%60shpu%7E%3Evraus546erbzc%2C', 'sl%60e%60%3Bbf9lrx%2Apts%3F6bn%20', 'cW85sip4rvvus%3F6%3E%60hvzae%7Ec%2C', 'c%0Au5shf4%2A%7D%60rn%3F6x%60h%7Fz%60e%7E%7C%2C', 'A8shv%3F6c5pq3tmvw%7Ee%60%7Fc4xgz%2C', '2tg%3F65siqhq%7C%7E8bazncj4%60tce%40%2C', 'yit%3F%7E%7Fs3aAwxOthf%7Cweekc%3B%23%3F%7F%2Asohh6', 'yit%3F%7E%7Fs3sAdxOthg%7Cweekc%3B%23%3F%7F%2Asohh6', 'du%7Fs%7D%3F6%3F%7Es%2Ag%7Fyr5eu%60%3Euh%7C%2CMcz4', 'vu%7Fr%7D%3F6%3F%7Es%2Ag%7Fya5eu%60%3Euh%7C%2CMcz4', 'Wushv%3F6c5r%3Eusp%7Fr%7Ee%60i%7C4%25az%2C', '%7B%3F%60tqhtsdg%3Bfow%23Mermw%3E%7F%7F%7C3m%2Ai6'];
      Manager.DANGER_COLORS = [16776960, 16752704, 16711680, 16711680, 6845428];
      Manager.souls = [];
      MapCommon.CoordSep = ':';
      MapCommon.GroupSep = '|';
      MapCommon.MaxPathStringLength = 240;
      haxe.Serializer.USE_CACHE = false;
      haxe.Serializer.USE_ENUM_INDEX = false;
      haxe.Serializer.BASE64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:';
      haxe.remoting.ExternalConnection.connections = new Hash();
      mt.DepthManager.INST_COUNTER = 0;
      mt.Timer.wantedFPS = 32;
      mt.Timer.maxDeltaTime = 0.5;
      mt.Timer.oldTime = getTimer();
      mt.Timer.tmod_factor = 0.95;
      mt.Timer.calc_tmod = 1;
      mt.Timer.tmod = 1;
      mt.Timer.deltaT = 1;
      mt.Timer.frameCount = 0;
      mt.Timer.paused = false;
      Boot.main();
    }
    catch (Const.DP_TOP) {
      flash.Boot.__exc(Const.DP_TOP);
    }
  }
}
